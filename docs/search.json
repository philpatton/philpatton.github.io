[
  {
    "objectID": "occ.html",
    "href": "occ.html",
    "title": "Occupancy models",
    "section": "",
    "text": "In this notebook, I demonstrate how to fit static site-occupancy models in PyMC (Royle and Dorazio 2008, chap. 3). The standard site-occupancy model models binary detection/non-detection data \\(y_{j,k}\\) for repeated surveys \\(k=1,2,\\dots,K\\) at sites \\(j=1,2,\\dots,J.\\) The species is present at the sites when \\(z_j=1,\\) and absent otherwise. We assume that our probability of detecting the species given that the site is occupied is \\(P(y_{j,k}|z_j=1)=p,\\) and zero when the site is unoccupied. The probability of occurrence, which is typically the parameter of interest, is \\(P(z_{j}=1)=\\psi.\\) As such, we can think of this as a zero-inflated binomial model, where \\[\n\\begin{align}\n&y_j \\sim\n\\begin{cases}\n    0,   & \\text{if } z_j = 0 \\\\\n    \\text{Binomial}(K, p),   & \\text{if } z_j = 1\n\\end{cases} \\\\\n&z_j \\sim \\text{Bernoulli}(\\psi)\n\\end{align},\n\\] which assumes a constant occurrence probability across sites and a constant detection probability. I start with this simple model, then add site- and visit-level covariates later.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occ.html#estimating-parameters-with-pymc",
    "href": "occ.html#estimating-parameters-with-pymc",
    "title": "Occupancy models",
    "section": "Estimating parameters with PyMC",
    "text": "Estimating parameters with PyMC\nNext, I use PyMC to train the occupancy model with the simulated data. First, similar to JAGS and Stan, the model must be specified using the PyMC syntax. This is done using a context manager in Python, essentially, a with statement. This creates a Model object.\n\nwith pm.Model() as constant:\n\n    # priors for the detetion and occurrence probabilities\\\n    psi = pm.Uniform('psi', 0, 1)\n    p = pm.Uniform('p', 0, 1)\n\n    # likelihood for the summarized data\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=visit_count, \n                            observed=y_summarized)\n\nIn JAGS, the prior for \\(p\\) would be specified as p ~ dunif(0, 1). The PyMC equivalent is p = pm.Uniform('p', 0, 1). This could, alternatively, be specified as p = pm.Uniform('detection probability', 0, 1). For the likelihood, I use PyMC’s built-in ZeroInflatedBinomial distribution. We tell PyMC that this is an observed random variable by supplying data to the observed argument. PyMC also has handy tools for visualizing the model.\n\npm.model_to_graphviz(constant)\n\n\n\n\n\n\n\nFigure 1: Visual representation of model \\(p(\\cdot)\\psi(\\cdot).\\) MarginalMixture refers to the zero-inflated binomial distribution.\n\n\n\n\n\nNow I can sample from the posterior. Again, I use the context manager, this time referring to the model by name. It’s typical to name the output with idata because, by default, PyMC returns an object of class InferenceData from the Arviz package. Arviz is similar to the coda package for R.\n\nwith constant:\n    constant_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, p]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nPyMC will try to use the No-U-Turn Sampler (NUTS) whenever possible. As you can see, it samples the posterior quickly. I can plot the output using the az.plot_trace(), supplying the true values for \\(p\\) and \\(\\psi\\) for comparizon. I can also look at a tabular summary using az.summary().\n\naz.plot_trace(\n    constant_idata,\n    compact=True,\n    figsize=(8,4),\n    lines=[(\"psi\", {}, [psi_true]), (\"p\", {}, [p_true])] \n);\n\n\n\n\n\n\n\nFigure 2: Traceplots for the \\(p(\\cdot)\\psi(\\cdot)\\) model. The true parameter values are shown by vertical and horizontal lines.\n\n\n\n\n\n\naz.summary(constant_idata)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.802\n0.042\n0.725\n0.882\n0.001\n0.001\n2503.0\n2663.0\n1.0\n\n\np\n0.498\n0.030\n0.442\n0.554\n0.001\n0.000\n2042.0\n2089.0\n1.0",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occ.html#adding-site-covariates",
    "href": "occ.html#adding-site-covariates",
    "title": "Occupancy models",
    "section": "Adding site covariates",
    "text": "Adding site covariates\nNext, I add in some realism by simulating a site-level covariate \\(x\\) that affects the occurrence probability. I model this effect with a logit-linear model, i.e., \\(\\psi_j=\\text{logit}^{-1}(\\beta_0 + \\beta_1 x_j).\\)\n\n## ecological model\n\n# true parameter values\nbeta0_true = -1\nbeta1_true = 3\n\n# covariates \nx = scale(rng.uniform(size=site_count))\n\n# linear model\nmu_true = beta0_true + beta1_true * x\npsi_true = invlogit(mu_true)\n\n# simulate occurrence state\nz_true = rng.binomial(1, psi_true)\n\n## detection model\n\n# true parameter values\np_true = 0.75\n\n# simulate detection\ny = sim_y(p_true, z_true, site_count, visit_count)\n\n# vector with the number of detections at each site \ny_summarized = y.sum(axis=1)\n\n# detection data at the first five sites \ny[:5]\n\narray([[0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0]])\n\n\nAgain, I specify the model with PyMC. Like JAGS, the random variables can be manipulated, as in a linear model with \\(x_j.\\) These behave like numpy arrays, meaning that vectorized operations and broadcasting are available. To monitor the output of these manipulations, use the pm.Deterministic class. In this case, I am monitoring the site level occurrence probability \\(\\psi_j.\\)\n\nwith pm.Model() as psix:\n\n    # occurrence process \n    # priors \n    beta0 = pm.Normal(\"beta0\", mu=0, sigma=2)\n    beta1 = pm.Normal(\"beta1\", mu=0, sigma=2)\n    \n    # linear model\n    mu = beta0 + beta1 * x\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(mu))\n\n    # detection process\n    # prior\n    p = pm.Uniform('p', 0, 1)\n\n    # likelihood for the summarized data\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=visit_count, \n                            observed=y_summarized)\n\npm.model_to_graphviz(psix)\n\n\n\n\n\n\n\nFigure 3: Visual representation of model \\(p(\\cdot)\\psi(x).\\) MarginalMixture refers to the zero-inflated binomial distribution.\n\n\n\n\n\n\nwith psix:\n    psix_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [beta0, beta1, p]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.plot_trace(\n    psix_idata,\n    figsize=(8,6),\n    var_names=['beta0', 'beta1', 'p'],\n    lines=[(\"beta0\", {}, [beta0_true]), (\"beta1\", {}, [beta1_true]), \n           ('p', {}, [p_true])]\n);\n\n\n\n\nTraceplots for the \\(p(\\cdot)\\psi(x)\\) model. The true parameter values are shown by vertical and horizontal lines\n\n\n\n\n\naz.summary(psix_idata, var_names=['beta0', 'beta1', 'p'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nbeta0\n-1.241\n0.262\n-1.723\n-0.736\n0.005\n0.004\n2503.0\n2726.0\n1.0\n\n\nbeta1\n2.852\n0.404\n2.076\n3.577\n0.008\n0.006\n2674.0\n2634.0\n1.0\n\n\np\n0.745\n0.032\n0.684\n0.803\n0.001\n0.000\n3722.0\n3020.0\n1.0",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occ.html#adding-visit-covariates",
    "href": "occ.html#adding-visit-covariates",
    "title": "Occupancy models",
    "section": "Adding visit covariates",
    "text": "Adding visit covariates\nFinally, I add in visit-level covariate \\(w_{j,k}\\) that affects detection.\n\n## ecological model\n\n# true parameter values\nbeta0_true = -1\nbeta1_true = 3\n\n# covariates \nx = scale(rng.uniform(size=site_count))\n\n# linear model\nmu_true = beta0_true + beta1_true * x\npsi_true = invlogit(mu_true)\n\n# simulate occurrence state\nz_true = rng.binomial(1, psi_true)\n\n# true parameter values\nalpha0_true = 1\nalpha1_true = -3\n\n# covariates\nw = rng.uniform(size=site_count * visit_count).reshape(site_count, visit_count)\nw = scale(w)\n\n# linear model\nnu_true = alpha0_true + alpha1_true * w\np_true = invlogit(nu_true)\n\n# simulate detection\ny = sim_y(p_true, z_true, site_count, visit_count)\n\ny[:5]\n\narray([[0, 0, 0],\n       [0, 0, 0],\n       [0, 1, 1],\n       [1, 1, 0],\n       [0, 0, 0]])\n\n\nOur PyMC code will need to be a little uglier now. I could write the model in terms of the latent occurrence state \\(z_j.\\) The NUTS sampler, however, does not jive with discrete latent states. As such, PyMC will assign it to a binary Gibbs sampler by default, which works, albeit painfully slowly.\nSince I am impatient, I instead use the marginalized version of the model, that is, a model that does not include the discrete latent states. To do this in PyMC, I use the CustomDist class. This requires, first, defining the log probability of the distribution, logp, given the data and it’s parameters. We can write logp using the likelihood of the occupancy model, \\[\nP(\\mathbf{y}_j)=\n\\begin{cases}\n    P(\\mathbf{y}_j | z_j = 1)\\; \\psi_j \\; + \\; (1 - \\psi_j),   & \\text{if } \\mathbf{y}_j = \\mathbf{0}\\\\\n    P(\\mathbf{y}_j | z_j = 1)\\; \\psi_j,  & \\text{otherwise}\n\\end{cases}\n\\] where \\(P(\\mathbf{y}_j | z_j = 1) = \\prod_j p_{j,k}^{y_{j,k}} (1-p_{j,k})^{(1-y_{j,k})}\\) (Royle and Dorazio 2008). To do this in PyMC, I rely on the pm.math.switch function, which is similar to ifelse() in R or np.where().\n\n# likelihood for y data\ndef logp(x, p, psi):\n    '''Computes the log-likelihood for an occupancy model\n\n    Args: \n        x: (site_count x visit_count) array with binary detection data\n        p: (site_count x visit_count) array of probabilities\n        p: site_count vector of probabilities\n    '''\n    \n    bern = (p ** x) * ((1 - p) ** (1 - x))\n    bern_prod = pm.math.prod(bern, axis=1)\n    \n    res = pm.math.switch(\n        x.sum(axis=1) &gt; 0,\n        bern_prod * psi,\n        bern_prod * psi + (1 - psi)\n    )\n    \n    return pm.math.log(res)\n\nThen, I simply provide this function as an argument to the CustomDist class in our PyMC model.\n\nwith pm.Model() as marginal:\n\n    # occurrence process \n    # priors \n    beta0 = pm.Normal(\"beta0\", mu=0, sigma=2)\n    beta1 = pm.Normal(\"beta1\", mu=0, sigma=2)\n    \n    # linear model\n    mu = beta0 + beta1 * x\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(mu))\n\n    # detection process\n    # priors\n    alpha0 = pm.Normal('alpha0', mu=0, sigma=2)\n    alpha1 = pm.Normal('alpha1', mu=0, sigma=2)\n\n    # linear model\n    nu = alpha0 + alpha1 * w\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # likelihood\n    pm.CustomDist(\n        'y',\n        p,\n        psi,\n        logp=logp,\n        observed=y,\n    )\n\npm.model_to_graphviz(marginal)\n\n\n\n\n\n\n\nFigure 4: Visual representation of the \\(p(w)\\psi(w)\\) model.\n\n\n\n\n\n\nwith marginal:\n    marginal_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [beta0, beta1, alpha0, alpha1]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.plot_trace(\n    marginal_idata,\n    figsize=(8,6), \n    var_names=['beta0', 'beta1', 'alpha0', 'alpha1'],\n    lines=[(\"beta0\", {}, [beta0_true]), (\"beta1\", {}, [beta1_true]), \n           ('alpha0', {}, [alpha0_true]), ('alpha1', {}, [alpha1_true])]\n);\n\n\n\n\n\n\n\nFigure 5: Tracepots for the \\(p(w)\\psi(x)\\) model. The true parameter values are shown by vertical and horizontal lines\n\n\n\n\n\n\naz.summary(marginal_idata, var_names=['beta0', 'beta1', 'alpha0', 'alpha1'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nbeta0\n-0.743\n0.242\n-1.203\n-0.298\n0.004\n0.003\n3445.0\n3021.0\n1.0\n\n\nbeta1\n2.794\n0.397\n2.055\n3.542\n0.007\n0.005\n3073.0\n2584.0\n1.0\n\n\nalpha0\n1.398\n0.271\n0.911\n1.916\n0.005\n0.004\n2854.0\n2547.0\n1.0\n\n\nalpha1\n-3.086\n0.388\n-3.803\n-2.382\n0.007\n0.005\n2792.0\n2477.0\n1.0",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occ.html#model-comparison",
    "href": "occ.html#model-comparison",
    "title": "Occupancy models",
    "section": "Model comparison",
    "text": "Model comparison\nPyMC also has handy tools for model comparison. I demonstrate these by fitting a model to the warbler data with a constant probability of detection.\n\nY_sum = Y.sum(axis=1)\n\nwith pm.Model(coords=coords) as warbler_constantp:\n\n    # occurrence process priors \n    Beta = pm.Normal(\"Beta\", mu=0, sigma=2, dims=\"beta_coefs\")\n    \n    # linear model\n    mu = pm.math.dot(X, Beta)\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(mu))\n\n    # detection process priors\n    p = pm.Uniform('p', 0, 1)\n\n    # likelihood\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=J, observed=Y_sum)\n\npm.model_to_graphviz(warbler_constantp)\n\n\n\n\n\n\n\nFigure 9: Visual representaion of the warbler occupancy model with constant \\(p.\\)\n\n\n\n\n\n\nwith warbler_constantp:\n    warbler_constantp_idata = pm.sample(4000)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [Beta, p]\nSampling 4 chains for 1_000 tune and 4_000 draw iterations (4_000 + 16_000 draws total) took 5 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [20000/20000 00:05&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nNext, I caclculate the leave-one-out (loo) cross-validation score for each model (Vehtari, Gelman, and Gabry 2017). This involves first computing the log likelihood for each model.\n\nwith warbler:\n    pm.compute_log_likelihood(warbler_idata)\n\n\n\n\n\n\n    \n      \n      100.00% [16000/16000 00:00&lt;00:00]\n    \n    \n\n\n\nwarbler_loo = az.loo(warbler_idata)\n\nwarbler_loo\n\nComputed from 16000 posterior samples and 37 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo   -54.34     7.37\np_loo        6.13        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.5]   (good)       36   97.3%\n (0.5, 0.7]   (ok)          1    2.7%\n   (0.7, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\n\nwith warbler_constantp:\n    pm.compute_log_likelihood(warbler_constantp_idata)\n\n\n\n\n\n\n    \n      \n      100.00% [16000/16000 00:00&lt;00:00]\n    \n    \n\n\n\nwarbler_constantp_loo = az.loo(warbler_constantp_idata)\n\nwarbler_constantp_loo\n\nComputed from 16000 posterior samples and 37 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo   -39.30     5.11\np_loo        3.76        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.5]   (good)       37  100.0%\n (0.5, 0.7]   (ok)          0    0.0%\n   (0.7, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\nArviz has handy tools for comparing the results. First, I generate a tabular summary.\n\ndf_comp_loo = az.compare({r\"$p(visit,wheight)$\": warbler_idata, \n                          r\"$p(\\cdot)$\": warbler_constantp_idata})\ndf_comp_loo\n\n/Users/philtpatton/miniforge3/envs/mc/lib/python3.11/site-packages/arviz/stats/stats.py:307: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'False' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n  df_comp.loc[val] = (\n/Users/philtpatton/miniforge3/envs/mc/lib/python3.11/site-packages/arviz/stats/stats.py:307: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise in a future error of pandas. Value 'log' has dtype incompatible with float64, please explicitly cast to a compatible dtype first.\n  df_comp.loc[val] = (\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\n$p(\\cdot)$\n0\n-39.297150\n3.764431\n0.000000\n1.000000e+00\n5.114314\n0.00000\nFalse\nlog\n\n\n$p(visit,wheight)$\n1\n-54.340158\n6.131376\n15.043009\n5.879741e-13\n7.372541\n4.20795\nFalse\nlog\n\n\n\n\n\n\n\nThis indicates that the \\(p(\\cdot)\\) model is favored over the \\(p(visit,wheight)\\) model.\nArviz also generates plots for these comparisons.\n\naz.plot_compare(df_comp_loo, insample_dev=False);\n\n/Users/philtpatton/miniforge3/envs/mc/lib/python3.11/site-packages/arviz/plots/backends/matplotlib/compareplot.py:87: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  scale = comp_df[\"scale\"][0]\n\n\n\n\n\n\n\n\nFigure 10: Comparison between the \\(p(visit,wheight)\\) and the \\(p(\\cdot)\\) models in terms of loo.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "surv.html",
    "href": "surv.html",
    "title": "Open capture-recapture",
    "section": "",
    "text": "In this notebook, I explore models for estimating survival using capture-recapture data in PyMC. These models include the Cormack-Jolly-Seber (CJS) and Jolly-Seber-Shwarz-Arnason (JSSA) frameworks. The primary difference between the two is that the JSSA model also tries to estimate the probability of entry into the population, which permits esimation of the superpopulation size.\nIn this notebook, I have drawn considerable inspiration from Austin Rochford’s notebook on capture-recapture in PyMC, the second chapter of my dissertation (a work in progress), and McCrea and Morgan (2014).\n\nCormack-Jolly-Seber\nFirst, I explore fitting the Cormack-Jolly-Seber (CJS) model in PyMC. The CJS framework does not model entrance into the population, just survival, simplifying the model structure. There are many methods for estimating parameters in the model, including state-space formulations that explicitly model the latent alive/dead state \\(z.\\) Following the theme of the previous notebooks, I instead marginalize this variable out of the model by using the so-called \\(M\\)-array. This is an array that contains the sufficient statistics for the CJS and JSSA models. For example, \\(m_{1,2}\\) is the number of individuals that were released on at \\(t=1\\) and were first recaptured on \\(t=2.\\)\n\nAn example of the M-array from a four year capture-recapture survey. The number recaptured, \\(m_{i,j}\\) refers to the number of individuals released at \\(i\\) who were first recaptured at time \\(j\\).\n\n\n\n\n\n\n\n\n\n\n\nNumber Released\n\nNumber recaptured\n\nNever recaptured\n\n\n\n\n\n\n1982\n1983\n1984\n\n\n\n1981\n\\(R_1\\)\n\\(m_{1,2}\\)\n\\(m_{1,3}\\)\n\\(m_{1,4}\\)\n\\(R_1-m_{1\\cdot}\\)\n\n\n1982\n\\(R_2\\)\n\n\\(m_{2,3}\\)\n\\(m_{2,3}\\)\n\\(R_2-m_{2\\cdot}\\)\n\n\n1983\n\\(R_3\\)\n\n\n\\(m_{3,4}\\)\n\\(R_3-m_{3\\cdot}\\)\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport arviz as az\nimport pymc as pm \nimport pytensor.tensor as pt\n\nfrom pymc.distributions.dist_math import factln\nfrom scipy.linalg import circulant\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\n\ndef create_recapture_array(history):\n    \"\"\"Create the recapture array from a capture history.\"\"\"\n    _, occasion_count = history.shape\n    interval_count = occasion_count - 1\n\n    recapture_array = np.zeros((interval_count, interval_count), int)\n    for occasion in range(occasion_count - 1):\n\n        # which individuals, captured at t, were later recaptured?\n        captured_this_time = history[:, occasion] == 1\n        captured_later = (history[:, (occasion + 1):] &gt; 0).any(axis=1)\n        now_and_later = captured_this_time & captured_later\n        \n        # when were they next recaptured? \n        remaining_history = history[now_and_later, (occasion + 1):]\n        next_capture_occasion = (remaining_history.argmax(axis=1)) + occasion \n\n        # how many of them were there?\n        ind, count = np.unique(next_capture_occasion, return_counts=True)\n        recapture_array[occasion, ind] = count\n        \n    return recapture_array.astype(int)\n\ndef create_m_array(history):\n    '''Create the m-array from a capture history.'''\n\n    # leftmost column of the m-array\n    number_released = history.sum(axis=0)\n\n    # core of the m-array \n    recapture_array = create_recapture_array(history)\n    number_recaptured = recapture_array.sum(axis=1)\n\n    # no animals that were released on the last occasion are recaptured\n    number_recaptured = np.append(number_recaptured, 0)\n    never_recaptured = number_released - number_recaptured\n\n    # add a dummy row at the end to make everything stack \n    zeros = np.zeros(recapture_array.shape[1])\n    recapture_array = np.row_stack((recapture_array, zeros))\n\n    # stack the relevant values into the m-array \n    m_array = np.column_stack((number_released, recapture_array, never_recaptured))\n\n    return m_array.astype(int)\n\ndef fill_lower_diag_ones(x):\n    '''Fill the lower diagonal of a matrix with ones.'''\n    return pt.triu(x) + pt.tril(pt.ones_like(x), k=-1)\n\nAs an example, I use the cormorant data from McCrea and Morgan (2014), Table 4.6. These data come from an eleven year capture-recapture study between 1982 and 1993. These were breeding cormorants of unknown age. The data is summarized in the \\(M\\)-array below. The last column is the number that were never recapured. The number released can be calculated from the array.\n\ncormorant = np.array([\n       [ 10,   4,   2,   2,   0,   0,   0,   0,   0,   0,  12],\n       [  0,  42,  12,  16,   1,   0,   1,   1,   1,   0,  83],\n       [  0,   0,  85,  22,   5,   5,   2,   1,   0,   1,  53],\n       [  0,   0,   0, 139,  39,  10,  10,   4,   2,   0,  94],\n       [  0,   0,   0,   0, 175,  60,  22,   8,   4,   2, 199],\n       [  0,   0,   0,   0,   0, 159,  46,  16,   5,   2, 193],\n       [  0,   0,   0,   0,   0,   0, 191,  39,   4,   8, 171],\n       [  0,   0,   0,   0,   0,   0,   0, 188,  19,  23, 284],\n       [  0,   0,   0,   0,   0,   0,   0,   0, 101,  55, 274],\n       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  84,  97]])\n\n\ninterval_count, T = cormorant.shape\n\nnumber_recaptured = cormorant[:,:-1]\nnever_recaputured = cormorant[:,-1]\nnumber_released = number_recaptured.sum(axis=1) + never_recaputured\n\nThis PyMC model will look different than the ones in previous notebooks, simply because it requires many tricks to get the probabilities in the correct format for the \\(m\\)-array, then modeling the \\(m\\)-array as a multinomial with the associated cell probabilities. These probabilities correspond to the situations in the \\(m\\)-array, such as the probability that an animal survived and was not recaptured until a later date. In this example, I model survival as time-varying, i.e., \\(\\phi(t).\\)\n\n# utility vectors for creating arrays and array indices\nintervals = np.arange(interval_count)\nrow_indices = np.reshape(intervals, (interval_count, 1))\ncol_indices = np.reshape(intervals, (1, interval_count))\n\n# matrix indicating the number of intervals between sampling occassions\nintervals_between = np.clip(col_indices - row_indices, 0, np.inf)\n\nwith pm.Model() as phit:\n\n    # priors for catchability and survival \n    p = pm.Uniform('p', 0, 1)\n    phi = pm.Uniform('phi', 0, 1, shape=interval_count)\n\n    # broadcast phi into a matrix \n    phi_mat = pt.ones_like(number_recaptured) * phi\n    phi_mat = fill_lower_diag_ones(phi_mat) # fill irrelevant values \n    \n    # probability of surviving between i and j in the m-array \n    p_alive = pt.cumprod(phi_mat, axis=1)\n    p_alive = pt.triu(p_alive) # select relevant (upper triangle) values\n\n    # probability of not being captured between i and j\n    p_not_cap = pt.triu((1 - p) ** intervals_between)\n\n    # probabilities associated with each cell in the m-array\n    nu = p_alive * p_not_cap * p\n\n    # probability for the animals that were never recaptured\n    chi = 1 - nu.sum(axis=1)\n\n    # combine the probabilities into a matrix\n    chi = pt.reshape(chi, (interval_count, 1))\n    marr_probs = pt.horizontal_stack(nu, chi)\n\n    # distribution of the m-array \n    marr = pm.Multinomial(\n        'M-array',\n        n=number_released,\n        p=marr_probs,\n        observed=cormorant\n    )\n\npm.model_to_graphviz(phit)\n\n\n\n\n\n\n\nFigure 1: Visual representation of the CJS model\n\n\n\n\n\n\nwith phit:\n    cjs_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [p, phi]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:03&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\nmccrea_p = [0.51]\nmccrea_phi = [0.79, 0.56, 0.83, 0.86, 0.73, 0.70, 0.81, 0.64, 0.46, 0.95]\n\naz.plot_trace(\n    cjs_idata, \n    figsize=(10, 4),\n    lines=[(\"phi\", {}, [mccrea_phi]), (\"p\", {}, [mccrea_p])] \n);\n\n\n\n\n\n\n\nFigure 2: Traceplots for the cormorant CJS model with \\(p(\\cdot)\\phi(t)\\). MLEs from McCrea and Morgan (2014) shown by vertical and horizontal lines.\n\n\n\n\n\nThe model samples fairly quickly in this parameterization. The traceplots above include comparisons to the estimates from McCrea and Morgan (2014). While a bit messy, the plots show a high level of agreement between their estimates and the ones here. To clean things up a bit, I plot the estimates for \\(\\phi\\) over time, along with the 94% credible intervals\n\nfig, ax = plt.subplots(figsize=(6,4))\n\nt = np.arange(1983, 1993)\n\nphi_samps = az.extract(cjs_idata, var_names='phi').values.T\nphi_median = np.median(phi_samps, axis=0)\n\nax.plot(t, phi_median, linestyle='dotted', color='lightgray', linewidth=2)\nax.violinplot(phi_samps, t, showmedians=True, showextrema=False)\n\nax.set_ylim((0,1))\n\nax.set_ylabel(r'Apparent survival $\\phi$')\nax.set_title(r'Cormorant CJS')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 3: Violin plots of the posterior for apparent surival over time from the cormorant CJS. Horizontal lines represent the posterior median.\n\n\n\n\n\n\n\nJolly-Seber-Shwarz-Arnason (JSSA)\nThe second modeling framework I explore is the Jolly-Seber-Shwarz-Arnason (JSSA) model. This attempts to model entrants into the population, further permitting the estimation of the superpopulation size. As a demonstration, I use the classic European dipper data of Lebreton et al. (1992). I first convert the dataset into the \\(M\\)-array, since the data is in capture history format.\n\ndipper = np.loadtxt('dipper.csv', delimiter=',').astype(int)\ndipper[:5]\n\narray([[1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 1, 1, 0, 0, 0],\n       [1, 1, 0, 0, 0, 0, 0],\n       [1, 1, 0, 0, 0, 0, 0],\n       [1, 1, 0, 0, 0, 0, 0]])\n\n\n\ndipper_m = create_m_array(dipper)\ndipper_m\n\narray([[22, 11,  2,  0,  0,  0,  0,  9],\n       [60,  0, 24,  1,  0,  0,  0, 35],\n       [78,  0,  0, 34,  2,  0,  0, 42],\n       [80,  0,  0,  0, 45,  1,  2, 32],\n       [88,  0,  0,  0,  0, 51,  0, 37],\n       [98,  0,  0,  0,  0,  0, 52, 46],\n       [93,  0,  0,  0,  0,  0,  0, 93]])\n\n\nThe JSSA model requires modeling the number of unmarked animals that were released during an occasion. We can calculate this using the \\(m\\)-array by subtracting the number of marked animals who were released from the total number of released animals.\n\nrecapture_array = create_recapture_array(dipper)\n\nnumber_released = dipper_m[:,0]\nnumber_marked_released = recapture_array.sum(axis=0)\n\n# shift number_released to get the years to align   \nnumber_unmarked_released = number_released[1:] - number_marked_released\n\n# add the number released on the first occasion \nnumber_unmarked_released = np.concatenate(\n    ([number_released[0]], number_unmarked_released)\n)\n\nnumber_unmarked_released\n\narray([22, 49, 52, 45, 41, 46, 39])\n\n\nSimilar to the CJS model, this model requires a number of tricks to vectorize the operations. Many pertain to the distribution of the unmarked individuals. Similar to occupancy notebook, I use a custom distribution to model the entrants into the population. Austin Rochford refers to this as an incomplete multinomial distribution.\n\nn, occasion_count = dipper.shape\ninterval_count = occasion_count - 1\n\n# generate indices for the m_array  \nintervals = np.arange(interval_count)\nrow_indices = np.reshape(intervals, (interval_count, 1))\ncol_indices = np.reshape(intervals, (1, interval_count))\n\n# matrix indicating the number of intervals between sampling occassions\nintervals_between = np.clip(col_indices - row_indices, 0, np.inf)\n\n# index for generating sequences like [[0], [0,1], [0,1,2]]\nalive_yet_unmarked_index = circulant(np.arange(occasion_count))\n\n\ndef logp(x, n, p):\n    \n    x_last = n - x.sum()\n    \n    # calculate thwe logp for the observations\n    res = factln(n) + pt.sum(x * pt.log(p) - factln(x)) \\\n            + x_last * pt.log(1 - p.sum()) - factln(x_last)\n    \n    # ensure that the good conditions are met.\n    good_conditions = pt.all(x &gt;= 0) & pt.all(x &lt;= n) & (pt.sum(x) &lt;= n) & \\\n                        (n &gt;= 0)\n    res = pm.math.switch(good_conditions, res, -np.inf)\n\n    return res\n\n\n# m-array for the CJS portion of the likelihood\ncjs_marr = dipper_m[:-1,1:]\ncjs_marr\n\narray([[11,  2,  0,  0,  0,  0,  9],\n       [ 0, 24,  1,  0,  0,  0, 35],\n       [ 0,  0, 34,  2,  0,  0, 42],\n       [ 0,  0,  0, 45,  1,  2, 32],\n       [ 0,  0,  0,  0, 51,  0, 37],\n       [ 0,  0,  0,  0,  0, 52, 46]])\n\n\nAside from the unmarked portion of the model, the JSSA model is essentially identical to the CJS model above. In this version, I also model survival as time-varying, holding other parameters constant \\(p(\\cdot)\\phi(t)b_0(\\cdot)\\)\n\n# JSSA produces this warning. it's unclear why since it samples well\nimport warnings\nwarnings.filterwarnings(\n    \"ignore\", \n    message=\"Failed to infer_shape from Op AdvancedSubtensor\"\n)\n\nwith pm.Model() as jssa:\n\n    ## Priors\n    \n    # catchability, survival, and pent\n    p = pm.Uniform('p', 0., 1.)\n    phi = pm.Uniform('phi', 0., 1., shape=interval_count)\n    b0 = pm.Uniform('b0', 0., 1.)\n    # beta = pm.Dirichlet('beta', np.ones(interval_count))\n    \n    # # only estimate first beta, others constant\n    b_other = (1 - b0) / (interval_count)\n    beta = pt.concatenate(\n        ([b0], pt.repeat(b_other, interval_count))\n    )\n\n    # improper flat prior for N\n    flat_dist = pm.Flat.dist()\n    total_captured = number_unmarked_released.sum()\n    N = pm.Truncated(\"N\", flat_dist, lower=total_captured)\n\n    ## Entry \n    \n    # add [1] to ensure the addition of the raw beta_0\n    p_alive_yet_unmarked = pt.concatenate(\n        ([1], pt.cumprod((1 - p) * phi))\n    )\n\n    # tril produces the [[0], [0,1], [0,1,2]] patterns for the recursion\n    psi = pt.tril(\n        beta * p_alive_yet_unmarked[alive_yet_unmarked_index]\n    ).sum(axis=1)\n\n    # distribution for the unmarked animals\n    unmarked = pm.CustomDist(\n        'Unmarked captures', \n        N, \n        psi * p, \n        logp=logp, \n        observed=number_unmarked_released\n    )\n\n    ## CJS\n    \n    # broadcast phi into a matrix \n    phi_mat = pt.ones_like(recapture_array) * phi\n    phi_mat = fill_lower_diag_ones(phi_mat) # fill irrelevant values \n    \n    # probability of surviving between i and j in the m-array \n    p_alive = pt.cumprod(phi_mat, axis=1)\n    p_alive = pt.triu(p_alive) # select relevant (upper triangle) values\n    \n    # p_not_cap: probability of not being captured between i and j\n    p_not_cap = pt.triu((1 - p) ** intervals_between)\n\n    # nu: probabilities associated with each cell in the m-array\n    nu = p_alive * p_not_cap * p\n\n    # probability for the animals that were never recaptured\n    chi = 1 - nu.sum(axis=1)\n\n    # combine the probabilities into a matrix\n    chi = pt.reshape(chi, (interval_count, 1))\n    marr_probs = pt.horizontal_stack(nu, chi)\n\n    # distribution of the m-array \n    marr = pm.Multinomial(\n        'M-array',\n        n=number_released[:-1], # last count irrelevant for CJS\n        p=marr_probs,\n        observed=cjs_marr\n    )\n\npm.model_to_graphviz(jssa)\n\n\n\n\n\n\n\nFigure 4: Visual representation of the JSSA model\n\n\n\n\n\n\nwith jssa:\n    jssa_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [p, phi, b0, N]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:04&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\nphi_mle = [0.63, 0.46, 0.48, 0.62, 0.61, 0.58]\np_mle = [0.9]\nb0_mle = [0.079]\nN_mle = [310]\n\naz.plot_trace(\n    jssa_idata, \n    figsize=(10, 8),\n    lines=[(\"phi\", {}, phi_mle), (\"p\", {}, [p_mle]), (\"N\", {}, [N_mle]), (\"b0\", {}, [b0_mle])] \n);\n\n\n\n\n\n\n\nFigure 5: Traceplots for the dipper JSSA model. MLEs from the openCR package shown by vertical and horizontal lines.\n\n\n\n\n\nThe traceplots include the maximum likelihood estimates from the model, which I estimated usingthe openCR package in R. Again, there is high level of agreement between the two methods. I plot the survival estimates over time, and the posterior draws of \\(N\\), \\(p\\), and \\(b\\).\n\nfig, ax = plt.subplots(figsize=(6,4))\n\nt = np.arange(1981, 1987)\n\nphi_samps = az.extract(jssa_idata, var_names='phi').values.T\nphi_median = np.median(phi_samps, axis=0)\n\nax.plot(t, phi_median, linestyle='dotted', color='lightgray', linewidth=2)\nax.violinplot(phi_samps, t, showmedians=True, showextrema=False)\n\nax.set_ylim((0,1))\n\nax.set_ylabel(r'Apparent survival $\\phi$')\nax.set_title(r'Dipper JSSA')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 6: Violin plots of the posterior for apparent surival over time from the cormorant CJS. Horizontal lines represent the posterior median.\n\n\n\n\n\n\npost = jssa_idata.posterior\n\n# stack the draws for each chain, creating a (n_draws, n_species) array \np_samps = post.p.to_numpy().flatten()\nN_samps = post.N.to_numpy().flatten()\nb_samps = post.b0.to_numpy().flatten()\n\n# create the plot\nfig, (ax0, ax1) = plt.subplots(1, 2, figsize=(8, 4), sharey=True)\n\n# add the scatter for each species\nalph = 0.2\nax0.scatter(p_samps, N_samps, s=5, alpha=alph)\n\nax0.spines.right.set_visible(False)\nax0.spines.top.set_visible(False)\n\nax0.set_ylabel(r'$N$')\nax0.set_xlabel(r'$p$')\n\nax1.scatter(b_samps, N_samps, s=5, alpha=alph)\n\nax1.set_xlabel(r'$b_0$')\n\nfig.suptitle('Dipper JSSA posterior draws')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 7: Posterior draws of \\(N,\\) \\(b_0,\\) and \\(p\\) from the dipper JSSA model.\n\n\n\n\n\n\n\n\n\n\nReferences\n\nLebreton, Jean-Dominique, Kenneth P Burnham, Jean Clobert, and David R Anderson. 1992. “Modeling Survival and Testing Biological Hypotheses Using Marked Animals: A Unified Approach with Case Studies.” Ecological Monographs 62 (1): 67–118.\n\n\nMcCrea, Rachel S, and Byron JT Morgan. 2014. Analysis of Capture-Recapture Data. CRC Press.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Open capture-recapture"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Philip T. Patton",
    "section": "",
    "text": "Phil is a PhD candidate in the Marine Mammal Research Program at the Hawaiʻi Institute of Marine Biology, and a NOAA QUEST Fellow with the Cetacean Research Program at the Pacific Islands Fisheries Science Center.\nFor his dissertation, he’s researching ways to improve stock assessments of non-migratory dolphins in Hawaiʻi. This includes automating photo-identification of these animals, understanding how these automated tools interact with capture-recapture models, and estimating demographic parameters using cutting edge methods in capture recapture.\nHe did his master’s with Krishna Pacifici at North Carolina State University, where he studied ways to improve estimates of species distribution, particularly when species interact and when the data contains sampling errors."
  },
  {
    "objectID": "dist.html",
    "href": "dist.html",
    "title": "Distance sampling",
    "section": "",
    "text": "In this notebook, I explore how to fit distance sampling models for estimating the size of a closed population. Similar to the occupancy and closed capture-recapture notebooks, I use parameter-expanded data-augmentation (PX-DA) and the zero-inflated binomial model in this notebook.\nThe idea with distance sampling, also known as line-transect sampling, is that a surveyer traverses a transect, typically in a boat or a plane. As they survey, they note when they detect an individual, or a group, from the species of interest, and further note the distance from the transect to the animal. Further, they note the angle to the animal(s), such that they can calculate the perpendicular distance from the animal to the transect. We assume that probability of detecting an animal \\(p\\) decreases monotonically as the distance from the transect grows, e.g., \\(p=\\exp(-x^2/\\sigma^2),\\) where \\(x\\) is the distance and \\(\\sigma\\) is a scale parameter to be estimated. These simple assumptions permit the estimation of the population size \\(N\\) as well as density \\(D.\\)\nFollowing Hooten and Hefley (2019), Chapter 24 and Royle and Dorazio (2008), Chapter 7, I use the impala data from Burnham, Anderson, and Laake (1980), who credits P. Hemingway with the dataset. In this dataset, 73 impalas were observed along a 60km transect. The distance values below are the perpendicular distances, in meters, from the transect.\n\nimport pymc as pm\nimport pytensor.tensor as pt\nimport matplotlib.pyplot as plt\nimport arviz as az\nimport numpy as np\n\n# plotting defaults\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\n\n# hyper parameters\nM = 500\nU_X = 400\nU_SIGMA = 400\n\n# burnham impala dataset with distances in m\nx_observed = np.array(\n    [71.933980, 26.047227, 58.474341, 92.349221, 163.830409, 84.523652\n    ,163.830409, 157.330098, 22.267696, 72.105330, 86.986979, 50.795047\n    ,0.000000, 73.135370,  0.000000, 128.557522, 163.830409,  71.845104\n    ,30.467336, 71.073909, 150.960702, 68.829172, 90.000000, 64.983827\n    ,165.690874, 38.008322, 378.207430, 78.146226, 42.127052, 0.000000\n    ,400.000000, 175.386612, 30.467336, 35.069692, 86.036465, 31.686029\n    ,200.000000, 271.892336, 26.047227, 76.604444, 41.042417, 200.000000\n    ,86.036465, 0.000000, 93.969262, 55.127471, 10.458689, 84.523652\n    ,0.000000, 77.645714, 0.000000, 96.418141, 0.000000, 64.278761\n    ,187.938524, 0.000000, 160.696902, 150.453756, 63.603607, 193.185165\n    ,106.066017, 114.906666, 143.394109, 128.557522, 245.745613, 123.127252\n    ,123.127252, 153.208889, 143.394109, 34.202014, 96.418141, 259.807621\n    ,8.715574]\n)\n\n# plot the distances \nfig, ax = plt.subplots(figsize=(4,4))\n\nax.hist(x_observed, edgecolor='white')\n\nax.set_title('Hemingway Impala Data')\nax.set_ylabel('Number of detections')\nax.set_xlabel('Distance (m)')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Histogram of the number of detected impalas at varying distances.\n\n\n\n\n\nAgain, we treat this as a zero-inflated binomial model using PX-DA. The trick for doing so is to create a binary vector of length \\(M\\), \\(y,\\) that represents whether the individual was detected during the study. Then, combine the indicator with the distance vector \\(x\\) to create a the full dataset \\((x,y).\\)\n\nn = len(x_observed)\nunobserved_count = M - n\nzeros = np.zeros(unobserved_count)\n\ny = np.ones(n)\ny_augmented = np.concatenate((y, zeros))\n\nThe issue is that \\(x\\) is unobserved for the undetected individuals. To work around this, we put a uniform prior on the unobserved \\(x,\\) i.e., \\(x \\sim \\text{Uniform}(0, U_x).\\) With this “complete” \\(x,\\) we can construct the detection function \\(p\\) for the unobserved individuals.\n\nwith pm.Model() as distance:\n    \n    psi = pm.Uniform('psi', 0, 1)\n    sigma = pm.Uniform('sigma', 0, U_SIGMA)\n    \n    x_unobserved = pm.Uniform('x_unobserved', 0, U_X, shape=unobserved_count)\n    x_complete = pt.concatenate((x_observed, x_unobserved))\n\n    p = pm.math.exp(- x_complete ** 2 / sigma ** 2)\n\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=1, observed=y_augmented)\n\npm.model_to_graphviz(distance)\n\n\n\n\n\n\n\nFigure 2: Visual representation of the distance sampling model.\n\n\n\n\n\n\nwith distance:\n    distance_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, sigma, x_unobserved]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 12 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:11&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.plot_trace(\n    distance_idata, \n    figsize=(10,4),\n    var_names=['psi', 'sigma']\n);\n\n\n\n\n\n\n\nFigure 3: Traceplots for the distance sampling model.\n\n\n\n\n\nThis model samples slower than the models in the other notebooks, presumably because of the unobserved \\(x.\\) As in the closed capture-recapture notebook, we will have to simulate the posterior for \\(N\\) using the posterior distribution of \\(\\psi\\) and \\(M.\\)\n\nRNG = np.random.default_rng()\n\n# this does not make a copy of the posterior\npost = distance_idata.posterior\n\n# simulate draws of N using the posterior of psi \nN_samples = RNG.binomial(M, post.psi)\nN_samples = N_samples.flatten()\nN_hat = N_samples.mean()\n\nsigma_samples = post.sigma.values.flatten()\n\n# plot the results\nfig, (ax0, ax1) = plt.subplots(1, 2, sharey=True, figsize=(8,4))\n\n# histograms of the posteriors\nax0.hist(N_samples, edgecolor='white')\nax1.hist(sigma_samples, edgecolor='white')\n\n# show the abundance dist in terms of M\nax0.set_xlim((0, M))\n\n# axes labels \nax0.set_xlabel('Abundance $N$')\nax0.set_ylabel('Number of samples')\nax1.set_xlabel('Detection range $\\sigma$')\n\n# add the point estimates\nsigma_hat = sigma_samples.mean()\nax0.text(400, 1300, f'$\\hat{{N}}$={N_hat:.1f}', ha='center', va='center')\nax1.text(250, 1300, f'$\\hat{{\\sigma}}$={sigma_hat:.1f}', ha='center', va='center')\n\n# the results from royle and dorazio (2008) for comparison\nN_hat_royle = 179.9\nsigma_hat_royle = 187\n\nax0.axvline(N_hat_royle, linestyle='--', linewidth=1, color='black')\nax1.axvline(sigma_hat_royle, linestyle='--', linewidth=1, color='black')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Posterior distributions for \\(N\\) and \\(\\sigma.\\) Estimates from Royle and Dorazio (2008) are shown with vertical lines.\n\n\n\n\n\nThe model shows a high level of agreement with Royle and Dorazio (2008), Chapter 7, although note that they reported results in terms of 100m units. It is also possible to plot the posterior distribution of the detection function.\n\nxx = np.arange(400)\nsigma_samps = post.sigma.values.flatten()\n\ndef det_func(x, s):\n    return np.exp(- (x ** 2) / (s ** 2))\n\np_samps = np.array([det_func(xx, s) for s in sigma_samps])\n\np_mean = p_samps.mean(axis=0)\np_low = np.quantile(p_samps, 0.02, axis=0)\np_high = np.quantile(p_samps, 0.98, axis=0)\n\nfig, ax = plt.subplots(figsize=(5,4))\n\nax.plot(xx, p_mean, '-')\nax.fill_between(xx, p_low, p_high, alpha=0.2)\n\nax.set_title('Detection function')\nax.set_ylabel(r'$p$')\nax.set_xlabel(r'Distance (m)')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 5: Posterior distribution for the detection function. The line represents the posterior mean while the shaded area is the 96% interval.\n\n\n\n\n\n\n\n\n\nReferences\n\nBurnham, Kenneth P, David R Anderson, and Jeffrey L Laake. 1980. “Estimation of Density from Line Transect Sampling of Biological Populations.” Wildlife Monographs, no. 72: 3–202.\n\n\nHooten, Mevin B, and Trevor Hefley. 2019. Bringing Bayesian Models to Life. CRC Press.\n\n\nRoyle, J Andrew, and Robert M Dorazio. 2008. Hierarchical Modeling and Inference in Ecology: The Analysis of Data from Populations, Metapopulations and Communities. Elsevier.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Distance sampling"
    ]
  },
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Please find here any notebooks that I may have thought would be of general interest. For now, these mainly consist of my attempts to port standard ecological models to PyMC, a Python library for doing Bayesian analysis.\n\nPyMC\nThere are many valuable tools for fitting hierarchical models in ecology. These tools are typically R libraries, such as unmarked, or programs called from R, such as JAGS or Stan. There are relatively fewer examples of how to fit these models in Python. While most ecologists, and arguably statisticians, use R, there are some benefits to using Python generally. For example, despite ecology being a lucrative industry, some of us might have to pivot to another field where Python may be more common. Besides, Python is widely used for machine learning, which is increasingly applied in ecology.\nIn the PyMC notebooks, I try to demonstrate how to use PyMC to train the most common hierarchcial models in ecology. For this, I have drawn considerable inspiration from Royle and Dorazio (2008), Kéry and Schaub (2011), McCrea and Morgan (2014), and Hooten and Hefley (2019), oftentimes simply porting their code, ideas, and analyses. In doing so, I hope to demonstrate PyMC’s core features, and highlight its strengths and weakenesses. The PyMC notebooks are somewhat sequential, with earlier notebooks explaining more basic features.\n\n\n\n\n\nReferences\n\nHooten, Mevin B, and Trevor Hefley. 2019. Bringing Bayesian Models to Life. CRC Press.\n\n\nKéry, Marc, and Michael Schaub. 2011. Bayesian Population Analysis Using WinBUGS: A Hierarchical Perspective. Academic Press.\n\n\nMcCrea, Rachel S, and Byron JT Morgan. 2014. Analysis of Capture-Recapture Data. CRC Press.\n\n\nRoyle, J Andrew, and Robert M Dorazio. 2008. Hierarchical Modeling and Inference in Ecology: The Analysis of Data from Populations, Metapopulations and Communities. Elsevier.",
    "crumbs": [
      "Notebooks"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Philip T. Patton",
    "section": "",
    "text": "Phil is a PhD candidate in the Marine Mammal Research Program at the Hawaiʻi Institute of Marine Biology, and a NOAA QUEST Fellow with the Cetacean Research Program at the Pacific Islands Fisheries Science Center.\nFor his dissertation, he’s researching ways to improve stock assessments of non-migratory dolphins in Hawaiʻi. This includes automating photo-identification of these animals, understanding how these automated tools interact with capture-recapture models, and estimating demographic parameters using cutting edge methods in capture recapture.\nHe did his master’s with Krishna Pacifici at North Carolina State University, where he studied ways to improve estimates of species distribution, particularly when species interact and when the data contains sampling errors."
  },
  {
    "objectID": "closed_cmr.html",
    "href": "closed_cmr.html",
    "title": "Closed capture-recapture",
    "section": "",
    "text": "In this notebook, I explore fitting closed population capture-recapture models in PyMC. Capture-recapture, at least the Lincoln-Peterson estimator, has been around for almost 100 years. Since then, countless varieties of capture-recapture models have been developed for closed populations (Otis et al. 1978).\nThe basic steps in capture-recapture are: capture several individuals–e.g., via trapping–from the population of interest, mark these animals, then release them. We repeat this process several times, each time noting when we recapture individuals.\n\n\n\nTable 1: Example capture history, where \\(t\\) is the sampling occasion and 1 indicates capture\n\n\n\n\n\nIndividual\n\\(t_1\\)\n\\(t_2\\)\n\\(t_3\\)\n\\(t_4\\)\n\n\n\n\n001\n1\n1\n0\n1\n\n\n002\n0\n1\n1\n1\n\n\n003\n0\n0\n1\n1\n\n\n\n\n\n\nThis produces a capture history for each individual, which allows us to estimate the probability of capture and the number of individuals in the population \\(N\\).\n\nModel \\(M_0\\)\n\n# libraries \nimport numpy as np\nimport pandas as pd\nimport pymc as pm\nimport arviz as az\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom pymc.distributions.dist_math import binomln, logpow\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\n# pal = sns.color_palette(\"Set2\")\n# sns.set_palette(pal)\n\n# hyperparameters \nSEED = 808\nRNG = np.random.default_rng(SEED)\nM = 1500\n\nI explore fitting the simplest closed capture-recapture model, Model \\(M_0,\\) through parameter-expanded data-augmentation (PX-DA, Royle and Dorazio 2008). The idea with PX-DA is to augment the capture histories with \\(M-n\\) all zero capture-histories, where \\(M\\) is a hyperparameter that should be much greater than the true population size \\(N,\\) and \\(n\\) is the total number of individuals that were captured during the study. This allows us to treat the data as a zero-inflated binomial distribution (see below).\n\ndef augment_history(history):\n    '''Augment a capture history with all-zero histories.'''\n    \n    animals_captured, T = history.shape\n\n    # create M - n all zero histories\n    zero_history_count = M - animals_captured\n    zero_history = np.zeros((zero_history_count, T))\n\n    # tack those on to the capture history\n    augmented = np.row_stack((history, zero_history))\n\n    return augmented \n\nTo demonstrate this approach, I use the salamander dataset from Bailey, Simons, and Pollock (2004), as demonstrated in Hooten and Hefley (2019), Chapter 24. These data were collected on two salamander species, the red-cheeked salamander (Plethodon jordani) and the pygmy salamander (Desmognathus wrighti), in Great Smoky Mountains National Park. The salamanders were counted in 15m by 15m square plots. In this case, we augment the history by setting \\(M=1500\\) (see above). There were \\(n=92\\) individual red-cheeked and \\(n=132\\) pygmy salamanders captured during the course of the survey.\n\ndef get_history():\n    '''Read, augment, and recombine the salamander histories.'''\n    \n    # read in salamander data \n    sal_data = pd.read_csv('sal_data.csv')\n    \n    # labels for capture history columns \n    col_labs = [f'y{t}' for t in range(1, 5)]\n\n    # subset each dataset before augmenting \n    is_pyg = sal_data.spp == 1\n    is_red = sal_data.spp == 0\n\n    pyg = sal_data.loc[is_pyg, col_labs].to_numpy()\n    red = sal_data.loc[is_red, col_labs].to_numpy()\n\n    # augment each set separately since they differ in length\n    pyg_augmented = augment_history(pyg)\n    red_augmented = augment_history(red)\n\n    # recombine into one history \n    history = np.concatenate((pyg_augmented, red_augmented))\n\n    return history\n\nhistory = get_history()\n_, T = history.shape \n\n# summarize into binomial data\nhistory_summarized = history.sum(axis=1)\n\nFor this model, I use the pm.ZeroInflatedBinomial class, just as I did in the occupancy notebook. That said, the parameters here are different. First, \\(p\\) represents the probability of capturing a given individual during the survey. Second, \\(\\psi\\) represents a mysterious entity known as the inclusion probability. That is, the probability that an individual from the hypothetical superpopulation \\(M\\) is included in the population of interest \\(N.\\) Then, we can estimate the population size as \\(\\hat{N}=M\\hat{\\psi},\\) or generate posterior draws of \\(N,\\) e.g., \\(N^{(s)} \\sim \\text{Bin}(M,\\psi^{(s)})\\)\nIn this example, I combine the two species into one pm.Model object, making use of coords. That said, the parameters for each species are treated as independent.\n\n# index for each species\nspecies_idx = np.repeat([0, 1], M)\n\n# coordinates identifying parameter each species  \ncoords = {'species': ['pygmy', 'red_cheeked']}\n\nwith pm.Model(coords=coords) as M0:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Uniform('psi', 0, 1, dims='species')\n    p = pm.Uniform('p', 0, 1, dims='species')\n\n    # likelihood for the summarized data\n    pm.ZeroInflatedBinomial(\n        'history', \n        p=p[species_idx], \n        psi=psi[species_idx], \n        n=T,\n        observed=history_summarized\n    )\n    \npm.model_to_graphviz(M0)\n\n\n\n\n\n\n\nFigure 1: Visual representation of model \\(M_0.\\) MarginalMixture refers to the zero-inflated binomial distribution.\n\n\n\n\n\n\nwith M0:\n    M0_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, p]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 22 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:21&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.plot_trace(M0_idata, figsize=(8,4));\n\n\n\n\n\n\n\nFigure 2: Traceplots for the salamander \\(M_0\\) model. The red-cheeked salamander is in blue while the pygmy salamander is in red.\n\n\n\n\n\nFor faster sampling, it’s better to separate the two species into two separate models. On my machine, the individual species models finish sampling in 2-3 seconds, compared to 15-20 seconds for the two species model. That said, the two species model is somewhat more convenient.\nOf course, the trace plots lack our true parameter of interest: the population size \\(N.\\) We can simulate the posterior of \\(N\\) as a derived quantity, using \\(M\\) and the posterior distribution of \\(\\psi.\\) Arviz has handy tools for calculating posteriors of derived quantities.\n\n# this does not make a copy of the posterior, allowing us to modify the idata object\npost = M0_idata.posterior\n\n# simulate draws of N \nN_samples = RNG.binomial(M, post.psi)\n\n# add our draws back to the idata object, \n# specifying the dimensions of our array (species, chain, draw)\npost['N'] = (post.dims, N_samples)\n\nNow we can look at the trace plots, this time excluding \\(\\psi\\) and looking at \\(N.\\) I also added the estimates from Hooten and Hefley (2019), Chapter 24, although they used a different prior for \\(\\psi.\\)\n\nN_hooten = [229.6, 450.9]\naz.plot_trace(M0_idata, var_names=['N'], combined=True, \n              figsize=(8,2),lines=[(\"N\", {}, [N_hooten])]);\n\n\n\n\n\n\n\nFigure 3: Traceplots for the salamander \\(M_0\\) model, including \\(N\\). Estimates from Hooten and Hefley (2019) are shown by the vertical lines\n\n\n\n\n\nWe might expect estimates of capture probability \\(p\\) and the abundance \\(N,\\) by way of the inclusion probability \\(\\psi,\\) to be somewhat correlated. We can explore this relationship visually by plotting the posterior draws. For a more custom look to the plots, I plot the draws using matplotlib.\n\n# stack the draws for each chain, creating a (n_draws, n_species) array \np_samps = np.vstack(post.p.to_numpy())\nN_samps = np.vstack(post.N.to_numpy())\n\n# create the plot\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\n\n# add the scatter for each species\nlabs = ['Pygmy', 'Red-backed']\nax.scatter(p_samps[:,0], N_samps[:,0], s=10, alpha=0.2, label=labs[0])\nax.scatter(p_samps[:,1], N_samps[:,1], s=10, alpha=0.2, label=labs[1])\n\n# this removes the opacity for the dots in the legend\nleg = ax.legend()\nfor lh in leg.legend_handles: \n    lh.set(sizes=[25], alpha=[1])\n\n# update aesthetics \nax.spines.right.set_visible(False)\nax.spines.top.set_visible(False)\n\nax.set_ylabel(r'$N$')\nax.set_xlabel(r'$p$')\nax.set_title('Posterior draws')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Posterior draws of \\(N\\) and \\(p\\) for both species of salamander.\n\n\n\n\n\n\n\nModel \\(M_b\\)\nNext, I fit model \\(M_b,\\) which accounts for the possibility that the capture probability changes after the animal is first caught. This could be from trap happiness, whereby animals are more likely to be trapped after their first time. Conversely, this could be from subsequent trap avoidance.\nMirroring (Royle and Dorazio 2008, chap. 5), I fit this model to the Microtus dataset reported in (Williams, Nichols, and Conroy 2002, 525). This version of the dataset includes encounter histories of \\(n=56\\) adult males that were captured on \\(T=5\\) consecutive days.\n\n# read in the microtus data\nmicrotus = np.loadtxt('microtus.data.txt').astype(int)\n\n# the last column is not relevant\nmicro_hist = microtus[:,:-1]\nn, T = micro_hist.shape\n\n# augment with all zero histories\nM = 100\nmicro_augmented = augment_history(micro_hist)\n\n# note the occasion when each individual was first seen\nfirst_seen = (micro_hist != 0).argmax(axis=1)\n\n# create the covariate for the behavior effect\nbehavior_effect = np.zeros((M, T))\nfor i, f in enumerate(first_seen):\n    behavior_effect[i, (f + 1):] = 1\n\n# covariate matrix\nx_int = np.ones((M, T))\nX = np.stack((x_int, behavior_effect), axis=2)\n\nI use the same custom distribution as the occupancy notebook, the zero-inflated model, except the zero-inflation happens at the row-level.\n\ndef logp(value, n, p, psi):\n    \n    binom = binomln(n, value) + logpow(p, value) + logpow(1 - p, n - value)\n    bin_sum = pm.math.sum(binom, axis=1)\n    bin_exp = pm.math.exp(bin_sum)\n\n    res = pm.math.switch(\n        value.sum(axis=1) &gt; 0,\n        bin_exp * psi,\n        bin_exp * psi + (1 - psi)\n    )\n    \n    return pm.math.log(res)\n\ncoords = {'alpha_coeffs': ['Intercept', 'B_Response']}\nwith pm.Model(coords=coords) as mb:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Uniform('psi', 0, 1)\n    Alpha = pm.Normal('Alpha', 0, 2, dims='alpha_coeffs')\n\n    nu = pm.math.dot(X, Alpha)\n    p = pm.math.invlogit(nu)\n\n    # likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=micro_augmented\n    )\n    \npm.model_to_graphviz(mb)\n\n\n\n\n\n\n\nFigure 5: Visual representation of model \\(M_b.\\)\n\n\n\n\n\n\nwith mb:\n    mb_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, Alpha]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.summary(mb_idata)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nAlpha[Intercept]\n0.112\n0.245\n-0.318\n0.571\n0.005\n0.004\n2145.0\n2049.0\n1.0\n\n\nAlpha[B_Response]\n0.615\n0.293\n0.074\n1.167\n0.006\n0.005\n2095.0\n2289.0\n1.0\n\n\npsi\n0.574\n0.051\n0.476\n0.666\n0.001\n0.001\n2482.0\n1969.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_forest(mb_idata, var_names=['Alpha'], combined=True, ess=True, figsize=(6,2));\n\n\n\n\n\n\n\nFigure 6: Forest plot showing the catchability parameters from model \\(M_b.\\)\n\n\n\n\n\nThe forest plot indicates that there is some evidence of a weak, positive behavioral response. Although note that the 94% credible intervals between the baseline capture rate and the behavioral effect overlap considerably.\n\n# simulate draws of N \nN_samples = RNG.binomial(M, az.extract(mb_idata).psi.values)\n\n# add our draws back to the idata object, \nfig, ax = plt.subplots(figsize=(4, 4))\n\n# add the scatter for each species\nax.hist(N_samples, edgecolor='white')\n\nax.set_ylabel('Number of samples')\nax.set_title('Posterior of $N$')\nax.axvline(n, color='C1')\n\nax.annotate(\n    'Number\\ndetected $n$', \n    ha='left',\n    xy=(n, 1200), \n    color='black',\n    xytext=(n-22, 900), \n    arrowprops=dict(arrowstyle=\"-&gt;\", color='black', linewidth=1,\n                    connectionstyle=\"angle3,angleA=90,angleB=0\")\n)\n\nax.set_ylim((0,1300))\nplt.show()\n\n\n\n\n\n\n\nFigure 7: Posterior distribution of \\(N\\) from model \\(M_b.\\) The number voles that were detected \\(n\\) is shown by the vertical red line.\n\n\n\n\n\nThe posterior of \\(N\\) shows one issue with this parameterization of the model. Notice that nearly half of the posterior samples estimate \\(N\\) to be less that than the number of animals detected \\(n\\)! The discovery curve hints at why this may be the case. It seems that all the voles in the population may have been captured by the end of the study.\n\noccasion, number_unmarked = np.unique(first_seen, return_counts=True)\ncurve = np.cumsum(number_unmarked)\n\noccasion = np.insert(occasion + 1, 0, 0)\ncurve = np.insert(curve, 0, 0)\n\nfig, ax = plt.subplots(figsize=(5, 3.5))\nax.plot(occasion, curve)\nax.fill_between(occasion, curve, alpha=0.2)\nax.set_title('Discovery curve')\nax.set_xlabel('Occasion')\nax.set_ylabel('Unique voles captured')\nplt.show()\n\n\n\n\n\n\n\nFigure 8: Discovery curve for the Microtus study.\n\n\n\n\n\nTo get around this issue, I reparameterize the model in terms of the latent included state \\(z.\\) The NUTS algorithm cannot sample discrete random variables. As such, PyMC assigns the NUTS algorithm to \\(\\psi\\) and \\(\\alpha,\\) and a Gibbs sampler to the latent states \\(z.\\) This slows the sampler down relative to the previous parameterization.\n\n# flattening the covariates makes this parameterization easier \nx_int = np.ones(M * T)\nX = np.column_stack((x_int, behavior_effect.flatten()))\n\n# indices for individual \nindividual_idx = np.repeat(np.arange(M), T)\nmicro_flat = micro_augmented.flatten()\n\ncoords = {'alpha_coeffs': ['Intercept', 'B_Response']}\nwith pm.Model(coords=coords) as latent_mb:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Uniform('psi', 0, 1)\n    Alpha = pm.Normal('Alpha', 0, 2, dims='alpha_coeffs')\n\n    nu = pm.math.dot(X, Alpha).flatten()\n    p = pm.math.invlogit(nu)\n\n    z = pm.Bernoulli('z', psi, shape=M)\n\n    # likelihood \n    pm.Bernoulli(\n        'y',\n        p=p * z[individual_idx],\n        observed=micro_flat\n    )\n    \npm.model_to_graphviz(latent_mb)\n\n\n\n\n\n\n\nFigure 9: Visual representation of the model with the latent occurrence state \\(z.\\)\n\n\n\n\n\n\nwith latent_mb:\n    latent_idata = pm.sample()\n\nMultiprocess sampling (4 chains in 4 jobs)\nCompoundStep\n&gt;NUTS: [psi, Alpha]\n&gt;BinaryGibbsMetropolis: [z]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 14 seconds.\n/Users/philtpatton/miniforge3/envs/pymc/lib/python3.11/site-packages/arviz/stats/diagnostics.py:592: RuntimeWarning: invalid value encountered in scalar divide\n  (between_chain_variance / within_chain_variance + num_samples - 1) / (num_samples)\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:14&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.summary(latent_idata, var_names=['Alpha', 'psi'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nAlpha[Intercept]\n0.108\n0.254\n-0.381\n0.576\n0.008\n0.005\n1136.0\n1413.0\n1.0\n\n\nAlpha[B_Response]\n0.619\n0.299\n0.052\n1.170\n0.009\n0.006\n1166.0\n1411.0\n1.0\n\n\npsi\n0.575\n0.052\n0.476\n0.672\n0.001\n0.001\n2048.0\n2110.0\n1.0\n\n\n\n\n\n\n\nThe parameterization had no effect on the estimates, although it did seem to reduce the effective sample size for each parameter. Now, to generate the posterior of \\(N,\\) I simply sum up the values of \\(z\\) in the posterior. This solves the above issue, effectively left-truncating the posterior at \\(n.\\)\n\n# stack the draws for each chain, creating a (n_draws, n_species) array \nN_samps = az.extract(latent_idata).z.values.sum(axis=0)\n\nN_values, N_counts = np.unique(N_samps, return_counts=True)\n\n# create the plot\nfig, ax = plt.subplots(figsize=(4, 4))\n\nax.bar(N_values, N_counts)\n\n# ax.text(N_values[0], N_counts[0], r'$n$', va='bottom', ha='center')\n\nax.annotate(\n    'Number\\ndetected $n$', \n    ha='left',\n    xy=(N_values[0], N_counts[0]), \n    color='black',\n    xytext=(n+4, 800), \n    arrowprops=dict(arrowstyle=\"-&gt;\", color='black', linewidth=1,\n                    connectionstyle=\"angle3,angleA=90,angleB=0\")\n)\n\nax.set_ylabel('Number of samples')\nax.set_title('Posterior of $N$')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 10: Posterior draws of \\(N\\) and \\(p\\) for both species of salamander.\n\n\n\n\n\n\n\n\n\n\nReferences\n\nBailey, Larissa L, Theodore R Simons, and Kenneth H Pollock. 2004. “Estimating Detection Probability Parameters for Plethodon Salamanders Using the Robust Capture-Recapture Design.” The Journal of Wildlife Management 68 (1): 1–13.\n\n\nHooten, Mevin B, and Trevor Hefley. 2019. Bringing Bayesian Models to Life. CRC Press.\n\n\nOtis, David L, Kenneth P Burnham, Gary C White, and David R Anderson. 1978. “Statistical Inference from Capture Data on Closed Animal Populations.” Wildlife Monographs, no. 62: 3–135.\n\n\nRoyle, J Andrew, and Robert M Dorazio. 2008. Hierarchical Modeling and Inference in Ecology: The Analysis of Data from Populations, Metapopulations and Communities. Elsevier.\n\n\nWilliams, Byron K, James D Nichols, and Michael J Conroy. 2002. Analysis and Management of Animal Populations. Academic press.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Closed capture-recapture"
    ]
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Philip T. Patton",
    "section": "",
    "text": "Ph.D., Marine Biology, Hawaiʻi Institute of Marine Biology, 2025 (anticipated)\nM.S., Fisheries, Wildlife, and Conservation Biology, North Carolina State University, 2016\nB.S., Conservation Biology, SUNY College of Environmental Science and Forestry, 2013"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Philip T. Patton",
    "section": "",
    "text": "Ph.D., Marine Biology, Hawaiʻi Institute of Marine Biology, 2025 (anticipated)\nM.S., Fisheries, Wildlife, and Conservation Biology, North Carolina State University, 2016\nB.S., Conservation Biology, SUNY College of Environmental Science and Forestry, 2013"
  },
  {
    "objectID": "cv.html#research-experience",
    "href": "cv.html#research-experience",
    "title": "Philip T. Patton",
    "section": "Research Experience",
    "text": "Research Experience\n\nNOAA QUEST Fellow, Pacific Islands Fisheries Science Center, NOAA Fisheries, 2021 - Present\nGraduate Research Assistant, Hawaiʻi Institute of Marine Biology, University of Hawaiʻi at Mānoa, 2021 - Present\nGraduate Research Assistant, Quantitative Ecology & Resource Management, University of Washington, 2016 - 2017\nGraduate Research Assistant, Applied Ecology, North Carolina State University, 2014 - 2016"
  },
  {
    "objectID": "cv.html#professional-experience",
    "href": "cv.html#professional-experience",
    "title": "Philip T. Patton",
    "section": "Professional Experience",
    "text": "Professional Experience\n\nData Analyst, Health Services, Deschutes County, 2020 - 2021\nData Analyst, Supply Chain AI & Machine Learning, Starbucks Coffee Company, 2019\nQuantitative Analyst, Seattle City Light, City of Seattle, 2017 - 2019"
  },
  {
    "objectID": "cv.html#grants-awards-and-fellowships",
    "href": "cv.html#grants-awards-and-fellowships",
    "title": "Philip T. Patton",
    "section": "Grants, Awards, and Fellowships",
    "text": "Grants, Awards, and Fellowships\n\nPeter Castro HIMB Graduate Student Support Fund - Travel, Hawaiʻi Institute of Marine Biology, 2023, $500\nLinda and Jim Collister Scholarship, Hawaiʻi Institute of Marine Biology, 2023, $1,000\nQuantitative Ecology and Socioeconomic Training Fellowship (QUEST), NOAA Fisheries, 2021 to present, $180,000\nAchievement Scholarship, University of Hawaiʻi at Mānoa, 2023, $500\nColonel Willys E. & Sandina L. Lord Endowed Scholarship, Hawaiʻi Institute of Marine Biology, 2022, $2,000\nStudent Travel Award, University of Washington, 2017, $500\nStudent and Postdoc Travel Award, University of Washington, 2017, $750\nTravel Award, University of Washington, 2017, $500\nGlobal Change Fellowship, USGS, 2015 to 2016, $12,000"
  },
  {
    "objectID": "cv.html#papers",
    "href": "cv.html#papers",
    "title": "Philip T. Patton",
    "section": "Papers",
    "text": "Papers\n\nPatton, P.T., Pacifici, K., Allen, J.B., Ashe, E., Athayde, A., Baird, R.W., Basran, C., Cabrera, E., Calambokidis, J., Cardoso, J., Carroll, E.L., Cesario, A., Cheeseman, T., Cheney, B.J., Corsi, E., Currie, J., Durban, J.W., Falcone, E.A., Fearnbach, H., Flynn, K., Franklin, T., Franklin, W., Vernazzani, B.G., Genov, T., Hill, M., Johnston, D.R., Keene, E.L., Mahaffy, S.D., McGuire, T.L., McPherson, L., Meyer, C., Michaud, R., Miliou, A., Oleson, E.M., Orbach, D.N., Pearson, H.C., Rasmussen, M.H., Rayment, W.J., Rinaldi, C., Rinaldi, R., Siciliano, S., Stack, S., Tintore, B., Torres, L.G., Towers, J.R., Trotter, C., Moore, R.T., Weir, C.R., Wellard, R., Wells, R., Yano, K.M., Zaeschmar, J.R. & Bejder, L. (TBD) Evaluating trade–offs between automation and bias in population assessments relying on photo-identification. (TBD) Evaluating trade-offs between automation and bias in population assessments relying on photo-identification. In prep\nPatton, P.T. Pacifici, K., Miller, D.A.W., & Collazo, J. (TBD) Partial pooling of data among species improves performance of occupancy models subject to two types of sampling error. In prep\nPatton, P.T. , Cheeseman, T., Abe, K., Yamaguchi, T., Reade, W., Southerland, K., Howard, A., Oleson, E.M., Allen, J.B., Ashe, E., Athayde, A., Baird, R.W., Basran, C., Cabrera, E., Calambokidis, J., Cardoso, J., Carroll, E.L., Cesario, A., Cheney, B.J., Corsi, E., Currie, J., Durban, J.W., Falcone, E.A., Fearnbach, H., Flynn, K., Franklin, T., Franklin, W., Vernazzani, B.G., Genov, T., Hill, M., Johnston, D.R., Keene, E.L., Mahaffy, S.D., McGuire, T.L., McPherson, L., Meyer, C., Michaud, R., Miliou, A., Orbach, D.N., Pearson, H.C., Rasmussen, M.H., Rayment, W.J., Rinaldi, C., Rinaldi, R., Siciliano, S., Stack, S., Tintore, B., Torres, L.G., Towers, J.R., Trotter, C., Moore, R.T., Weir, C.R., Wellard, R., Wells, R., Yano, K.M., Zaeschmar, J.R. & Bejder, L.(2023) A deep learning approach to photo–identification demonstrates high performance on two dozen cetacean species. Methods in Ecology and Evolution, 14, 2611–2625. featured on cover\nVivier, F., Wells, R.S., Hill, M.C., Yano, K.M., Bradford, A.L., Leunissen, E.M., Pacini, A., Booth, C.G., Rocho-Levine, J., Currie J.J., Patton, P.T., & Bejder, L. (2023) Quantifying the age-structure of free-ranging delphinid populations: testing the accuracy of Unoccupied Aerial System-photogrammetry. Ecology and Evolution, 13, e10082.\nPatton, P. T., Pacifici, K., & Collazo, J. A. (2022) Modeling and estimating co-occurrence between the invasive Shiny Cowbird and its Puerto Rican hosts. Biological Invasions, 24, 2951–2960"
  },
  {
    "objectID": "cv.html#presentations",
    "href": "cv.html#presentations",
    "title": "Philip T. Patton",
    "section": "Presentations",
    "text": "Presentations\n\nPatton, P.T. Some hierarchical and machine learning models for wildlife science. Invited talk at University of Natural Resources and Life Sciences, Vienna (BOKU). July 2023.\nPatton, P.T. et al. The effect of fully automated photo–identification on mark-recapture estimates. Paper presented at the EURING Analytical Meeting. Montpellier, France. April 2023\nPatton, P.T. Assessing populations of resident cetaceans. HIMB Scholarship Symposium. K=aneohe, Hawaii. April 2022.\nPatton, P. T. & Gardner, B. Misspecifying movement models in spatial capture recapture studies. Paper presented at The Ecological Society of America Conference. Portland, OR, USA. August 2017\nPatton, P. T. et al. Modeling and estimating co–occurrence between generalist brood parasites and host communities. Paper presented at the EURING Analytical Meeting. Barcelona, Spain. June 2017\nPatton, P. T. et al. Multi–species occupancy models that incorporate false positive and false negative sampling errors. Paper presented at The Wildlife Society Conference. Raleigh, NC, USA. October 2016\nPatton, P. T. et al. Joint host–parasite occurrence models can improve predictions and reveal ecological traps. Paper presented at the International Statistical Ecology Conference. Seattle, WA, USA. July 2016"
  },
  {
    "objectID": "cv.html#teaching-experience",
    "href": "cv.html#teaching-experience",
    "title": "Philip T. Patton",
    "section": "Teaching Experience",
    "text": "Teaching Experience\n\nTeaching Assistant, Principles of Wildlife Science (FW 453), North Carolina State, Spring 2016\nTeaching Assistant, Introduction to Probability and Statistics (APM 391), SUNY ESF, Fall 2012\nTutor, Calculus I (APM 105), Academic Support Services, SUNY ESF, 2011 to 2013"
  },
  {
    "objectID": "cv.html#professional-development",
    "href": "cv.html#professional-development",
    "title": "Philip T. Patton",
    "section": "Professional Development",
    "text": "Professional Development\n\nAn Introduction to Close-Kin Mark-Recapture, EURING Analytical Meeting\nC++ Virtual Training, NOAA Fisheries\nBayesian Model Selection and Decision Theory for Ecologists, International Statistical Ecology Conference\nFlexible Programming with NIMBLE, International Statistical Ecology Conference\nIntroduction to Structured Decision Making, National Conservation Training Center"
  },
  {
    "objectID": "cv.html#professional-service",
    "href": "cv.html#professional-service",
    "title": "Philip T. Patton",
    "section": "Professional Service",
    "text": "Professional Service\n\nReferee: Wildlife Society Bulletin, Marine Mammal Science\nMember: British Ecological Society, The Wildlife Society (biometrics working group), The Ecological Society of America (statistical ecology section)\nRepresentative to the Faculty, Marine Biology Graduate Program, University of Hawai`i at Mānoa\nRepresentative to the Graduate Student Organization, Marine Biology Graduate Program, University of Hawai`i at Mānoa"
  },
  {
    "objectID": "scr.html",
    "href": "scr.html",
    "title": "Spatial capture-recapture",
    "section": "",
    "text": "In this notebook, I present an approach to fitting spatial capture-recapture (SCR) models in PyMC. SCR expands upon traditional capture-recapture by incorporating the location of the traps in the analysis. This matters because, typically, animals that live near a particular trap are more likely to be caught in it. In doing so, SCR links individual-level processes to the population-level, expanding the scientific scope of simple designs.\nIn this notebook, I train the simplest possible SCR model, SCR0 (Royle et al. 2013, chap. 5), where the goal is estimating the true population size \\(N\\). Similar to the other closed population notebooks, I do so using parameter-expanded data-augmentation (PX-DA). I also borrow the concept of the detection function from the distance sampling notebook.\nAs a motivating example, I use the ovenbird mist netting dataset provided by Murray Efford via the secr package in R. The design of the study is outlined in Efford, Dawson, and Robbins (2004) and Borchers and Efford (2008). In this dataset, ovenbirds were trapped in 44 mist nets over 8 to 10 consecutive days during the summers of 2005 to 2009.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pytensor.tensor as pt \nimport pymc as pm\nimport arviz as az\nfrom pymc.distributions.dist_math import binomln, logpow\n\n# hyper parameters\nSEED = 42\nRNG = np.random.default_rng(SEED)\nBUFFER = 100\nM = 200\n\n# plotting defaults\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\n\ndef invlogit(x):\n    '''Inverse logit function'''\n    return 1 / (1 + np.exp(-x))\n\ndef euclid_dist(X, S, library='np'):\n    '''Pairwise euclidian distance between points in (M, 2) and (N, 2) arrays'''\n    diff = X[np.newaxis, :, :] - S[:, np.newaxis, :]\n    \n    if library == 'np':\n        return np.sqrt(np.sum(diff ** 2, axis=-1))\n        \n    elif library == 'pm': \n        return pm.math.sqrt(pm.math.sum(diff ** 2, axis=-1))\n\ndef half_normal(d, s, library='np'):\n    '''Half normal detection function.'''\n    if library == 'np':\n        return np.exp( - (d ** 2) / (2 * s ** 2))\n        \n    elif library == 'pm':\n        return pm.math.exp( - (d ** 2) / (2 * s ** 2))\n\ndef exponential(d, s, library='np'):\n    '''Negative exponential detection function.'''    \n    if library == 'np':\n        return np.exp(- d / s)\n        \n    elif library == 'pm':\n        return pm.math.exp(- d / s)\n\n# coordinates for each trap \novenbird_trap = pd.read_csv('ovenbirdtrap.txt', delimiter=' ')\ntrap_count, _ = ovenbird_trap.shape\n\n# information about each trap \ntrap_x = ovenbird_trap.x\ntrap_y = ovenbird_trap.y\nX = ovenbird_trap[['x', 'y']].to_numpy()\n\n# define the state space around the traps\nx_max = trap_x.max() + BUFFER\ny_max = trap_y.max() + BUFFER\nx_min = trap_x.min() - BUFFER\ny_min = trap_y.min() - BUFFER\n\n# plot the trap locations\nfig, ax = plt.subplots(figsize=(4, 4))\n\n# plot the traps\nax.scatter(trap_x, trap_y, marker='x', s=40, linewidth=1.5, color='C1')\nax.set_ylim((y_min, y_max))\nax.set_xlim((x_min, x_max))\n\nax.annotate(\n    '44 nets\\n30m apart', ha='center',\n    xy=(55, -150), xycoords='data', color='black',\n    xytext=(40, 30), textcoords='offset points',\n    arrowprops=dict(arrowstyle=\"-&gt;\", color='black', linewidth=1,\n                    connectionstyle=\"angle3,angleA=90,angleB=0\"))\n\n# aesthetics \nax.set_title('Mist net locations')\nax.grid(False)\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Locations of the mist nets in the ovenbird dataset (Efford, Dawson, and Robbins 2004)\nOne difference between spatial and traditional (non-spatial) capture is the addition of the trap identifier in the capture history. Whereas a traditional capture history is [individual, occasion], a spatial capture history might be [individual, occasion, trap].\nIn the ovenbird example, I ignore the year dimension, pooling parameters across years, which allows for better estimation of the detection parameters. My hack for doing so is treating every band/year combination as a unique individual in a combined year capture history. This is easy to implement, creates an awkward interpretation of \\(N\\) (see below).\n# ovenbird capture history\noven_ch = pd.read_csv('ovenbirdcapt.txt', delimiter=' ')\n\n# create a unique bird/year identifier for each individual\noven_ch['ID'] = oven_ch.groupby(['Year','Band']).ngroup()\noccasion_count = oven_ch.Day.max()\n\n# merge the datasets, making sure that traps with no detections are included \novenbird = (\n    ovenbird_trap.merge(oven_ch[['ID', 'Net', 'Day']], how='left')\n      [['ID', 'Day', 'Net', 'x', 'y']]\n      .sort_values('ID')\n      .reset_index(drop=True)\n)\n\novenbird.head(10)\n\n\n\n\n\n\n\n\nID\nDay\nNet\nx\ny\n\n\n\n\n0\n0.0\n1.0\n2\n-50.0\n-255.0\n\n\n1\n1.0\n9.0\n20\n-50.0\n285.0\n\n\n2\n1.0\n1.0\n15\n-50.0\n135.0\n\n\n3\n2.0\n6.0\n17\n-50.0\n195.0\n\n\n4\n2.0\n9.0\n27\n49.0\n165.0\n\n\n5\n2.0\n1.0\n15\n-50.0\n135.0\n\n\n6\n2.0\n1.0\n14\n-50.0\n105.0\n\n\n7\n3.0\n1.0\n41\n49.0\n-255.0\n\n\n8\n3.0\n3.0\n39\n49.0\n-195.0\n\n\n9\n3.0\n1.0\n42\n49.0\n-285.0",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Spatial capture-recapture"
    ]
  },
  {
    "objectID": "scr.html#simulation",
    "href": "scr.html#simulation",
    "title": "Spatial capture-recapture",
    "section": "Simulation",
    "text": "Simulation\nBefore estimating the parameters, I perform a small simulation. The simulation starts with a core idea of SCR: the activity center. The activity center \\(\\mathbf{s}_i\\) is the most likely place that you’d find an individual \\(i\\) over the course of the trapping study. In this case, I assume that activity centers are uniformly distributed across the sample space. (The study takes place in homogenous habitat.)\nI compute the probability of detection for individual \\(i\\) at trap \\(j\\) as \\(p_{i,j}=g_0 \\exp(-d_{i,j}^2/2\\sigma^2),\\) where \\(g_0\\) is the probability of detecting an individual when it’s activity center is at the trap, \\(d_{i,j}\\) is the euclidean distance between the trap and the activity center, and \\(\\sigma\\) is the detection range parameter.\n\n# true population size\nN = 150\n\n# simulate activity centers\nsx_true = RNG.uniform(x_min, x_max, N)\nsy_true = RNG.uniform(y_min, y_max, N)\nS_true = np.column_stack((sx_true, sy_true))\n\n# true distance between the trap and the activity centers\nd_true = euclid_dist(X, S_true)\n\n# detection parameters\ng0_true = 0.025     \nsigma_true = 73     \n\n# simulate the number of captures at each trap for each individual\ncapture_probability = g0_true * half_normal(d_true, sigma_true)\nsim_Y = RNG.binomial(occasion_count, capture_probability)\n\n# filter out undetected individuals\nwas_detected = sim_Y.sum(axis=1) &gt; 0\nsim_Y_det = sim_Y[was_detected]\nn_detected = int(was_detected.sum())\n\nFollowing Royle et al. (2013), Chapter 5, I first fit the version of the model where we assume that we know the true population size. In this case, I’m only estimating the detection parameters and the activity center locations.\n\n# upper bound for the uniform prior on sigma\nU_SIGMA = 150\n\nwith pm.Model() as known:\n\n    # priors for the activity centers\n    sx = pm.Uniform('sx', x_min, x_max, shape=n_detected)\n    sy = pm.Uniform('sy', y_min, y_max, shape=n_detected)\n    S = pt.stack([sx, sy], axis=1)\n\n    # priors for the detection parameters\n    g0 = pm.Uniform('g0', 0, 1)\n    sigma = pm.Uniform('sigma', 0, U_SIGMA)\n    \n    # probability of capture for each individual at each trap\n    distance = euclid_dist(X, S, 'pm')\n    p = pm.Deterministic('p', g0 * half_normal(distance, sigma))\n\n    # likelihood\n    pm.Binomial(\n        'y',\n        p=p,\n        n=occasion_count,\n        observed=sim_Y_det\n    )\n\npm.model_to_graphviz(known)\n\n\n\n\n\n\n\nFigure 2: Visual representation of the model where \\(N\\) is known.\n\n\n\n\n\n\nwith known:\n    known_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [sx, sy, g0, sigma]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 26 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:26&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.summary(known_idata, var_names=['g0', 'sigma'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\ng0\n0.034\n0.004\n0.027\n0.041\n0.000\n0.000\n1569.0\n2463.0\n1.0\n\n\nsigma\n78.921\n5.192\n69.610\n88.912\n0.174\n0.123\n901.0\n1630.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_trace(\n    known_idata, \n    var_names=['g0', 'sigma'],\n    figsize=(8,4),\n    lines=[(\"g0\", {}, [g0_true]), (\"sigma\", {}, [sigma_true])] \n);\n\n\n\n\n\n\n\nFigure 3: Trace plots for model where \\(N\\) is known. The true parameter values are shown by vertical and horizontal lines.\n\n\n\n\n\nThe trace plots show reasonable agreement between the true parameter values and the estimated values, although \\(g_0\\) appears to be overestimated.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Spatial capture-recapture"
    ]
  },
  {
    "objectID": "scr.html#ovenbird-density",
    "href": "scr.html#ovenbird-density",
    "title": "Spatial capture-recapture",
    "section": "Ovenbird density",
    "text": "Ovenbird density\nNow, I estimate the density \\(D\\) for the ovenbird population. Like distance sampling, SCR can robustly estimate the density of the population, regardless of the size of the state space. The difference between the model above and this one is that we use PX-DA to estimate the inclusion probability \\(\\psi,\\) and subsequently \\(N.\\) First, I convert the DataFrame to a (n_detected, n_traps) array of binomial counts.\n\ndef get_Y(ch):\n    '''Get a (individual_count, trap_count) array of detections.'''\n\n    # count the number of detections per individual per trap\n    detection_counts = pd.crosstab(ch.ID, ch.Net, dropna=False)\n\n    # remove the ghost nan individual \n    detection_counts = detection_counts.loc[~detection_counts.index.isna()]\n    \n    Y = detection_counts.to_numpy()\n    return Y\n\nY = get_Y(ovenbird)\ndetected_count, trap_count = Y.shape\n\n# augmented spatial capture histories with all zero histories\nall_zero_history = np.zeros((M - detected_count, trap_count))\nY_augmented = np.row_stack((Y, all_zero_history))\n\nSimilar to the occupancy notebook, I use a custom distribution to model the zero-inflated data. This is necessary because the zero inflation happens at the individual (row) level. This is, in fact, the same distribution as the occupancy model, although including the binomial coefficient.\n\ndef logp(value, n, p, psi):\n    \n    binom = binomln(n, value) + logpow(p, value) + logpow(1 - p, n - value)\n    bin_sum = pm.math.sum(binom, axis=1)\n    bin_exp = pm.math.exp(bin_sum)\n\n    res = pm.math.switch(\n        value.sum(axis=1) &gt; 0,\n        bin_exp * psi,\n        bin_exp * psi + (1 - psi)\n    )\n    \n    return pm.math.log(res)\n\nwith pm.Model() as oven:\n\n    # Priors\n    # activity centers\n    sx = pm.Uniform('sx', x_min, x_max, shape=M)\n    sy = pm.Uniform('sy', y_min, y_max, shape=M)\n    S = pt.stack([sx, sy], axis=1)\n\n    # capture parameters\n    g0 = pm.Uniform('g0', 0, 1, initval=0.05)\n    sigma = pm.Uniform('sigma', 0, U_SIGMA)\n\n    # inclusion probability \n    psi = pm.Uniform('psi', 0, 1)\n\n    # compute the capture probability \n    distance = euclid_dist(X, S, 'pm')\n    p = pm.Deterministic('p', g0 * half_normal(distance, sigma))\n\n    # likelihood \n    pm.CustomDist(\n        'y',\n        occasion_count,\n        p,\n        psi,\n        logp=logp,\n        observed=Y_augmented\n    )\n\npm.model_to_graphviz(oven)\n\n\n\n\n\n\n\nFigure 4: Visual representation of the ovenbird model using data augmentation.\n\n\n\n\n\n\nwith oven:\n    oven_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [sx, sy, g0, sigma, psi]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 51 seconds.\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:50&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\naz.summary(oven_idata, var_names=['g0', 'sigma', 'psi'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\ng0\n0.029\n0.004\n0.022\n0.036\n0.000\n0.000\n1853.0\n2746.0\n1.00\n\n\nsigma\n70.914\n4.440\n62.515\n79.060\n0.152\n0.107\n870.0\n1885.0\n1.01\n\n\npsi\n0.705\n0.055\n0.598\n0.803\n0.001\n0.001\n3982.0\n2956.0\n1.00\n\n\n\n\n\n\n\n\ng0_mle = [0.025]\nsigma_mle = [73]\n\naz.plot_trace(\n    oven_idata, \n    var_names=['g0', 'sigma'],\n    figsize=(8,4),\n    lines=[(\"g0\", {}, [g0_mle]), (\"sigma\", {}, [sigma_mle])] \n);\n\n\n\n\n\n\n\nFigure 5: Trace plots for the ovenbird model using data augmentation. Maximum likelihood estimates are shown by vertical and horizontal lines.\n\n\n\n\n\nThe estimates are quite close to the maximum likelihood estimates, which I estimated using the secr package in R.\nFinally, I estimate density \\(D\\) using the results. As in the closed capture-recapture and distance sampling notebooks, I use the posterior samples of \\(\\psi\\) and \\(M\\) to sample the posterior of \\(N.\\) This \\(N,\\) however, has an awkward interpretation because I pooled across the years by combining all the detection histories. To get around this, I compute the average annual abundance by dividing by the total number of years in the sample. Then, I divide by the area of the state space.\n\npsi_samps = oven_idata.posterior.psi.values.flatten()\nN_samps = RNG.binomial(M, psi_samps)\n\n# kludgy way of calculating abundance \nyear_count = 5\naverage_annual_abundance = N_samps // year_count\n\n# area of the state space in terms of hectares \nha = 100 * 100\nmask_area = (x_max - x_min) * (y_max - y_min) / ha\n\n# density \nD_samples = average_annual_abundance / mask_area \nD_mle = 1.262946\n\nfig, ax = plt.subplots(figsize=(4,4))\nax.hist(D_samples, edgecolor='white', bins=10)\nax.axvline(D_mle, linestyle='--',color='C1')\nax.set_xlabel('Ovenbirds per hectare')\nax.set_ylabel('Number of samples')\nax.text(1.5, 1000, f'$\\hat{{D}}$={D_samples.mean():.2f}', va='center', ha='center')\nplt.show()\n\n\n\n\n\n\n\nFigure 6: Posterior distribution of the density \\(D\\) of ovenbirds. The maximum likelihood estimate is shown by the dotted red line.\n\n\n\n\n\nI also plot the estimated activity centers for every detected individual, as well as the posterior distribution for two of the detected individuals.\n\nsx_samps = az.extract(oven_idata).sx\nsy_samps = az.extract(oven_idata).sy\n\nsx_mean = sx_samps[:detected_count].mean(axis=1)\nsy_mean = sy_samps[:detected_count].mean(axis=1)\n\none = 49\nsx1 = sx_samps[one]\nsy1 = sy_samps[one]\n\ntwo = 2\nsx2 = sx_samps[two]\nsy2 = sy_samps[two]\n\n# plot the trap locations\nfig, (ax0, ax1) = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(5, 10),\n                               tight_layout=True)\n\n# plot the traps\nax0.scatter(trap_x, trap_y, marker='x', s=40, linewidth=1.5, color='C1')\nax0.set_ylim((y_min, y_max))\nax0.set_xlim((x_min, x_max))\n\n# plot the mean activity centers\nax0.scatter(sx_mean, sy_mean, marker='o', s=4, color='black')\n\n# aesthetics \nax0.set_title('Estimated activity centers')\nax0.grid(False)\n\n# plot the traps\nax1.scatter(trap_x, trap_y, marker='x', s=40, linewidth=1.5, color='C1')\nax1.set_ylim((y_min, y_max))\nax1.set_xlim((x_min, x_max))\n\n# plot the distributions of the activity centers\nax1.scatter(sx1, sy1, marker='o', s=1, color='gray', alpha=0.2)\nax1.scatter(sx2, sy2, marker='o', s=1, color='gray', alpha=0.2)\n\n# plot the mean\nax1.scatter(sx1.mean(), sy1.mean(), marker='o', s=20, color='black')\nax1.scatter(sx2.mean(), sy2.mean(), marker='o', s=20, color='black')\n\n# add the label\nax1.text(sx1.mean(), sy1.mean() + 5, f'{one}', ha='center', va='bottom')\nax1.text(sx2.mean(), sy2.mean() + 5, f'{two}', ha='center', va='bottom')\n\n# aesthetics \nax1.set_title('Posterior of two activity centers')\nax1.grid(False)\nplt.show()\n\n\n\n\n\n\n\nFigure 7: Estimated activity centers for the detected individuals, and posterior distributions for two of them.\n\n\n\n\n\nFinally, I plot the posterior distribution of the detection function.\n\nxx = np.arange(BUFFER * 2)\n\nsigma_samps = az.extract(oven_idata).sigma.values.flatten()\ng0_samps = az.extract(oven_idata).g0.values.flatten()\n\np_samps = np.array(\n    [g * half_normal(xx, s) for g, s in zip(g0_samps, sigma_samps)]\n)\n\np_mean = p_samps.mean(axis=0)\np_low = np.quantile(p_samps, 0.02, axis=0)\np_high = np.quantile(p_samps, 0.98, axis=0)\n\nfig, ax = plt.subplots(figsize=(5,4))\n\nax.plot(xx, p_mean, '-')\nax.fill_between(xx, p_low, p_high, alpha=0.2)\n\nax.set_title('Detection function')\nax.set_ylabel(r'$p$')\nax.set_xlabel(r'Distance (m)')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 8: Posterior distribution for the detection function. The line represents the posterior mean while the shaded area is the 96% interval.",
    "crumbs": [
      "Notebooks",
      "PyMC",
      "Spatial capture-recapture"
    ]
  }
]