[
  {
    "objectID": "occupancy.html",
    "href": "occupancy.html",
    "title": "Occupancy models",
    "section": "",
    "text": "In this notebook, I demonstrate how to fit static site-occupancy models in PyMC (Royle and Dorazio 2008, chap. 3). The standard site-occupancy model models binary detection/non-detection data \\(y_{j,k}\\) for repeated surveys \\(k=1,2,\\dots,K\\) at sites \\(j=1,2,\\dots,J.\\) The species is present at the sites when \\(z_j=1,\\) and absent otherwise. We assume that our probability of detecting the species given that the site is occupied is \\(P(y_{j,k}|z_j=1)=p,\\) and zero when the site is unoccupied. The probability of occurrence, which is typically the parameter of interest, is \\(P(z_{j}=1)=\\psi.\\) As such, we can think of this as a zero-inflated binomial model, where \\[\n\\begin{align}\n&y_j \\sim\n\\begin{cases}\n    0,   & \\text{if } z_j = 0 \\\\\n    \\text{Binomial}(K, p),   & \\text{if } z_j = 1\n\\end{cases} \\\\\n&z_j \\sim \\text{Bernoulli}(\\psi)\n\\end{align},\n\\] which assumes a constant occurrence probability across sites and a constant detection probability. I start with this simple model, then add site- and visit-level covariates later.",
    "crumbs": [
      "Code",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occupancy.html#estimating-parameters-with-pymc",
    "href": "occupancy.html#estimating-parameters-with-pymc",
    "title": "Occupancy models",
    "section": "Estimating parameters with PyMC",
    "text": "Estimating parameters with PyMC\nNext, I use PyMC to train the occupancy model with the simulated data. First, similar to JAGS and Stan, the model must be specified using the PyMC syntax. This is done using a context manager in Python, essentially, a with statement. This creates a Model object.\n\nwith pm.Model() as constant:\n\n    # priors for the detetion and occurrence probabilities\\\n    psi = pm.Uniform('psi', 0, 1)\n    p = pm.Uniform('p', 0, 1)\n\n    # likelihood for the summarized data\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=visit_count,\n                            observed=y_summarized)\n\nIn JAGS, the prior for \\(p\\) would be specified as p ~ dunif(0, 1). The PyMC equivalent is p = pm.Uniform('p', 0, 1). This could, alternatively, be specified as p = pm.Uniform('detection probability', 0, 1). For the likelihood, I use PyMC’s built-in ZeroInflatedBinomial distribution. We tell PyMC that this is an observed random variable by supplying data to the observed argument. PyMC also has handy tools for visualizing the model.\n\npm.model_to_graphviz(constant)\n\n\n\n\n\n\n\nFigure 1: Visual representation of model \\(p(\\cdot)\\psi(\\cdot).\\) MarginalMixture refers to the zero-inflated binomial distribution.\n\n\n\n\n\nNow I can sample from the posterior. Again, I use the context manager, this time referring to the model by name. It’s typical to name the output with idata because, by default, PyMC returns an object of class InferenceData from the Arviz package. Arviz is similar to the coda package for R.\n\nwith constant:\n    constant_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, p]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\nPyMC will try to use the No-U-Turn Sampler (NUTS) whenever possible. As you can see, it samples the posterior quickly. I can plot the output using the az.plot_trace(), supplying the true values for \\(p\\) and \\(\\psi\\) for comparison. I can also look at a tabular summary using az.summary().\n\naz.plot_trace(\n    constant_idata,\n    compact=True,\n    figsize=(8,4),\n    lines=[(\"psi\", {}, [psi_true]), (\"p\", {}, [p_true])]\n);\n\n\n\n\n\n\n\nFigure 2: Traceplots for the \\(p(\\cdot)\\psi(\\cdot)\\) model. The true parameter values are shown by vertical and horizontal lines.\n\n\n\n\n\n\naz.summary(constant_idata)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.800\n0.044\n0.719\n0.881\n0.001\n0.001\n1927.0\n2302.0\n1.0\n\n\np\n0.499\n0.030\n0.441\n0.554\n0.001\n0.001\n1940.0\n2336.0\n1.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occupancy.html#adding-site-covariates",
    "href": "occupancy.html#adding-site-covariates",
    "title": "Occupancy models",
    "section": "Adding site covariates",
    "text": "Adding site covariates\nNext, I add in some realism by simulating a site-level covariate \\(x\\) that affects the occurrence probability. I model this effect with a logit-linear model, i.e., \\(\\psi_j=\\text{logit}^{-1}(\\beta_0 + \\beta_1 x_j).\\)\n\n## ecological model\n\n# true parameter values\nbeta0_true = -1\nbeta1_true = 3\n\n# covariates\nx = scale(rng.uniform(size=site_count))\n\n# linear model\nmu_true = beta0_true + beta1_true * x\npsi_true = invlogit(mu_true)\n\n# simulate occurrence state\nz_true = rng.binomial(1, psi_true)\n\n## detection model\n\n# true parameter values\np_true = 0.75\n\n# simulate detection\ny = sim_y(p_true, z_true, site_count, visit_count)\n\n# vector with the number of detections at each site\ny_summarized = y.sum(axis=1)\n\n# detection data at the first five sites\ny[:5]\n\narray([[0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0]])\n\n\nAgain, I specify the model with PyMC. Like JAGS, the random variables can be manipulated, as in a linear model with \\(x_j.\\) These behave like NumPy arrays, meaning that vectorized operations and broadcasting are available. To monitor the output of these manipulations, use the pm.Deterministic class. In this case, I am monitoring the site level occurrence probability \\(\\psi_j.\\)\n\nwith pm.Model() as psix:\n\n    # occurrence process\n    # priors\n    beta0 = pm.Normal(\"beta0\", mu=0, sigma=2)\n    beta1 = pm.Normal(\"beta1\", mu=0, sigma=2)\n\n    # linear model\n    mu = beta0 + beta1 * x\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(mu))\n\n    # detection process\n    # prior\n    p = pm.Uniform('p', 0, 1)\n\n    # likelihood for the summarized data\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=visit_count,\n                            observed=y_summarized)\n\npm.model_to_graphviz(psix)\n\n\n\n\n\n\n\nFigure 3: Visual representation of model \\(p(\\cdot)\\psi(x).\\) MarginalMixture refers to the zero-inflated binomial distribution.\n\n\n\n\n\n\nwith psix:\n    psix_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [beta0, beta1, p]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\n\naz.plot_trace(\n    psix_idata,\n    figsize=(8,6),\n    var_names=['beta0', 'beta1', 'p'],\n    lines=[(\"beta0\", {}, [beta0_true]), (\"beta1\", {}, [beta1_true]),\n           ('p', {}, [p_true])]\n);\n\n\n\n\nTraceplots for the \\(p(\\cdot)\\psi(x)\\) model. The true parameter values are shown by vertical and horizontal lines\n\n\n\n\n\naz.summary(psix_idata, var_names=['beta0', 'beta1', 'p'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nbeta0\n-1.244\n0.271\n-1.755\n-0.744\n0.005\n0.004\n2895.0\n2258.0\n1.0\n\n\nbeta1\n2.859\n0.407\n2.148\n3.618\n0.007\n0.006\n3040.0\n2966.0\n1.0\n\n\np\n0.744\n0.032\n0.687\n0.805\n0.001\n0.000\n3735.0\n2854.0\n1.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occupancy.html#adding-visit-covariates",
    "href": "occupancy.html#adding-visit-covariates",
    "title": "Occupancy models",
    "section": "Adding visit covariates",
    "text": "Adding visit covariates\nFinally, I add in visit-level covariate \\(w_{j,k}\\) that affects detection.\n\n## ecological model\n\n# true parameter values\nbeta0_true = -1\nbeta1_true = 3\n\n# covariates\nx = scale(rng.uniform(size=site_count))\n\n# linear model\nmu_true = beta0_true + beta1_true * x\npsi_true = invlogit(mu_true)\n\n# simulate occurrence state\nz_true = rng.binomial(1, psi_true)\n\n# true parameter values\nalpha0_true = 1\nalpha1_true = -3\n\n# covariates\nw = rng.uniform(size=site_count * visit_count).reshape(site_count, visit_count)\nw = scale(w)\n\n# linear model\nnu_true = alpha0_true + alpha1_true * w\np_true = invlogit(nu_true)\n\n# simulate detection\ny = sim_y(p_true, z_true, site_count, visit_count)\n\nprint(y.shape)\ny[:5]\n\n(200, 3)\n\n\narray([[0, 0, 0],\n       [0, 0, 0],\n       [0, 1, 1],\n       [1, 1, 0],\n       [0, 0, 0]])\n\n\nNow that we have visit covariates, we can no longer rely on the pm.ZeroInflatedBinomial class for our likelihood because it assumes that all zeros might be come from either process (i.e., not there or not detected). In an occupancy model, however, this is only true at sites where the species was never detected, and we have no way of compelling pm.ZeroInflatedBinomial to only consider zero inflation at certain sites.\nAs such, we will now code the model in terms of the discrete, latent \\(z_i\\) state, where \\(z_i=1\\) if site \\(i\\) is occupied and \\(z_i=0\\) otherwise. This is the canonical way to code occupancy models in WinBUGS, JAGS, and NIMBLE (Royle and Dorazio 2008; Kéry and Schaub 2011). The NUTS sampler, however, does not jive with discrete latent states. As such, PyMC will assign a binary Gibbs sampler to z by default, which works, albeit less efficiently than the NUTS sampler. That said, PyMC will assign the other continuous parameters to the NUTS sampler, which is good!\n\nwith pm.Model() as binary_gibbs:\n\n    # occurrence process\n    # priors\n    beta0 = pm.Normal(\"beta0\", mu=0, sigma=2)\n    beta1 = pm.Normal(\"beta1\", mu=0, sigma=2)\n\n    # linear model\n    mu = beta0 + beta1 * x\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(mu))\n\n    # detection process\n    # priors\n    alpha0 = pm.Normal('alpha0', mu=0, sigma=2)\n    alpha1 = pm.Normal('alpha1', mu=0, sigma=2)\n\n    # linear model\n    nu = alpha0 + alpha1 * w\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # occupied / unoccupied state at each site\n    z = pm.Bernoulli(\"z\", psi)\n\n    # [:, None] allows us to multiply a vector across every column of a matrix\n    mu_y = z[:, None] * p\n\n    # the likelihood is now bernoulli conditional on the z state\n    pm.Bernoulli(\"y\", mu_y, observed=y)\n\npm.model_to_graphviz(binary_gibbs)\n\n\n\n\n\n\n\nFigure 4: Visual representation of the \\(p(w)\\psi(w)\\) model.\n\n\n\n\n\nThe mu_y = z[:, None] * p notation may look strange to an R user. This is a trick that’s related to NumPy’s broadcasting rules. Broadcasting allows us to multiply arrays with different dimensions. In this case, we have a vector z that we would like to multiply against a matrix p, such that the first value in z is multiplied against every value in the first row of p, and so on. R does this naturally since it has slightly different broadcasting rules than NumPy. To do this in NumPy, we need to make z a column vector by adding a dummy dimension, hence the [:, None].\n\nwith binary_gibbs:\n    binary_gibbs_idata = pm.sample()\naz.summary(binary_gibbs_idata, var_names=['beta0', 'beta1', 'alpha0', 'alpha1'])\n\nMultiprocess sampling (4 chains in 4 jobs)\nCompoundStep\n&gt;NUTS: [beta0, beta1, alpha0, alpha1]\n&gt;BinaryGibbsMetropolis: [z]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 13 seconds.\n/Users/philtpatton/miniforge3/envs/pymc_env/lib/python3.13/site-packages/arviz/stats/diagnostics.py:596: RuntimeWarning: invalid value encountered in scalar divide\n  (between_chain_variance / within_chain_variance + num_samples - 1) / (num_samples)\n\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nbeta0\n-0.744\n0.248\n-1.232\n-0.307\n0.005\n0.004\n2458.0\n2342.0\n1.0\n\n\nbeta1\n2.788\n0.390\n2.113\n3.580\n0.008\n0.006\n2495.0\n2504.0\n1.0\n\n\nalpha0\n1.402\n0.275\n0.893\n1.916\n0.006\n0.004\n2279.0\n2491.0\n1.0\n\n\nalpha1\n-3.084\n0.388\n-3.779\n-2.330\n0.008\n0.007\n2493.0\n2094.0\n1.0\n\n\n\n\n\n\n\nWe see that the model recovers the simulated parameters. Nevertheless, it did take 13 seconds to do so on my machine. While this is fairly quick, we can do better.",
    "crumbs": [
      "Code",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "occupancy.html#model-comparison",
    "href": "occupancy.html#model-comparison",
    "title": "Occupancy models",
    "section": "Model comparison",
    "text": "Model comparison\nPyMC also has handy tools for model comparison. I demonstrate these by fitting a model to the warbler data with a constant probability of detection.\n\nY_sum = Y.sum(axis=1)\n\nwith pm.Model(coords=coords) as warbler_constantp:\n\n    # occurrence process priors\n    Beta = pm.Normal(\"Beta\", mu=0, sigma=2, dims=\"beta_coefs\")\n\n    # linear model\n    mu = pm.math.dot(X, Beta)\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(mu))\n\n    # detection process priors\n    p = pm.Uniform('p', 0, 1)\n\n    # likelihood\n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=J, observed=Y_sum)\n\npm.model_to_graphviz(warbler_constantp)\n\n\n\n\n\n\n\nFigure 9: Visual representaion of the warbler occupancy model with constant \\(p.\\)\n\n\n\n\n\n\nwith warbler_constantp:\n    warbler_constantp_idata = pm.sample(4000)\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [Beta, p]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 4_000 draw iterations (4_000 + 16_000 draws total) took 2 seconds.\n\n\nNext, I caclculate the leave-one-out (loo) cross-validation score for each model (Vehtari, Gelman, and Gabry 2017). This involves first computing the log likelihood for each model.\n\nwith warbler:\n    pm.compute_log_likelihood(warbler_idata)\n\n\n\n\n\n\n\n\nwarbler_loo = az.loo(warbler_idata)\n\nwarbler_loo\n\nComputed from 16000 posterior samples and 37 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo   -54.33     7.36\np_loo        6.12        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)       37  100.0%\n   (0.70, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\n\nwith warbler_constantp:\n    pm.compute_log_likelihood(warbler_constantp_idata)\n\n\n\n\n\n\n\n\nwarbler_constantp_loo = az.loo(warbler_constantp_idata)\n\nwarbler_constantp_loo\n\nComputed from 16000 posterior samples and 37 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo   -39.32     5.11\np_loo        3.78        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)       37  100.0%\n   (0.70, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\nArviz has handy tools for comparing the results. First, I generate a tabular summary.\n\ndf_comp_loo = az.compare({r\"$p(visit,wheight)$\": warbler_idata,\n                          r\"$p(\\cdot)$\": warbler_constantp_idata})\ndf_comp_loo\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\n$p(\\cdot)$\n0\n-39.315005\n3.778823\n0.000000\n1.0\n5.113883\n0.000000\nFalse\nlog\n\n\n$p(visit,wheight)$\n1\n-54.326960\n6.117549\n15.011955\n0.0\n7.355052\n4.189759\nFalse\nlog\n\n\n\n\n\n\n\nThis indicates that the \\(p(\\cdot)\\) model is favored over the \\(p(visit,wheight)\\) model.\nArviz also generates plots for these comparisons.\n\naz.plot_compare(df_comp_loo, insample_dev=False);\n\n\n\n\n\n\n\nFigure 10: Comparison between the \\(p(visit,wheight)\\) and the \\(p(\\cdot)\\) models in terms of loo.\n\n\n\n\n\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w\n\nLast updated: Tue Oct 14 2025\n\nPython implementation: CPython\nPython version       : 3.13.2\nIPython version      : 9.0.2\n\npymc      : 5.22.0\npytensor  : 2.30.2\narviz     : 0.21.0\nnumpy     : 2.1.3\npandas    : 2.2.3\nmatplotlib: 3.10.1\n\nWatermark: 2.5.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "msom.html",
    "href": "msom.html",
    "title": "Community occupancy",
    "section": "",
    "text": "In this notebook, I explore fitting community occupancy models in PyMC. Community occupancy models are a multi-species extension of standard occupancy models. The benefit of these models is that, by treating each species as a random effect, they can estimate occupancy and detection more precisely than single species models. Further, through data augmentation, they can estimate the richness of the supercommunity, that is, the total number of species that use the study area during the surveys.",
    "crumbs": [
      "Code",
      "PyMC",
      "Community occupancy"
    ]
  },
  {
    "objectID": "msom.html#known-n",
    "href": "msom.html#known-n",
    "title": "Community occupancy",
    "section": "Known \\(N\\)",
    "text": "Known \\(N\\)\nFirst, I fit the the known \\(N\\) version of the model. The goal of this version is to estimate occurrence and detection for each species, without estimating species richness.\nThis notebook makes extensive use of the coords feature in PyMC. Coords makes it easier to incorporate the species-level effects via the multivariate normal. I use a \\(\\text{Normal}(0, 2)\\) prior for both \\(\\mu\\) parameters, and a LKJ Cholesky covariance prior for \\(\\mathbf{\\Sigma}.\\)\nThroughout the notebook, I use the nutpie sampler within PyMC. Nutpie is a NUTS sampler written in Rust, and is often faster than PyMC.\n\ncoords = {'process': ['detection', 'occurrence'], \n          'process_bis': ['detection', 'occurrence'],\n          'species': lookup}\n\nwith pm.Model(coords=coords) as known:\n\n    # priors for community-level means for detection and occurrence\n    mu = pm.Normal('mu', 0, 2, dims='process')\n\n    # prior for covariance matrix for occurrence and detection\n    chol, corr, stds = pm.LKJCholeskyCov(\n        \"chol\", n=2, eta=2.0, sd_dist=pm.Exponential.dist(1.0, shape=2)\n    )\n    cov = pm.Deterministic(\"cov\", chol.dot(chol.T), dims=(\"process\", \"process_bis\"))\n\n    # species-level occurrence and detection probabilities on logit-scale  \n    ab = pm.MvNormal(\"ab\", mu, chol=chol, dims=(\"species\", \"process\"))\n\n    # probability of detection. newaxis allows for broadcasting\n    a = ab[:, 0][:, np.newaxis]\n    p = pm.Deterministic(\"p\", pm.math.invlogit(a))\n\n    # probability of detection. newaxis allows for broadcasting\n    b = ab[:, 1][:, np.newaxis]\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(b))\n\n    # likelihood\n    pm.ZeroInflatedBinomial('Y', p=p, psi=psi, n=K, observed=Y)\n\npm.model_to_graphviz(known)\n\n\n\n\n\n\n\nFigure 2: Visual representation of the known \\(N\\) version of the community occupancy model.\n\n\n\n\n\n\nwith known:\n    known_idata = pm.sample(nuts_sampler='nutpie')\n\n\n\n\n\n\n    Sampler Progress\n    Total Chains: 4\n    Active Chains: 0\n    \n        Finished Chains:\n        4\n    \n    Sampling for now\n    \n        Estimated Time to Completion:\n        now\n    \n\n    \n    \n    \n        \n            \n                Progress\n                Draws\n                Divergences\n                Step Size\n                Gradients/Draw\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.39\n                    31\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.39\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.38\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.39\n                    15\n                \n            \n            \n        \n    \n\n\n\n\nmu_hat_royle = [-1.11, -1.7]\naz.plot_trace(known_idata, var_names=['mu'], figsize=(8,2),\n              lines=[(\"mu\", {}, [mu_hat_royle])]);\n\n\n\n\n\n\n\nFigure 3: Trace plots for the community level means of occupancy and abundance in the known \\(N\\) version of the BBS model. The estimates from Royle and Dorazio (2008) are shown by vertical and horizontal lines.\n\n\n\n\n\n\nsamps = az.extract(known_idata, var_names='ab')\nab_mean = samps.mean(axis=2)\n\nfig, ax = plt.subplots(figsize=(5,4))\nax.scatter(invlogit(ab_mean[:, 1]), invlogit(ab_mean[:, 0]), alpha=0.5)\nax.set_xlim((0, 1))\nax.set_xlabel('Occupancy probability')\nax.set_ylim((0, 0.8))\nax.set_ylabel('Detection probability')\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Species-level probabilities of detection and occupancy.\n\n\n\n\n\nThe estimates of the community-level means is quite close to the estimates from Royle and Dorazio (2008). We can visualize the species-level probabilities of detection and occupancy. Compare with Figure 12.3 in Royle and Dorazio (2008).",
    "crumbs": [
      "Code",
      "PyMC",
      "Community occupancy"
    ]
  },
  {
    "objectID": "msom.html#unknown-n",
    "href": "msom.html#unknown-n",
    "title": "Community occupancy",
    "section": "Unknown \\(N\\)",
    "text": "Unknown \\(N\\)\nNext, I train the unknown \\(N\\) version of the model. Like many other notebooks in this series, it relies on augmenting the detection histories with all-zero histories. These represent the detection histories for species that may use the study site, but were not detected over the \\(K=11\\) surveys. I also augment the species names in the coords dict, such that we can still use the dims argument in the multivariate normal. Mirroring Royle and Dorazio (2008), I augment the history \\(M - n\\) all-zero histories, where \\(M=250\\) and \\(n\\) is the number of species detected during the survey.\nSimilar to the occupancy notebook, I use a CustomDist to model the augmented history. This accounts for the “row-level” zero-inflation, whereby we know that the species is included in the super community if it was detected along the BBS route. The only difference with this logp is that it uses a ZeroInflatedBinomial distribution under the hood, rather than a Bernoulli, and uses the parameter \\(\\Omega\\) to account for the row-level inflation.\n\nM = 250\nall_zero_history = np.zeros((M - n, J))\nY_augmented = np.row_stack((Y, all_zero_history))\n\naug_names = [f'aug{i}' for i in np.arange(M - n)]\nspp_aug = np.concatenate((lookup, aug_names))\n\ncoords = {'process': ['detection', 'occurrence'], \n          'process_bis': ['detection', 'occurrence'],\n          'species_aug': spp_aug}\n\ndef logp(x, psi, n, p, omega):\n\n    rv = pm.ZeroInflatedBinomial.dist(psi=psi, n=n, p=p)\n    lp = pm.logp(rv, x)\n    lp_sum = lp.sum(axis=1)\n    lp_exp = pm.math.exp(lp_sum)\n    \n    res = pm.math.switch(\n        x.sum(axis=1) &gt; 0,\n        lp_exp * omega,\n        lp_exp * omega + (1 - omega)\n    )\n    \n    return pm.math.log(res)\n\nwith pm.Model(coords=coords) as unknown:\n\n    # priors for inclusion\n    omega = pm.Beta('omega', 0.001, 1)\n    \n    # priors for community-level means for detection and occurrence\n    mu = pm.Normal('mu', 0, 2, dims='process')\n\n    # prior for covariance matrix for occurrence and detection\n    chol, corr, stds = pm.LKJCholeskyCov(\n        \"chol\", n=2, eta=2.0, sd_dist=pm.Exponential.dist(1.0, shape=2)\n    )\n    cov = pm.Deterministic(\"cov\", chol.dot(chol.T), dims=(\"process\", \"process_bis\"))\n\n    # species-level occurrence and detection probabilities on logit-scale  \n    ab = pm.MvNormal(\"ab\", mu, chol=chol, dims=(\"species_aug\", \"process\"))\n\n    # probability of detection\n    alpha = ab[:, 0]\n    p = pm.Deterministic(\"p\", pm.math.invlogit(alpha))\n\n    # probability of occurrence\n    beta = ab[:, 1]\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(beta))\n\n    # likelihood\n    pm.CustomDist(\n        'Y',\n        psi[:, np.newaxis],\n        K,\n        p[:, np.newaxis],\n        omega,\n        logp=logp,\n        observed=Y_augmented\n    )\n    \npm.model_to_graphviz(unknown)\n\n/var/folders/7b/nb0vyhy90mdf30_65xwqzl300000gn/T/ipykernel_57986/237033199.py:3: DeprecationWarning: `row_stack` alias is deprecated. Use `np.vstack` directly.\n  Y_augmented = np.row_stack((Y, all_zero_history))\n\n\n\n\n\n\n\n\nFigure 5: Visual representation of the unknown \\(N\\) version of the BBS model.\n\n\n\n\n\n\nwith unknown:\n    unknown_idata = pm.sample(nuts_sampler='nutpie')\n    # unknown_idata = pm.sample()\n\n\n\n\n\n\n    Sampler Progress\n    Total Chains: 4\n    Active Chains: 0\n    \n        Finished Chains:\n        4\n    \n    Sampling for 26 seconds\n    \n        Estimated Time to Completion:\n        now\n    \n\n    \n    \n    \n        \n            \n                Progress\n                Draws\n                Divergences\n                Step Size\n                Gradients/Draw\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.26\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.26\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.26\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.26\n                    15\n                \n            \n            \n        \n    \n\n\n\nWe see some warnings about the effective sample size and the \\(\\hat{R}\\) statistic. Some of these warnings may just relate to the individual random effects.\n\naz.summary(unknown_idata, var_names=['omega', 'cov', 'mu'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nomega\n0.529\n0.072\n0.409\n0.662\n0.007\n0.006\n131.0\n167.0\n1.04\n\n\ncov[detection, detection]\n1.270\n0.336\n0.699\n1.895\n0.022\n0.013\n233.0\n531.0\n1.02\n\n\ncov[detection, occurrence]\n1.398\n0.500\n0.527\n2.291\n0.037\n0.024\n183.0\n374.0\n1.03\n\n\ncov[occurrence, detection]\n1.398\n0.500\n0.527\n2.291\n0.037\n0.024\n183.0\n374.0\n1.03\n\n\ncov[occurrence, occurrence]\n5.107\n1.391\n2.770\n7.617\n0.118\n0.064\n154.0\n348.0\n1.04\n\n\nmu[detection]\n-2.012\n0.210\n-2.407\n-1.634\n0.016\n0.011\n176.0\n252.0\n1.03\n\n\nmu[occurrence]\n-2.056\n0.473\n-2.951\n-1.246\n0.039\n0.030\n167.0\n167.0\n1.04\n\n\n\n\n\n\n\n\nomega_hat_royle = [0.55]\naz.plot_trace(unknown_idata, var_names=['omega'], figsize=(8,2), \n              lines=[(\"omega\", {}, [omega_hat_royle])]);\n\n\n\n\n\n\n\nFigure 6: Trace plots for the inclusion parameter for the unknown \\(N\\) version of the BBS model. The estimate from Royle and Dorazio (2008) are shown by vertical and horizontal lines.\n\n\n\n\n\nI can plot the posterior distribution of species richness \\(N.\\) This is slightly more complicated than before sinc there is an additional level of zero-inflation (included and never detected or not-included) in this model compared to the occupancy model (present and never detection or not present).\n\n# relevant posterior samples\npost = az.extract(unknown_idata)\no_samps = post.omega.to_numpy()\n\n# only care about the undetected species\np_samps = post.p.to_numpy()[n:]\n\n# probability that the species was in the study area but wasn't detected\np_if_present = o_samps * binom.pmf(0, n=K, p=p_samps)\np_total = p_if_present + (1 - o_samps)\n\n# simulate the latent occurrence state for the undetected species\nZ = RNG.binomial(1, p_if_present / p_total)\n\n# simulate species richness\nnumber_undetected = Z.sum(axis=0)\nN_samps = number_undetected + n\n\n# relevant posterior samples\n# post = az.extract(unknown_idata)\n# o_samps = post.omega.to_numpy()\n\n# N_samps = RNG.binomial(M, o_samps)\n\n# posterior distribution \nN_hat_royle = 138\nfig, ax = plt.subplots(figsize=(6, 4))\nax.hist(N_samps, edgecolor='white', bins=25)\nax.set_xlabel('Species richness $N$')\nax.set_ylabel('Posterior samples')\nax.axvline(N_hat_royle, linestyle='--', color='C1')\nax.axvline(N_samps.mean(), linestyle='--', color='C2')\nplt.show()\n\n\n\n\n\n\n\nFigure 7: Posterior distribution of species richness from the BBS model.\n\n\n\n\n\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w  \n\nLast updated: Thu Oct 09 2025\n\nPython implementation: CPython\nPython version       : 3.13.2\nIPython version      : 9.0.2\n\narviz     : 0.21.0\npymc      : 5.22.0\nnumpy     : 2.1.3\npandas    : 2.2.3\nseaborn   : 0.13.2\nmatplotlib: 3.10.1\n\nWatermark: 2.5.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Community occupancy"
    ]
  },
  {
    "objectID": "scr.html",
    "href": "scr.html",
    "title": "Spatial capture-recapture",
    "section": "",
    "text": "In this notebook, I show how to train spatial capture-recapture (SCR) models in PyMC. SCR expands upon traditional capture-recapture by incorporating the location of the traps in the analysis. This matters because, typically, animals that live near a particular trap are more likely to be caught in it. In doing so, SCR links individual-level processes to the population-level, expanding the scientific scope of simple designs.\nIn this notebook, I train the simplest possible SCR model, SCR0 (Royle et al. 2013, chap. 5), where the goal is estimating the true population size \\(N\\). Similar to the other closed population notebooks, I do so using parameter-expanded data-augmentation (PX-DA). I also borrow the concept of the detection function from the distance sampling notebook.\nAs a motivating example, I use the ovenbird mist netting dataset provided by Murray Efford via the secr package in R. The design of the study is outlined in Efford, Dawson, and Robbins (2004) and Borchers and Efford (2008). In this dataset, ovenbirds were trapped in 44 mist nets over 8 to 10 consecutive days during the summers of 2005 to 2009.\n%config InlineBackend.figure_format = 'retina'\n\nimport arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pymc as pm\nimport pymc_extras as pmx\nimport pytensor.tensor as pt\nimport seaborn as sns\n\n# only necessary on MacOS Sequoia\n# https://discourse.pymc.io/t/pytensor-fails-to-compile-model-after-upgrading-to-mac-os-15-4/16796/5\nimport pytensor\npytensor.config.cxx = '/usr/bin/clang++'\n\n# hyper parameters\nSEED = 42\nRNG = np.random.default_rng(SEED)\nBUFFER = 100\nM = 200\n\n# plotting defaults\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\nplt.rcParams['axes.spines.left'] = False\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.spines.bottom'] = False\nsns.set_palette(\"tab10\")\n\ndef invlogit(x):\n    '''Inverse logit function'''\n    return 1 / (1 + np.exp(-x))\n\ndef euclid_dist(X, S, library='np'):\n    '''Pairwise euclidian distance between points in (M, 2) and (N, 2) arrays'''\n    diff = X[np.newaxis, :, :] - S[:, np.newaxis, :]\n\n    if library == 'np':\n        return np.sqrt(np.sum(diff ** 2, axis=-1))\n\n    elif library == 'pm':\n        return pm.math.sqrt(pm.math.sum(diff ** 2, axis=-1))\n\ndef half_normal(d, s, library='np'):\n    '''Half normal detection function.'''\n    if library == 'np':\n        return np.exp( - (d ** 2) / (2 * s ** 2))\n\n    elif library == 'pm':\n        return pm.math.exp( - (d ** 2) / (2 * s ** 2))\n\ndef exponential(d, s, library='np'):\n    '''Negative exponential detection function.'''\n    if library == 'np':\n        return np.exp(- d / s)\n\n    elif library == 'pm':\n        return pm.math.exp(- d / s)\n\n# coordinates for each trap\novenbird_trap = pd.read_csv('ovenbirdtrap.txt', delimiter=' ')\ntrap_count, _ = ovenbird_trap.shape\n\n# information about each trap\ntrap_x = ovenbird_trap.x\ntrap_y = ovenbird_trap.y\nX = ovenbird_trap[['x', 'y']].to_numpy()\n\n# define the state space around the traps\nx_max = trap_x.max() + BUFFER\ny_max = trap_y.max() + BUFFER\nx_min = trap_x.min() - BUFFER\ny_min = trap_y.min() - BUFFER\n\n# scale for plotting\nscale = (y_max - y_min) / (x_max - x_min)\n\n# plot the trap locations\nplot_width = 2\nplot_height = plot_width * scale\nfig, ax = plt.subplots(figsize=(plot_width, plot_height))\n\n# plot the traps\nax.scatter(trap_x, trap_y, marker='x', s=40, linewidth=1.5, color='C1')\nax.set_ylim((y_min, y_max))\nax.set_xlim((x_min, x_max))\n\nax.annotate(\n    '44 nets\\n30m apart', ha='center',\n    xy=(55, -150), xycoords='data', color='black',\n    xytext=(40, 30), textcoords='offset points',\n    arrowprops=dict(arrowstyle=\"-&gt;\", color='black', linewidth=1,\n                    connectionstyle=\"angle3,angleA=90,angleB=0\"))\n\n# aesthetics\nax.set_aspect('equal')\nax.set_title('Mist net locations')\nax.grid(False)\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Locations of the mist nets in the ovenbird dataset (Efford, Dawson, and Robbins 2004)\nOne difference between spatial and traditional (non-spatial) capture is the addition of the trap identifier in the capture history. Whereas a traditional capture history is [individual, occasion], a spatial capture history might be [individual, occasion, trap].\nIn the ovenbird example, I ignore the year dimension, pooling parameters across years, which allows for better estimation of the detection parameters. My hack for doing so is treating every band/year combination as a unique individual in a combined year capture history. This is easy to implement, creates an awkward interpretation of \\(N\\) (see below).\n# ovenbird capture history\noven_ch = pd.read_csv('ovenbirdcapt.txt', delimiter=' ')\n\n# create a unique bird/year identifier for each individual\noven_ch['ID'] = oven_ch.groupby(['Year','Band']).ngroup()\noccasion_count = oven_ch.Day.max()\n\n# merge the datasets, making sure that traps with no detections are included\novenbird = (\n    ovenbird_trap.merge(oven_ch[['ID', 'Net', 'Day']], how='left')\n      [['ID', 'Day', 'Net', 'x', 'y']]\n      .sort_values('ID')\n      .reset_index(drop=True)\n)\n\novenbird.head(10)\n\n\n\n\n\n\n\n\nID\nDay\nNet\nx\ny\n\n\n\n\n0\n0.0\n1.0\n2\n-50.0\n-255.0\n\n\n1\n1.0\n9.0\n20\n-50.0\n285.0\n\n\n2\n1.0\n1.0\n15\n-50.0\n135.0\n\n\n3\n2.0\n6.0\n17\n-50.0\n195.0\n\n\n4\n2.0\n9.0\n27\n49.0\n165.0\n\n\n5\n2.0\n1.0\n15\n-50.0\n135.0\n\n\n6\n2.0\n1.0\n14\n-50.0\n105.0\n\n\n7\n3.0\n1.0\n41\n49.0\n-255.0\n\n\n8\n3.0\n3.0\n39\n49.0\n-195.0\n\n\n9\n3.0\n1.0\n42\n49.0\n-285.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Spatial capture-recapture"
    ]
  },
  {
    "objectID": "scr.html#simulation",
    "href": "scr.html#simulation",
    "title": "Spatial capture-recapture",
    "section": "Simulation",
    "text": "Simulation\nBefore estimating the parameters, I perform a small simulation. The simulation starts with a core idea of SCR: the activity center. The activity center \\(\\mathbf{s}_i\\) is the most likely place that you’d find an individual \\(i\\) over the course of the trapping study. In this case, I assume that activity centers are uniformly distributed across the sample space.\nI compute the probability of detection for individual \\(i\\) at trap \\(j\\) as \\(p_{i,j}=g_0 \\exp(-d_{i,j}^2/2\\sigma^2),\\) where \\(g_0\\) is the probability of detecting an individual when it’s activity center is at the trap, \\(d_{i,j}\\) is the euclidean distance between the trap and the activity center, and \\(\\sigma\\) is the detection range parameter.\n\n# true population size\nN = 150\n\n# simulate activity centers\nS_true = RNG.uniform((x_min, y_min), (x_max, y_max), (N, 2))\n\n# true distance between the trap and the activity centers\nd_true = euclid_dist(X, S_true)\n\n# detection parameters\ng0_true = 0.025\nsigma_true = 73\n\n# simulate the number of captures at each trap for each individual\ncapture_probability = g0_true * half_normal(d_true, sigma_true)\nsim_Y = RNG.binomial(occasion_count, capture_probability)\n\n# filter out undetected individuals\nwas_detected = sim_Y.sum(axis=1) &gt; 0\nsim_Y_det = sim_Y[was_detected]\nn_detected = int(was_detected.sum())\n\nFollowing Royle et al. (2013), Chapter 5, I first fit the version of the model where we assume that we know the true population size. In this case, I’m only estimating the detection parameters and the activity center locations.\n\n# upper bound for the uniform prior on sigma\nU_SIGMA = 150\n\nwith pm.Model() as known:\n\n    # priors for the activity centers\n    S = pm.Uniform('S', (x_min, y_min), (x_max, y_max), shape=(n_detected, 2))\n\n    # priors for the detection parameters\n    g0 = pm.Uniform('g0', 0, 1)\n    sigma = pm.Uniform('sigma', 0, U_SIGMA)\n\n    # probability of capture for each individual at each trap\n    distance = euclid_dist(X, S, 'pm')\n    p = pm.Deterministic('p', g0 * half_normal(distance, sigma))\n\n    # likelihood\n    pm.Binomial(\n        'y',\n        p=p,\n        n=occasion_count,\n        observed=sim_Y_det\n    )\n\npm.model_to_graphviz(known)\n\n\n\n\n\n\n\nFigure 2: Visual representation of the model where \\(N\\) is known.\n\n\n\n\n\n\nwith known:\n    known_idata = pm.sample(nuts_sampler='nutpie')\n\n\n\n\n\n\n    Sampler Progress\n    Total Chains: 4\n    Active Chains: 0\n    \n        Finished Chains:\n        4\n    \n    Sampling for now\n    \n        Estimated Time to Completion:\n        now\n    \n\n    \n    \n    \n        \n            \n                Progress\n                Draws\n                Divergences\n                Step Size\n                Gradients/Draw\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.33\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.33\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.33\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.34\n                    15\n                \n            \n            \n        \n    \n\n\n\n\naz.summary(known_idata, var_names=['g0', 'sigma'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\ng0\n0.022\n0.003\n0.017\n0.028\n0.000\n0.000\n864.0\n1497.0\n1.0\n\n\nsigma\n94.783\n7.965\n80.985\n109.960\n0.344\n0.228\n557.0\n1103.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_trace(\n    known_idata,\n    var_names=['g0', 'sigma'],\n    figsize=(8,4),\n    lines=[(\"g0\", {}, [g0_true]), (\"sigma\", {}, [sigma_true])]\n);\n\n\n\n\n\n\n\nFigure 3: Trace plots for model where \\(N\\) is known. The true parameter values are shown by vertical and horizontal lines.\n\n\n\n\n\nThe trace plots show reasonable agreement between the true parameter values and the estimated values, although \\(g_0\\) appears to be overestimated.",
    "crumbs": [
      "Code",
      "PyMC",
      "Spatial capture-recapture"
    ]
  },
  {
    "objectID": "scr.html#ovenbird-density",
    "href": "scr.html#ovenbird-density",
    "title": "Spatial capture-recapture",
    "section": "Ovenbird density",
    "text": "Ovenbird density\nNow, I estimate the density \\(D\\) for the ovenbird population. Like distance sampling, SCR can robustly estimate the density of the population, regardless of the size of the state space. The difference between the model above and this one is that we use PX-DA to estimate the inclusion probability \\(\\psi,\\) and subsequently \\(N.\\) First, I convert the DataFrame to a (n_detected, n_traps) array of binomial counts.\n\ndef get_Y(ch):\n    '''Get a (individual_count, trap_count) array of detections.'''\n\n    # count the number of detections per individual per trap\n    detection_counts = pd.crosstab(ch.ID, ch.Net, dropna=False)\n\n    # remove the ghost nan individual\n    detection_counts = detection_counts.loc[~detection_counts.index.isna()]\n\n    Y = detection_counts.to_numpy()\n    return Y\n\nY = get_Y(ovenbird)\ndetected_count, trap_count = Y.shape\n\n# augmented spatial capture histories with all zero histories\nall_zero_history = np.zeros((M - detected_count, trap_count))\nY_augmented = np.vstack((Y, all_zero_history))\n\nAs with the other closed models in this series, I will write the model in terms of the latent inclusion state \\(z_i\\). Interestingly, .\n\nwith pm.Model() as oven:\n\n    # Priors\n    # activity centers\n    S = pm.Uniform('S', (x_min, y_min), (x_max, y_max), shape=(M, 2))\n\n    # capture parameters\n    g0 = pm.Uniform('g0', 0, 1)\n    sigma = pm.Uniform('sigma', 0, U_SIGMA)\n\n    # inclusion probability\n    psi = pm.Beta('psi', 0.001, 1)\n\n    # compute the capture probability\n    distance = euclid_dist(X, S, 'pm')\n    p = pm.Deterministic('p', g0 * half_normal(distance, sigma))\n\n    # inclusion state\n    z = pm.Bernoulli('z', psi, shape=M)\n\n    # likelihood\n    mu_y = z[:, None] * p\n    pm.Binomial('y', p=mu_y, n=occasion_count, observed=Y_augmented)\n\npm.model_to_graphviz(oven)\n\n\n\n\n\n\n\nFigure 4: Visual representation of the ovenbird model using data augmentation.\n\n\n\n\n\n\noven_marginal = pmx.marginalize(oven, ['z'])\nwith oven_marginal:\n    oven_idata = pm.sample(nuts_sampler='nutpie')\n\n\n\n\n\n\n    Sampler Progress\n    Total Chains: 4\n    Active Chains: 0\n    \n        Finished Chains:\n        4\n    \n    Sampling for 13 seconds\n    \n        Estimated Time to Completion:\n        now\n    \n\n    \n    \n    \n        \n            \n                Progress\n                Draws\n                Divergences\n                Step Size\n                Gradients/Draw\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.29\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.29\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.29\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.29\n                    15\n                \n            \n            \n        \n    \n\n\n\n\naz.summary(oven_idata, var_names=['g0', 'sigma', 'psi'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\ng0\n0.029\n0.004\n0.023\n0.037\n0.000\n0.000\n1264.0\n2200.0\n1.0\n\n\nsigma\n71.371\n4.563\n63.488\n80.193\n0.172\n0.098\n724.0\n1263.0\n1.0\n\n\npsi\n0.700\n0.056\n0.598\n0.808\n0.001\n0.001\n3391.0\n2484.0\n1.0\n\n\n\n\n\n\n\n\ng0_mle = [0.025]\nsigma_mle = [73]\n\naz.plot_trace(\n    oven_idata,\n    var_names=['g0', 'sigma'],\n    figsize=(8,4),\n    lines=[(\"g0\", {}, [g0_mle]), (\"sigma\", {}, [sigma_mle])]\n);\n\n\n\n\n\n\n\nFigure 5: Trace plots for the ovenbird model using data augmentation. Maximum likelihood estimates are shown by vertical and horizontal lines.\n\n\n\n\n\nThe estimates are quite close to the maximum likelihood estimates, which I estimated with the secr package in R.\nFinally, I estimate density \\(D\\) using the results. As in the closed capture-recapture and distance sampling notebooks, I use the posterior samples of \\(\\psi\\) and \\(M\\) to sample the posterior of \\(N.\\) This \\(N,\\) however, has an awkward interpretation because I pooled across the years by combining all the detection histories. To get around this, I compute the average annual abundance by dividing by the total number of years in the sample. Then, I divide by the area of the state space.\n\ndef sim_N(idata, n, K):\n\n    psi_samps = az.extract(idata).psi.to_numpy()\n    p_samps = az.extract(idata).p\n    p_samps_undet = p_samps[n:, :, :]\n\n    bin_probs = (1 - p_samps_undet) ** K\n    bin_prod = bin_probs.prod(axis=1)\n    p_included = (bin_prod * psi_samps) / (bin_prod * psi_samps  + (1 - psi_samps))\n\n    number_undetected = RNG.binomial(1, p_included).sum(axis=0)\n    N_samps = n + number_undetected\n\n    return N_samps\n\n\nN_samps = sim_N(oven_idata, detected_count, occasion_count)\n\n# kludgy way of calculating avergage abundance\nyear_count = 5\naverage_annual_abundance = N_samps // year_count\n\n# area of the state space in terms of hectares\nha = 100 * 100\nmask_area = (x_max - x_min) * (y_max - y_min) / ha\n\n# density\nD_samples = average_annual_abundance / mask_area\nD_mle = 1.262946\n\nfig, ax = plt.subplots(figsize=(4,4))\nax.hist(D_samples, edgecolor='white', bins=13)\nax.axvline(D_mle, linestyle='--',color='C1')\nax.set_xlabel('Ovenbirds per hectare')\nax.set_ylabel('Number of samples')\nax.text(1.4, 800, rf'$\\hat{{D}}$={D_samples.mean():.2f}', va='bottom', ha='left')\nplt.show()\n\n\n\n\n\n\n\nFigure 6: Posterior distribution of the density \\(D\\) of ovenbirds. The maximum likelihood estimate is shown by the dotted red line.\n\n\n\n\n\nSometimes, the location of the activity centers is of interest. Below, I plot the posterior median for the activity centers for the detected individuals.\n\ns_samps = az.extract(oven_idata).S\ns_mean = np.median(s_samps[:detected_count], axis=2)\n\n# plot the trap locations\nplot_width = 3\nplot_height = plot_width * scale\nfig, ax = plt.subplots(figsize=(plot_width, plot_height))\n\n# plot the traps\nax.scatter(trap_x, trap_y, marker='x', s=40, linewidth=1.5, color='C1')\nax.set_ylim((y_min, y_max))\nax.set_xlim((x_min, x_max))\n\n# plot the mean activity centers\nax.scatter(s_mean[:, 0], s_mean[:, 1], marker='o', s=4, color='C0')\n\n# aesthetics\nax.set_aspect('equal')\nax.set_title('Estimated activity centers')\nax.grid(False)\n\n\n\n\n\n\n\nFigure 7: Estimated activity centers for the detected individuals\n\n\n\n\n\nWe can also look at the uncertainty around those estimates. Below, I plot the posterior distribution of the activity centers for two individuals.\n\none = 49\none_samps = s_samps[one]\n\ntwo = 2\ntwo_samps = s_samps[two]\n\nfig, ax = plt.subplots(figsize=(plot_width, plot_height))\n\n# plot the traps\nax.scatter(trap_x, trap_y, marker='x', s=40, linewidth=1.5, color='tab:cyan')\nax.set_ylim((y_min, y_max))\nax.set_xlim((x_min, x_max))\n\n# plot the distributions of the activity centers\nax.scatter(one_samps[0], one_samps[1], marker='o', s=1, color='tab:pink', alpha=0.4)\nax.scatter(two_samps[0], two_samps[1], marker='o', s=1, color='tab:purple', alpha=0.4)\n\n# plot the mean\nax.scatter(one_samps[0].mean(), one_samps[1].mean(), marker='o', s=40, color='w')\nax.scatter(two_samps[0].mean(), two_samps[1].mean(), marker='o', s=40, color='w')\n\n# add the label\nax.text(one_samps[0].mean(), one_samps[1].mean() + 5, f'{one}', ha='center', va='bottom')\nax.text(two_samps[0].mean(), two_samps[1].mean() + 5, f'{two}', ha='center', va='bottom')\n\n# aesthetics\nax.set_aspect('equal')\nax.set_title('Posterior of two activity centers')\nax.grid(False)\nplt.show()\n\n\n\n\n\n\n\nFigure 8: Posterior distributions for two activity centers.\n\n\n\n\n\nFinally, I plot the posterior distribution of the detection function.\n\nxx = np.arange(BUFFER * 2)\n\nsigma_samps = az.extract(oven_idata).sigma.values.flatten()\ng0_samps = az.extract(oven_idata).g0.values.flatten()\n\np_samps = np.array(\n    [g * half_normal(xx, s) for g, s in zip(g0_samps, sigma_samps)]\n)\n\np_mean = p_samps.mean(axis=0)\np_low = np.quantile(p_samps, 0.02, axis=0)\np_high = np.quantile(p_samps, 0.98, axis=0)\n\nfig, ax = plt.subplots(figsize=(5,4))\n\nax.plot(xx, p_mean, '-')\nax.fill_between(xx, p_low, p_high, alpha=0.2)\n\nax.set_title('Detection function')\nax.set_ylabel(r'$p$')\nax.set_xlabel(r'Distance (m)')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 9: Posterior distribution for the detection function. The line represents the posterior mean while the shaded area is the 96% interval.\n\n\n\n\n\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w\n\nThe watermark extension is already loaded. To reload it, use:\n  %reload_ext watermark\nLast updated: Tue Oct 14 2025\n\nPython implementation: CPython\nPython version       : 3.13.3\nIPython version      : 9.2.0\n\npytensor   : 2.31.7\npandas     : 2.2.3\nmatplotlib : 3.10.1\narviz      : 0.21.0\nseaborn    : 0.13.2\nnumpy      : 2.2.5\npymc_extras: 0.5.0\npymc       : 5.25.1\n\nWatermark: 2.5.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Spatial capture-recapture"
    ]
  },
  {
    "objectID": "closed_cmr.html",
    "href": "closed_cmr.html",
    "title": "Closed capture-recapture",
    "section": "",
    "text": "In this notebook, I explore fitting closed population capture-recapture models in PyMC. Capture-recapture, at least the Lincoln-Peterson estimator, has been around for almost 100 years. Since then, countless varieties of capture-recapture models have been developed for closed populations (Otis et al. 1978).\nThe basic steps in capture-recapture are: capture several individuals–e.g., via trapping–from the population of interest, mark these animals, then release them. We repeat this process several times, each time noting when we recapture individuals.\nThis produces a capture history for each individual, which allows us to estimate the probability of capture and the number of individuals in the population \\(N\\).",
    "crumbs": [
      "Code",
      "PyMC",
      "Closed capture-recapture"
    ]
  },
  {
    "objectID": "msom-pr.html",
    "href": "msom-pr.html",
    "title": "Community occupancy",
    "section": "",
    "text": "In this notebook, I explore fitting community occupancy models in PyMC. Community occupancy models are a multi-species extension of standard occupancy models. The benefit of these models is that they estimate occupancy and detection better that single species models by treating each species as a random effect. Further, through data augmentation, they can estimate the richness of the supercommunity, that is, the total number of species that use the study area during the surveys."
  },
  {
    "objectID": "msom-pr.html#known-n",
    "href": "msom-pr.html#known-n",
    "title": "Community occupancy",
    "section": "Known \\(N\\)",
    "text": "Known \\(N\\)\nFirst, I fit the the known \\(N\\) version of the model. The goal of this version is to estimate occurrence and detection for each species, without estimating species richness.\nThis notebook makes extensive use of the coords feature in PyMC. Coords makes it easier to incorporate the species-level effects via the multivariate normal. I use a \\(\\text{Normal}(0, 2)\\) prior for both \\(\\mu\\) parameters, and a LKJ Cholesky covariance prior for \\(\\mathbf{\\Sigma}.\\)\n\ncoords = {'process': ['detection', 'occurrence'], \n          'process_bis': ['detection', 'occurrence'],\n          'species': lookup}\n\nwith pm.Model(coords=coords) as known:\n\n    # priors for community-level means for detection and occurrence\n    mu = pm.Normal('mu', 0, 2, dims='process')\n\n    # prior for covariance matrix for occurrence and detection\n    chol, corr, stds = pm.LKJCholeskyCov(\n        \"chol\", n=2, eta=2.0, sd_dist=pm.Exponential.dist(1.0, shape=2)\n    )\n    cov = pm.Deterministic(\"cov\", chol.dot(chol.T), dims=(\"process\", \"process_bis\"))\n\n    # species-level occurrence and detection probabilities on logit-scale  \n    ab = pm.MvNormal(\"ab\", mu, chol=chol, dims=(\"species\", \"process\"))\n\n    # probability of detection. newaxis allows for broadcasting\n    a = ab[:, 0][:, np.newaxis]\n    p = pm.Deterministic(\"p\", pm.math.invlogit(a))\n\n    # probability of detection. newaxis allows for broadcasting\n    b = ab[:, 1][:, np.newaxis]\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(b))\n\n    # likelihood\n    pm.ZeroInflatedBinomial('Y', p=p, psi=psi, n=K, observed=Y)\n\npm.model_to_graphviz(known)\n\n\n\n\n\n\n\nFigure 2: Visual representation of the known \\(N\\) version of the community occupancy model.\n\n\n\n\n\n\nwith known:\n    known_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [mu, chol, ab]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:43&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n/Users/philtpatton/miniforge3/envs/pymc/lib/python3.11/site-packages/pytensor/compile/function/types.py:970: RuntimeWarning: invalid value encountered in accumulate\n  self.vm()\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 43 seconds.\n\n\n\nmu_hat_royle = [-1.11, -1.7]\naz.plot_trace(known_idata, var_names=['mu'], figsize=(8,2),\n              lines=[(\"mu\", {}, [mu_hat_royle])]);\n\n\n\n\n\n\n\nFigure 3: Trace plots for the community level means of occupancy and abundance in the known \\(N\\) version of the BBS model. The estimates from Royle and Dorazio (2008) are shown by vertical and horizontal lines.\n\n\n\n\n\n\nsamps = az.extract(known_idata, var_names='ab')\nab_mean = samps.mean(axis=2)\n\nfig, ax = plt.subplots(figsize=(5,4))\nax.scatter(invlogit(ab_mean[:, 1]), invlogit(ab_mean[:, 0]), alpha=0.5)\nax.set_xlim((0, 1))\nax.set_xlabel('Occupancy probability')\nax.set_ylim((0, 0.8))\nax.set_ylabel('Detection probability')\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Species-level probabilities of detection and occupancy.\n\n\n\n\n\nThe estimates of the community-level means is quite close to the estimates from Royle and Dorazio (2008). We can visualize the species-level probabilities of detection and occupancy. Compare with Figure 12.3 in Royle and Dorazio (2008)."
  },
  {
    "objectID": "msom-pr.html#unknown-n",
    "href": "msom-pr.html#unknown-n",
    "title": "Community occupancy",
    "section": "Unknown \\(N\\)",
    "text": "Unknown \\(N\\)\nNext, I train the unknown \\(N\\) version of the model. Like many other notebooks in this series, it relies on augmenting the detection histories with all-zero histories. These represent the detection histories for species that may use the study site, but were not detected over the \\(K=11\\) surveys. I also augment the species names in the coords dict, such that we can still use the dims argument in the multivariate normal. Mirroring Royle and Dorazio (2008), I augment the history \\(M - n\\) all-zero histories, where \\(M=250\\) and \\(n\\) is the number of species detected during the survey.\nSimilar to the occupancy notebook, I use a CustomDist to model the augmented history. This accounts for the “row-level” zero-inflation, whereby we know that the species is included in the super community if it was detected along the BBS route. The only difference with this logp is that it uses a ZeroInflatedBinomial distribution under the hood, rather than a Bernoulli, and uses the parameter \\(\\Omega\\) to account for the row-level inflation.\n\nM = 250\nall_zero_history = np.zeros((M - n, J))\nY_augmented = np.row_stack((Y, all_zero_history))\n\naug_names = [f'aug{i}' for i in np.arange(M - n)]\nspp_aug = np.concatenate((lookup, aug_names))\n\ncoords = {'process': ['detection', 'occurrence'], \n          'process_bis': ['detection', 'occurrence'],\n          'species_aug': spp_aug}\n\ndef logp(x, psi, n, p, omega):\n    '''A zero-inflated, zero-inflated model.'''\n    rv = pm.ZeroInflatedBinomial.dist(psi=psi, n=n, p=p)\n    lp = pm.logp(rv, x)\n    lp_sum = lp.sum(axis=1)\n    lp_exp = pm.math.exp(lp_sum)\n    \n    res = pm.math.switch(\n        x.sum(axis=1) &gt; 0,\n        lp_exp * omega,\n        lp_exp * omega + (1 - omega)\n    )\n    \n    return pm.math.log(res)\n\nwith pm.Model(coords=coords) as unknown:\n\n    # priors for inclusion\n    omega = pm.Uniform('omega', 0, 1)\n    \n    # priors for community-level means for detection and occurrence\n    mu = pm.Normal('mu', 0, 2, dims='process')\n\n    # prior for covariance matrix for occurrence and detection\n    chol, corr, stds = pm.LKJCholeskyCov(\n        \"chol\", n=2, eta=2.0, sd_dist=pm.Exponential.dist(1.0, shape=2)\n    )\n    cov = pm.Deterministic(\"cov\", chol.dot(chol.T), dims=(\"process\", \"process_bis\"))\n\n    # species-level occurrence and detection probabilities on logit-scale  \n    ab = pm.MvNormal(\"ab\", mu, chol=chol, dims=(\"species_aug\", \"process\"))\n\n    # probability of detection\n    a = ab[:, 0]\n    p = pm.Deterministic(\"p\", pm.math.invlogit(a))\n\n    # probability of occurrence\n    b = ab[:, 1]\n    psi = pm.Deterministic(\"psi\", pm.math.invlogit(b))\n\n    # likelihood\n    pm.CustomDist(\n        'Y',\n        psi[:, np.newaxis],\n        K,\n        p[:, np.newaxis],\n        omega,\n        logp=logp,\n        observed=Y_augmented\n    )\n    \npm.model_to_graphviz(unknown)\n\n\n\n\n\n\n\nFigure 5: Visual representation of the unknown \\(N\\) version of the BBS model.\n\n\n\n\n\n\nwith unknown:\n    unknown_idata = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [omega, mu, chol, ab]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 03:15&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 196 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\nomega_hat_royle = [0.55]\naz.plot_trace(unknown_idata, var_names=['omega'], figsize=(8,2), \n              lines=[(\"omega\", {}, [omega_hat_royle])]);\n\n\n\n\n\n\n\nFigure 6: Trace plots for the inclusion parameter for the unknown \\(N\\) version of the BBS model. The estimate from Royle and Dorazio (2008) are shown by vertical and horizontal lines.\n\n\n\n\n\nI can plot the posterior distribution of species richness \\(N.\\) This is slightly more complicated than before sinc there is an additional level of zero-inflation (included and never detected or not-included) in this model compared to the occupancy model (present and never detection or not present).\n\n# relevant posterior samples\npost = az.extract(unknown_idata)\no_samps = post.omega.to_numpy()\npsi_samps = post.psi.to_numpy()[n:, :]\np_samps = post.p.to_numpy()[n:, :]\n\n# probability that the animal was never detected during the survey if present\np_not_detected = (1 - p_samps) ** K\n\n# probability of a zero detection history \np_zero_hist = psi_samps * p_not_detected + (1 - psi_samps)\n\n# probability that the species was included in the given the all-zero history\np_included = (o_samps * p_zero_hist ** J) / (o_samps * p_zero_hist ** J + (1 - o_samps))\n\n# posterior samples of N\nnumber_undetected = RNG.binomial(1, p_included).sum(axis=0)\nN_samps = n + number_undetected\n\np_samps.shape\n\n# posterior distribution \n# N_hat_royle = 138\n# fig, ax = plt.subplots(figsize=(6, 4))\n# ax.hist(N_samps, edgecolor='white', bins=25)\n# ax.set_xlabel('Species richness $N$')\n# ax.set_ylabel('Posterior samples')\n# ax.axvline(N_hat_royle, linestyle='--', color='C1')\n# ax.axvline(N_samps.mean(), linestyle='--', color='C2')\n# plt.show()\n\n\n\n(151, 1, 4000)\n\n\nFigure 7: Posterior distribution of species richness from the BBS model. The yellow dashed line is \\(\\hat{N}\\) from this model, while the red dashed line shows \\(\\hat{N}\\) from (royledorazio2008?)."
  },
  {
    "objectID": "notebooks.html",
    "href": "notebooks.html",
    "title": "Code",
    "section": "",
    "text": "Please find here any jupyter notebooks that I may have thought would be of general interest. For now, these are all about PyMC, a Python library for doing Bayesian analysis.\n\nPyMC\nThere are many valuable tools for fitting hierarchical models in ecology, including unmarked, JAGS, NIMBLE and Stan. These are, for the most part, R libraries or programs called from R. There are relatively fewer examples of how to fit these models in Python. While most ecologists use R, they may find some benefit from using Python. For example, despite ecology being a lucrative industry, some of us might have to pivot to another field where Python may be more common. Also, Python is widely used for machine learning, which is increasingly applied in ecology.\nIn the PyMC jupyter notebooks, I try to demonstrate how to use PyMC to train the most common hierarchical models in ecology. For this, I have drawn considerable inspiration from Royle and Dorazio (2008), Kéry and Schaub (2011), McCrea and Morgan (2014), and Hooten and Hefley (2019), oftentimes simply porting their code, ideas, and analyses. In doing so, I hope to demonstrate PyMC’s core features, and highlight its strengths and weakenesses. The PyMC notebooks are somewhat sequential, with earlier notebooks explaining more basic features.\n\n\n\n\n\nReferences\n\nHooten, Mevin B, and Trevor Hefley. 2019. Bringing Bayesian Models to Life. CRC Press.\n\n\nKéry, Marc, and Michael Schaub. 2011. Bayesian Population Analysis Using WinBUGS: A Hierarchical Perspective. Academic Press.\n\n\nMcCrea, Rachel S, and Byron JT Morgan. 2014. Analysis of Capture-Recapture Data. CRC Press.\n\n\nRoyle, J Andrew, and Robert M Dorazio. 2008. Hierarchical Modeling and Inference in Ecology: The Analysis of Data from Populations, Metapopulations and Communities. Elsevier.",
    "crumbs": [
      "Code"
    ]
  },
  {
    "objectID": "jssa.html",
    "href": "jssa.html",
    "title": "Jolly-Seber",
    "section": "",
    "text": "In this notebook, I explore the Jolly-Seber model (technically the JS-Schwarz-Arnason, JSSA or POPAN, parameterization) for estimating survival and abundance using capture recapture data. JSSA is very similar to the CJS framework, except that it also models entry into the population, permitting esimation of the superpopulation size. Like the CJS notebook, I have drawn considerable inspiration from Austin Rochford’s notebook on capture-recapture in PyMC, the second chapter of my dissertation, and McCrea and Morgan (2014).\nAs a demonstration of the JSSA framework, I use the classic European dipper data of Lebreton et al. (1992). I first convert the dataset into the \\(M\\)-array, since the data is in capture history format.\n\n%config InlineBackend.figure_format = 'retina'\n\nfrom pymc.distributions.dist_math import factln\nfrom scipy.linalg import circulant\n\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport arviz as az\nimport pymc as pm \nimport pytensor.tensor as pt\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\nplt.rcParams['axes.spines.left'] = False\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.spines.bottom'] = False\nsns.set_palette(\"tab10\")\n\ndef create_recapture_array(history):\n    \"\"\"Create the recapture array from a capture history.\"\"\"\n    _, occasion_count = history.shape\n    interval_count = occasion_count - 1\n\n    recapture_array = np.zeros((interval_count, interval_count), int)\n    for occasion in range(occasion_count - 1):\n\n        # which individuals, captured at t, were later recaptured?\n        captured_this_time = history[:, occasion] == 1\n        captured_later = (history[:, (occasion + 1):] &gt; 0).any(axis=1)\n        now_and_later = captured_this_time & captured_later\n        \n        # when were they next recaptured? \n        remaining_history = history[now_and_later, (occasion + 1):]\n        next_capture_occasion = (remaining_history.argmax(axis=1)) + occasion \n\n        # how many of them were there?\n        ind, count = np.unique(next_capture_occasion, return_counts=True)\n        recapture_array[occasion, ind] = count\n        \n    return recapture_array.astype(int)\n\ndef create_m_array(history):\n    '''Create the m-array from a capture history.'''\n\n    # leftmost column of the m-array\n    number_released = history.sum(axis=0)\n\n    # core of the m-array \n    recapture_array = create_recapture_array(history)\n    number_recaptured = recapture_array.sum(axis=1)\n\n    # no animals that were released on the last occasion are recaptured\n    number_recaptured = np.append(number_recaptured, 0)\n    never_recaptured = number_released - number_recaptured\n\n    # add a dummy row at the end to make everything stack \n    zeros = np.zeros(recapture_array.shape[1])\n    recapture_array = np.row_stack((recapture_array, zeros))\n\n    # stack the relevant values into the m-array \n    m_array = np.column_stack((number_released, recapture_array, never_recaptured))\n\n    return m_array.astype(int)\n\ndef fill_lower_diag_ones(x):\n    '''Fill the lower diagonal of a matrix with ones.'''\n    return pt.triu(x) + pt.tril(pt.ones_like(x), k=-1)\n\ndipper = np.loadtxt('dipper.csv', delimiter=',').astype(int)\ndipper[:5]\n\narray([[1, 1, 1, 1, 1, 1, 0],\n       [1, 1, 1, 1, 0, 0, 0],\n       [1, 1, 0, 0, 0, 0, 0],\n       [1, 1, 0, 0, 0, 0, 0],\n       [1, 1, 0, 0, 0, 0, 0]])\n\n\n\ndipper_m = create_m_array(dipper)\ndipper_m\n\n/var/folders/7b/nb0vyhy90mdf30_65xwqzl300000gn/T/ipykernel_56237/4130236403.py:61: DeprecationWarning: `row_stack` alias is deprecated. Use `np.vstack` directly.\n  recapture_array = np.row_stack((recapture_array, zeros))\n\n\narray([[22, 11,  2,  0,  0,  0,  0,  9],\n       [60,  0, 24,  1,  0,  0,  0, 35],\n       [78,  0,  0, 34,  2,  0,  0, 42],\n       [80,  0,  0,  0, 45,  1,  2, 32],\n       [88,  0,  0,  0,  0, 51,  0, 37],\n       [98,  0,  0,  0,  0,  0, 52, 46],\n       [93,  0,  0,  0,  0,  0,  0, 93]])\n\n\nThe JSSA model requires modeling the number of unmarked animals that were released during an occasion. We can calculate this using the \\(m\\)-array by subtracting the number of marked animals who were released from the total number of released animals.\n\nrecapture_array = create_recapture_array(dipper)\n\nnumber_released = dipper_m[:,0]\nnumber_marked_released = recapture_array.sum(axis=0)\n\n# shift number_released to get the years to align   \nnumber_unmarked_released = number_released[1:] - number_marked_released\n\n# add the number released on the first occasion \nnumber_unmarked_released = np.concatenate(\n    ([number_released[0]], number_unmarked_released)\n)\n\nnumber_unmarked_released\n\narray([22, 49, 52, 45, 41, 46, 39])\n\n\nSimilar to the CJS model, this model requires a number of tricks to vectorize the operations. Many pertain to the distribution of the unmarked individuals. Similar to occupancy notebook, I use a custom distribution to model the entrants into the population. Austin Rochford refers to this as an incomplete multinomial distribution.\n\nn, occasion_count = dipper.shape\ninterval_count = occasion_count - 1\n\n# generate indices for the m_array  \nintervals = np.arange(interval_count)\nrow_indices = np.reshape(intervals, (interval_count, 1))\ncol_indices = np.reshape(intervals, (1, interval_count))\n\n# matrix indicating the number of intervals between sampling occassions\nintervals_between = np.clip(col_indices - row_indices, 0, np.inf)\n\n# index for generating sequences like [[0], [0,1], [0,1,2]]\nalive_yet_unmarked_index = circulant(np.arange(occasion_count))\n\n\ndef logp(x, n, p):\n    \n    x_last = n - x.sum()\n    \n    # calculate thwe logp for the observations\n    res = factln(n) + pt.sum(x * pt.log(p) - factln(x)) \\\n            + x_last * pt.log(1 - p.sum()) - factln(x_last)\n    \n    # ensure that the good conditions are met.\n    good_conditions = pt.all(x &gt;= 0) & pt.all(x &lt;= n) & (pt.sum(x) &lt;= n) & \\\n                        (n &gt;= 0)\n    res = pm.math.switch(good_conditions, res, -np.inf)\n\n    return res\n\n\n# m-array for the CJS portion of the likelihood\ncjs_marr = dipper_m[:-1,1:]\ncjs_marr\n\narray([[11,  2,  0,  0,  0,  0,  9],\n       [ 0, 24,  1,  0,  0,  0, 35],\n       [ 0,  0, 34,  2,  0,  0, 42],\n       [ 0,  0,  0, 45,  1,  2, 32],\n       [ 0,  0,  0,  0, 51,  0, 37],\n       [ 0,  0,  0,  0,  0, 52, 46]])\n\n\nAside from the unmarked portion of the model, the JSSA model is essentially identical to the CJS model above. In this version, I also model survival as time-varying, holding other parameters constant \\(p(\\cdot)\\phi(t)b_0(\\cdot)\\)\n\n# JSSA produces this warning. it's unclear why since it samples well\nimport warnings\nwarnings.filterwarnings(\n    \"ignore\", \n    message=\"Failed to infer_shape from Op AdvancedSubtensor\"\n)\n\nwith pm.Model() as jssa:\n\n    ## Priors\n    \n    # catchability, survival, and pent\n    p = pm.Uniform('p', 0., 1.)\n    phi = pm.Uniform('phi', 0., 1., shape=interval_count)\n    b0 = pm.Uniform('b0', 0., 1.)\n    # beta = pm.Dirichlet('beta', np.ones(interval_count))\n    \n    # # only estimate first beta, others constant\n    b_other = (1 - b0) / (interval_count)\n    beta = pt.concatenate(\n        ([b0], pt.repeat(b_other, interval_count))\n    )\n\n    # improper flat prior for N\n    flat_dist = pm.Flat.dist()\n    total_captured = number_unmarked_released.sum()\n    N = pm.Truncated(\"N\", flat_dist, lower=total_captured)\n\n    ## Entry \n    \n    # add [1] to ensure the addition of the raw beta_0\n    p_alive_yet_unmarked = pt.concatenate(\n        ([1], pt.cumprod((1 - p) * phi))\n    )\n\n    # tril produces the [[0], [0,1], [0,1,2]] patterns for the recursion\n    psi = pt.tril(\n        beta * p_alive_yet_unmarked[alive_yet_unmarked_index]\n    ).sum(axis=1)\n\n    # distribution for the unmarked animals\n    unmarked = pm.CustomDist(\n        'Unmarked captures', \n        N, \n        psi * p, \n        logp=logp, \n        observed=number_unmarked_released\n    )\n\n    ## CJS\n    \n    # broadcast phi into a matrix \n    phi_mat = pt.ones_like(recapture_array) * phi\n    phi_mat = fill_lower_diag_ones(phi_mat) # fill irrelevant values \n    \n    # probability of surviving between i and j in the m-array \n    p_alive = pt.cumprod(phi_mat, axis=1)\n    p_alive = pt.triu(p_alive) # select relevant (upper triangle) values\n    \n    # p_not_cap: probability of not being captured between i and j\n    p_not_cap = pt.triu((1 - p) ** intervals_between)\n\n    # nu: probabilities associated with each cell in the m-array\n    nu = p_alive * p_not_cap * p\n\n    # probability for the animals that were never recaptured\n    chi = 1 - nu.sum(axis=1)\n\n    # combine the probabilities into a matrix\n    chi = pt.reshape(chi, (interval_count, 1))\n    marr_probs = pt.horizontal_stack(nu, chi)\n\n    # distribution of the m-array \n    marr = pm.Multinomial(\n        'M-array',\n        n=number_released[:-1], # last count irrelevant for CJS\n        p=marr_probs,\n        observed=cjs_marr\n    )\n\npm.model_to_graphviz(jssa)\n\n\n\n\n\n\n\nFigure 1: Visual representation of the JSSA model\n\n\n\n\n\n\nwith jssa:\n    jssa_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [p, phi, b0, N]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\n\nphi_mle = [0.63, 0.46, 0.48, 0.62, 0.61, 0.58]\np_mle = [0.9]\nb0_mle = [0.079]\nN_mle = [310]\n\naz.plot_trace(\n    jssa_idata, \n    figsize=(10, 8),\n    lines=[(\"phi\", {}, phi_mle), (\"p\", {}, [p_mle]), (\"N\", {}, [N_mle]), (\"b0\", {}, [b0_mle])] \n);\n\n\n\n\n\n\n\nFigure 2: Traceplots for the dipper JSSA model. MLEs from the openCR package shown by vertical and horizontal lines.\n\n\n\n\n\nThe traceplots include the maximum likelihood estimates from the model, which I estimated usingthe openCR package in R. Again, there is high level of agreement between the two methods. I plot the survival estimates over time, and the posterior draws of \\(N\\), \\(p\\), and \\(b\\).\n\nfig, ax = plt.subplots(figsize=(6,4))\n\nt = np.arange(1981, 1987)\n\nphi_samps = az.extract(jssa_idata, var_names='phi').values.T\nphi_median = np.median(phi_samps, axis=0)\n\nax.plot(t, phi_median, linestyle='dotted', color='lightgray', linewidth=2)\nax.violinplot(phi_samps, t, showmedians=True, showextrema=False)\n\nax.set_ylim((0,1))\n\nax.set_ylabel(r'Apparent survival $\\phi$')\nax.set_title(r'Dipper JSSA')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 3: Violin plots of the posterior for apparent surival over time from the cormorant CJS. Horizontal lines represent the posterior median.\n\n\n\n\n\n\npost = jssa_idata.posterior\n\n# stack the draws for each chain, creating a (n_draws, n_species) array \np_samps = post.p.to_numpy().flatten()\nN_samps = post.N.to_numpy().flatten()\nb_samps = post.b0.to_numpy().flatten()\n\n# create the plot\nfig, (ax0, ax1) = plt.subplots(1, 2, figsize=(8, 4), sharey=True)\n\n# add the scatter for each species\nalph = 0.2\nax0.scatter(p_samps, N_samps, s=5, alpha=alph)\n\nax0.spines.right.set_visible(False)\nax0.spines.top.set_visible(False)\n\nax0.set_ylabel(r'$N$')\nax0.set_xlabel(r'$p$')\n\nax1.scatter(b_samps, N_samps, s=5, alpha=alph)\n\nax1.set_xlabel(r'$b_0$')\n\nfig.suptitle('Dipper JSSA posterior draws')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Posterior draws of \\(N,\\) \\(b_0,\\) and \\(p\\) from the dipper JSSA model.\n\n\n\n\n\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w  \n\nLast updated: Thu Oct 09 2025\n\nPython implementation: CPython\nPython version       : 3.13.2\nIPython version      : 9.0.2\n\narviz     : 0.21.0\nnumpy     : 2.1.3\nscipy     : 1.15.2\npymc      : 5.22.0\nmatplotlib: 3.10.1\nseaborn   : 0.13.2\npytensor  : 2.30.2\n\nWatermark: 2.5.0\n\n\n\n\n\n\n\nReferences\n\nLebreton, Jean-Dominique, Kenneth P Burnham, Jean Clobert, and David R Anderson. 1992. “Modeling Survival and Testing Biological Hypotheses Using Marked Animals: A Unified Approach with Case Studies.” Ecological Monographs 62 (1): 67–118.\n\n\nMcCrea, Rachel S, and Byron JT Morgan. 2014. Analysis of Capture-Recapture Data. CRC Press.",
    "crumbs": [
      "Code",
      "PyMC",
      "Jolly-Seber"
    ]
  },
  {
    "objectID": "comparison.html",
    "href": "comparison.html",
    "title": "Model comparison",
    "section": "",
    "text": "In this notebook, I demonstrate an approach to model selection in PyMC. To do so, follow the lead of King and Brooks (2008), although not nearly as elegantly. They demonstrate an approach to model selection for a typical suite of closed capture-recapture models. These include the effects of behavior \\(b\\), time \\(t,\\) and individual heterogeneity \\(h\\) on capture probabilities \\(p\\). The eight models considered here are combinations of the three: \\(M_{0},\\) \\(M_{t},\\) \\(M_{b},\\) \\(M_{tb},\\) \\(M_{h},\\) \\(M_{th},\\) \\(M_{bh}\\). The full model, \\(M_{tbh}\\), is\n\\[\n\\begin{equation}\n\\text{logit} \\; p_{it} = \\mu + \\alpha_t + \\beta x_{it} + \\gamma_i,\n\\end{equation}\n\\] where \\(\\mu\\) is the average catchability, \\(\\alpha_t\\) is the effect of each occasion on catchability, \\(\\beta\\) is the behavioral effect, \\(x_{it}\\) indicates whether the individual has been previously caught, and \\(\\gamma_i\\) is the individual random effect such that \\(\\gamma_i \\sim \\text{Normal}(0,\\sigma)\\). Formulating the model this way makes the other models nested subsets of the full model.\nLike King and Brooks (2008), I use the the Moray Firth bottlenose dolphin data as a motivating example. Wilson, Hammond, and Thompson (1999) detected \\(n=56\\) dolphins over the course of \\(T=17\\) boat surveys between May and September 1992. They generated the capture-recapture histories by way of photo-identification, which is near and dear to my heart (and my dissertation).\n\n%config InlineBackend.figure_format = 'retina'\n\n# libraries \nimport numpy as np\nimport pandas as pd\nimport pymc as pm\nimport arviz as az\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom pymc.distributions.dist_math import binomln, logpow\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\npal = sns.color_palette(\"Set2\")\nsns.set_palette(pal)\n\n# hyperparameters \nSEED = 808\nRNG = np.random.default_rng(SEED)\n\ndef augment_history(history):\n    '''Augment a capture history with all-zero histories.'''\n    \n    animals_captured, T = history.shape\n\n    # create M - n all zero histories\n    zero_history_count = M - animals_captured\n    zero_history = np.zeros((zero_history_count, T))\n\n    # tack those on to the capture history\n    augmented = np.row_stack((history, zero_history))\n\n    return augmented \n\ndef get_behavior_covariate(history):\n    \n    # note the occasion when each individual was first seen\n    first_seen = (history != 0).argmax(axis=1)\n    \n    # create the covariate for the behavior effect\n    behavior_covariate = np.zeros_like(history)\n    for i, f in enumerate(first_seen):\n        behavior_covariate[i, (f + 1):] = 1\n\n    return behavior_covariate\n\ndef get_occasion_covariate(history):\n\n    _, T = history.shape\n    l = []\n    for t in range(T):\n        oc = np.zeros_like(history)\n        oc[:, t] = 1\n        l.append(oc)\n\n    return np.stack(l, axis=2)\n\ndef sim_N(idata):\n    \n    psi_samps = az.extract(idata).psi.values\n    p_samps = az.extract(idata).p.values\n    not_p = (1 - p_samps)\n    \n    if p_samps.ndim == 1:\n        p_included = psi_samps * (not_p) ** T \n        number_undetected = RNG.binomial(M - n, p_included)\n\n    elif p_samps.ndim == 3:\n        p_included = psi_samps * not_p.prod(axis=1)\n        number_undetected = RNG.binomial(1, p_included).sum(axis=0)\n\n    # N = n + number_undetected\n    N = RNG.binomial(M, psi_samps)\n    return N\n\n# convert the dolphin capture history from '1001001' to array\ndolphin = np.loadtxt('firth.txt', dtype=str)\ndolphin = np.array([list(map(int, d)) for d in dolphin])\n\n# augment the capture history with all zero histories\nn, T = dolphin.shape\nM = 500\ndolphin_augmented = augment_history(dolphin)\n\n# covariates for t and b\noccasion_covariate = get_occasion_covariate(dolphin_augmented)\nbehavior_covariate = get_behavior_covariate(dolphin_augmented)\n\n/var/folders/7b/nb0vyhy90mdf30_65xwqzl300000gn/T/ipykernel_56378/3418041078.py:32: DeprecationWarning: `row_stack` alias is deprecated. Use `np.vstack` directly.\n  augmented = np.row_stack((history, zero_history))\n\n\nThe discovery curve, the number of unique dolphins encountered as a function of the total number of dolphins encountered, may be flattening. This suggests that, at this point in the study, Wilson, Hammond, and Thompson (1999) may have encountered many of the unique individuals in the population.\n\n# how many dolphins have been seen?\ntotal_seen = dolphin.sum(axis=0).cumsum()\n\n# how many new dolphins have been seen?\nfirst_seen = (dolphin != 0).argmax(axis=1)\nnewbies = [sum(first_seen == t) for t in range(T)]\ntotal_newbies = np.cumsum(newbies)\n\nfig, ax = plt.subplots(figsize=(5, 3.5))\nax.plot(total_seen, total_newbies)\nax.fill_between(total_seen, total_newbies, alpha=0.2)\nax.set_title('Discovery curve')\nax.set_xlabel('Total dolphins')\nax.set_ylabel('Unique dolphins')\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Discovery curve for the Moray Firth bottlenose dolphin surveys (Wilson, Hammond, and Thompson 1999).\n\n\n\n\n\n\nTraining each model\nThis notebook looks messier than the others, in that I train several models with little commentary along the way. In practice, it would probably be better to wrap these up into a function or a class. To complete the model, I used the following priors, \\[\n\\begin{align}\n\\psi &\\sim \\text{Uniform}(0, 1)\\\\\n\\mu &\\sim \\text{Logistic}(0, 1) \\\\\n\\alpha_t &\\sim \\text{Normal}(0, \\sigma_{\\alpha}) \\\\\n\\beta &\\sim \\text{Normal}(0, \\sigma_{\\beta}) \\\\\n\\gamma_i &\\sim \\text{Normal}(0, \\sigma_{\\gamma}) \\\\\n\\sigma_{\\alpha} &\\sim \\text{InverseGamma}(4, 3) \\\\\n\\sigma_{\\beta} &\\sim \\text{InverseGamma}(4, 3) \\\\\n\\sigma_{\\gamma} &\\sim \\text{InverseGamma}(4, 3),\n\\end{align}\n\\] which were also used by King and Brooks (2008). Although note that I used an informative \\(\\text{Beta}(1, 5)\\) prior for \\(\\psi\\) in the full model (see below). I use the same logp seen in the occupancy and closed capture-recapture notebooks, which accounts for row-level zero-inflation. Unlike other notebooks, I did not look at the summaries or the trace plots unless the sampler indicated that it had issues during training.\nThroughout the notebook, I use the nutpie sampler within PyMC. Nutpie is a NUTS sampler written in Rust, and is often faster than PyMC. Also, I have tweaked the sampling keyword arguments for each model, since they are a little finicky.\n\ndef logp(value, n, p, psi):\n    \n    binom = binomln(n, value) + logpow(p, value) + logpow(1 - p, n - value)\n    bin_sum = pm.math.sum(binom, axis=1)\n    bin_exp = pm.math.exp(bin_sum)\n\n    res = pm.math.switch(\n        value.sum(axis=1) &gt; 0,\n        bin_exp * psi,\n        bin_exp * psi + (1 - psi)\n    )\n    \n    return pm.math.log(res)\n\n\nwith pm.Model() as m0:\n\n    # Priors\n    # inclusion\n    psi = pm.Uniform('psi', 0, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # Linear model\n    mu_matrix = (np.ones((T, M)) * mu).T\n    p = pm.Deterministic('p', pm.math.invlogit(mu_matrix))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(m0)\n\n\n\n\n\n\n\nFigure 2: Visual representation of model \\(M_{0}\\).\n\n\n\n\n\n\nwith m0:\n    m0_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\n\nwith pm.Model() as mt:\n\n    # Priors\n    # inclusion\n    psi = pm.Uniform('psi', 0, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # time effect\n    sigma_alpha = pm.InverseGamma('sigma_alpha', 4, 3)\n    alpha = pm.Normal('alpha', 0, pm.math.sqrt(sigma_alpha), shape=T)\n\n    # Linear model\n    # nu = mu + pm.math.dot(occasion_covariate, alpha)\n    nu = mu + alpha\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mt)\n\n\n\n\n\n\n\nFigure 3: Visual representation of model \\(M_t\\).\n\n\n\n\n\n\nwith mt:\n    mt_idata = pm.sample()\n    # pass\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_alpha, alpha]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\n\nwith pm.Model() as mb:\n\n    # Priors\n    # inclusion\n    psi = pm.Uniform('psi', 0, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n    \n    # behavior effect\n    sigma_beta = pm.InverseGamma('sigma_beta', 4, 3)\n    beta = pm.Normal('beta', 0, pm.math.sqrt(sigma_beta))\n\n    # Linear model\n    nu = mu + behavior_covariate * beta \n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mb)\n\n\n\n\n\n\n\nFigure 4: Visual representation of model \\(M_b\\).\n\n\n\n\n\n\nwith mb:\n    mb_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_beta, beta]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 6 seconds.\n\n\n\nwith pm.Model() as mtb:\n\n    # Priors\n    # inclusion\n    psi = pm.Uniform('psi', 0, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # time effect\n    sigma_alpha = pm.InverseGamma('sigma_alpha', 4, 3)\n    alpha = pm.Normal('alpha', 0, pm.math.sqrt(sigma_alpha), shape=T)\n\n    # behavior effect\n    sigma_beta = pm.InverseGamma('sigma_beta', 4, 3)\n    beta = pm.Normal('beta', 0, pm.math.sqrt(sigma_beta))\n\n    # Linear model\n    nu = mu + alpha + behavior_covariate * beta\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mtb)\n\n\n\n\n\n\n\nFigure 5: Visual representation of model \\(M_{tb}\\).\n\n\n\n\n\n\nwith mtb:\n    mtb_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_alpha, alpha, sigma_beta, beta]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 11 seconds.\n\n\n\nwith pm.Model() as mh:\n\n    # Priors\n    # inclusion\n    psi = pm.Uniform('psi', 0, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # individual effect\n    sigma_gamma = pm.InverseGamma('sigma_gamma', 4, 3)\n    gamma = pm.Normal('gamma', 0, pm.math.sqrt(sigma_gamma), shape=M)\n\n    # Linear model\n    individual_effect = (np.ones((T, M)) * gamma).T\n    nu = mu + individual_effect\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mh)\n\n\n\n\n\n\n\nFigure 6: Visual representation of model \\(M_h\\).\n\n\n\n\n\n\nwith mh:\n    mh_idata = pm.sample(3000, target_accept=0.99, )\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_gamma, gamma]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 3_000 draw iterations (4_000 + 12_000 draws total) took 51 seconds.\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\naz.summary(mh_idata, var_names=['psi', 'mu', 'sigma_gamma'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.185\n0.039\n0.122\n0.254\n0.002\n0.003\n454.0\n654.0\n1.00\n\n\nmu\n-2.794\n0.326\n-3.383\n-2.220\n0.020\n0.022\n290.0\n476.0\n1.00\n\n\nsigma_gamma\n0.776\n0.343\n0.296\n1.378\n0.026\n0.040\n186.0\n346.0\n1.01\n\n\n\n\n\n\n\n\naz.plot_trace(mh_idata, figsize=(8, 6), var_names=['psi', 'mu', 'sigma_gamma']);\n\n\n\n\n\n\n\n\n\nwith pm.Model() as mth:\n\n    # Priors\n    # inclusion\n    psi = pm.Beta('psi', 1, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # time effect\n    sigma_alpha = pm.InverseGamma('sigma_alpha', 4, 3)\n    alpha = pm.Normal('alpha', 0, pm.math.sqrt(sigma_alpha), shape=T)\n\n    # individual effect\n    sigma_gamma = pm.InverseGamma('sigma_gamma', 4, 3)\n    gamma = pm.Normal('gamma', 0, pm.math.sqrt(sigma_gamma), shape=M)\n\n    # Linear model\n    individual_effect = (np.ones((T, M)) * gamma).T\n    nu = mu + alpha + individual_effect\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mth)\n\n\n\n\n\n\n\nFigure 7: Visual representation of model \\(M_{th}\\).\n\n\n\n\n\n\nwith mth:\n    mth_idata = pm.sample(draws=3000, target_accept=0.95, )\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_alpha, alpha, sigma_gamma, gamma]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 3_000 draw iterations (4_000 + 12_000 draws total) took 70 seconds.\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\naz.summary(mth_idata, var_names=['psi', 'mu', 'sigma_alpha', 'sigma_gamma', 'alpha'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.178\n0.037\n0.116\n0.246\n0.002\n0.001\n456.0\n1141.0\n1.00\n\n\nmu\n-3.023\n0.416\n-3.815\n-2.276\n0.020\n0.009\n432.0\n1085.0\n1.00\n\n\nsigma_alpha\n0.922\n0.358\n0.380\n1.580\n0.004\n0.006\n8207.0\n8127.0\n1.00\n\n\nsigma_gamma\n0.834\n0.386\n0.284\n1.535\n0.028\n0.021\n166.0\n411.0\n1.01\n\n\nalpha[0]\n-1.092\n0.602\n-2.203\n0.042\n0.006\n0.006\n10758.0\n7569.0\n1.00\n\n\nalpha[1]\n0.578\n0.412\n-0.180\n1.363\n0.005\n0.004\n5863.0\n7139.0\n1.00\n\n\nalpha[2]\n-0.795\n0.552\n-1.858\n0.222\n0.005\n0.006\n10843.0\n7894.0\n1.00\n\n\nalpha[3]\n0.574\n0.416\n-0.217\n1.354\n0.006\n0.004\n5689.0\n6368.0\n1.00\n\n\nalpha[4]\n0.450\n0.416\n-0.344\n1.222\n0.005\n0.004\n6483.0\n7391.0\n1.00\n\n\nalpha[5]\n0.790\n0.398\n0.044\n1.526\n0.005\n0.004\n5660.0\n6592.0\n1.00\n\n\nalpha[6]\n0.187\n0.440\n-0.681\n0.981\n0.005\n0.004\n6643.0\n7041.0\n1.00\n\n\nalpha[7]\n0.028\n0.456\n-0.870\n0.843\n0.005\n0.004\n7421.0\n7254.0\n1.00\n\n\nalpha[8]\n-0.803\n0.571\n-1.837\n0.289\n0.006\n0.006\n10291.0\n7106.0\n1.00\n\n\nalpha[9]\n0.027\n0.462\n-0.833\n0.901\n0.005\n0.004\n7116.0\n7413.0\n1.00\n\n\nalpha[10]\n1.162\n0.382\n0.418\n1.851\n0.005\n0.004\n5120.0\n6521.0\n1.00\n\n\nalpha[11]\n-0.324\n0.496\n-1.271\n0.606\n0.006\n0.005\n7954.0\n7490.0\n1.00\n\n\nalpha[12]\n-1.094\n0.606\n-2.254\n0.004\n0.006\n0.006\n10460.0\n7921.0\n1.00\n\n\nalpha[13]\n-0.135\n0.469\n-1.007\n0.748\n0.006\n0.005\n6831.0\n7573.0\n1.00\n\n\nalpha[14]\n-1.100\n0.617\n-2.316\n-0.020\n0.006\n0.007\n9636.0\n7258.0\n1.00\n\n\nalpha[15]\n1.612\n0.366\n0.909\n2.289\n0.005\n0.004\n4548.0\n5553.0\n1.00\n\n\nalpha[16]\n-0.799\n0.564\n-1.852\n0.220\n0.006\n0.006\n10615.0\n8485.0\n1.00\n\n\n\n\n\n\n\n\naz.plot_trace(mth_idata, figsize=(8, 10),\n              var_names=['psi', 'mu', 'sigma_alpha', 'sigma_gamma', 'alpha']);\n\n\n\n\n\n\n\nFigure 8: Trace plots for model \\(M_{th}\\).\n\n\n\n\n\n\nwith pm.Model() as mbh:\n\n    # Priors\n    # inclusion\n    psi = pm.Beta('psi', 1, 1)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # behavior effect\n    sigma_beta = pm.InverseGamma('sigma_beta', 4, 3)\n    beta = pm.Normal('beta', 0, pm.math.sqrt(sigma_beta))\n    \n    # individual effect\n    sigma_gamma = pm.InverseGamma('sigma_gamma', 4, 3)\n    gamma = pm.Normal('gamma', 0, pm.math.sqrt(sigma_gamma), shape=M)\n\n    # Linear model\n    individual_effect = (np.ones((T, M)) * gamma).T\n    nu = mu + behavior_covariate * beta + individual_effect\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mbh)\n\n\n\n\n\n\n\nFigure 9: Visual representation of model \\(M_{bh}\\).\n\n\n\n\n\n\nwith mbh:\n    mbh_idata = pm.sample(draws=3000, target_accept=0.95, )\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_beta, beta, sigma_gamma, gamma]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 3_000 draw iterations (4_000 + 12_000 draws total) took 66 seconds.\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\naz.summary(mbh_idata, var_names=['psi', 'mu', 'beta', 'sigma_gamma'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.565\n0.190\n0.270\n0.945\n0.009\n0.003\n429.0\n1153.0\n1.01\n\n\nmu\n-3.534\n0.582\n-4.639\n-2.519\n0.033\n0.012\n311.0\n913.0\n1.01\n\n\nbeta\n-1.547\n0.257\n-2.020\n-1.055\n0.005\n0.002\n2386.0\n4089.0\n1.00\n\n\nsigma_gamma\n2.168\n0.745\n0.892\n3.583\n0.046\n0.023\n248.0\n494.0\n1.00\n\n\n\n\n\n\n\n\naz.plot_trace(mbh_idata, figsize=(8, 10),\n              var_names=['psi', 'mu', 'beta', 'sigma_beta', 'sigma_gamma']);\n\n\n\n\n\n\n\n\n\nwith pm.Model() as mtbh:\n\n    # Priors\n    # inclusion\n    psi = pm.Beta('psi', 1, 5)  \n\n    # mean catchability \n    mu = pm.Logistic('mu', 0, 1)\n\n    # time effect\n    sigma_alpha = pm.InverseGamma('sigma_alpha', 4, 3)\n    alpha = pm.Normal('alpha', 0, pm.math.sqrt(sigma_alpha), shape=T)\n\n    # behavior effect\n    sigma_beta = pm.InverseGamma('sigma_beta', 4, 3)\n    beta = pm.Normal('beta', 0, pm.math.sqrt(sigma_beta))\n\n    # individual effect\n    sigma_gamma = pm.InverseGamma('sigma_gamma', 4, 3)\n    gamma = pm.Normal('gamma', 0, pm.math.sqrt(sigma_gamma), shape=M)\n\n    # Linear model\n    individual_effect = (np.ones((T, M)) * gamma).T\n    nu = mu + alpha + behavior_covariate * beta + individual_effect\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # Likelihood \n    pm.CustomDist(\n        'y',\n        1,\n        p,\n        psi,\n        logp=logp,\n        observed=dolphin_augmented\n    )\n    \npm.model_to_graphviz(mtbh)\n\n\n\n\n\n\n\nFigure 10: Visual representation of model \\(M_{tbh}\\).\n\n\n\n\n\n\nwith mtbh:\n    mtbh_idata = pm.sample(draws=2000, )\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, mu, sigma_alpha, alpha, sigma_beta, beta, sigma_gamma, gamma]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 31 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\naz.summary(mtbh_idata, \n           var_names=['psi', 'mu', 'alpha', 'beta', 'sigma_alpha', 'sigma_beta', 'sigma_gamma'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.707\n0.102\n0.512\n0.887\n0.002\n0.001\n1824.0\n3394.0\n1.00\n\n\nmu\n-3.056\n0.471\n-3.928\n-2.167\n0.016\n0.008\n912.0\n2066.0\n1.00\n\n\nalpha[0]\n-3.102\n0.711\n-4.457\n-1.805\n0.013\n0.009\n3151.0\n4616.0\n1.00\n\n\nalpha[1]\n-0.665\n0.523\n-1.629\n0.313\n0.011\n0.006\n2377.0\n3946.0\n1.00\n\n\nalpha[2]\n-1.683\n0.668\n-2.880\n-0.388\n0.011\n0.008\n3614.0\n4168.0\n1.00\n\n\nalpha[3]\n-0.046\n0.496\n-0.908\n0.946\n0.010\n0.006\n2695.0\n3802.0\n1.00\n\n\nalpha[4]\n0.215\n0.500\n-0.737\n1.138\n0.009\n0.006\n3020.0\n4318.0\n1.00\n\n\nalpha[5]\n0.836\n0.462\n0.021\n1.753\n0.009\n0.006\n2693.0\n3856.0\n1.00\n\n\nalpha[6]\n0.379\n0.513\n-0.620\n1.310\n0.010\n0.007\n2900.0\n4100.0\n1.00\n\n\nalpha[7]\n0.374\n0.516\n-0.597\n1.358\n0.009\n0.006\n3504.0\n3556.0\n1.00\n\n\nalpha[8]\n-0.568\n0.666\n-1.869\n0.598\n0.010\n0.008\n4939.0\n5219.0\n1.00\n\n\nalpha[9]\n0.460\n0.528\n-0.496\n1.482\n0.010\n0.007\n3142.0\n3767.0\n1.00\n\n\nalpha[10]\n1.657\n0.439\n0.854\n2.512\n0.010\n0.006\n2050.0\n3259.0\n1.00\n\n\nalpha[11]\n0.142\n0.573\n-0.990\n1.163\n0.009\n0.007\n3851.0\n4859.0\n1.00\n\n\nalpha[12]\n-0.888\n0.745\n-2.263\n0.510\n0.010\n0.009\n6268.0\n5384.0\n1.00\n\n\nalpha[13]\n0.378\n0.560\n-0.661\n1.445\n0.010\n0.007\n3392.0\n4048.0\n1.00\n\n\nalpha[14]\n-0.868\n0.749\n-2.297\n0.477\n0.009\n0.010\n6773.0\n4831.0\n1.00\n\n\nalpha[15]\n2.237\n0.426\n1.433\n3.043\n0.010\n0.006\n1853.0\n2905.0\n1.00\n\n\nalpha[16]\n-0.266\n0.683\n-1.642\n0.940\n0.009\n0.009\n5455.0\n4903.0\n1.00\n\n\nbeta\n-3.269\n0.382\n-3.980\n-2.546\n0.009\n0.004\n1683.0\n4255.0\n1.00\n\n\nsigma_alpha\n1.555\n0.602\n0.601\n2.606\n0.010\n0.010\n3874.0\n5827.0\n1.00\n\n\nsigma_beta\n2.407\n1.602\n0.628\n4.913\n0.021\n0.067\n8327.0\n5247.0\n1.00\n\n\nsigma_gamma\n2.659\n0.655\n1.450\n3.861\n0.039\n0.019\n267.0\n505.0\n1.01\n\n\n\n\n\n\n\n\naz.plot_trace(mtbh_idata, figsize=(8,14),\n           var_names=['psi', 'mu', 'alpha', 'beta', 'sigma_alpha', 'sigma_beta', 'sigma_gamma']);\n\n\n\n\n\n\n\nFigure 11: Trace plots for the model with \\(M_{tbh}\\).\n\n\n\n\n\nThe trace plots and summary statistics show convergence issues for many of the individual heterogeneity models. The variance parameter, \\(\\sigma_{\\gamma},\\) seems to sample poorly. Further, models with both behavioral and individual effects lead to extremely large estimates of \\(\\psi\\). This appears to happen regardless of the size of the data augmentation \\(M.\\)\nNote that I upped the target_accept value for some models. This slows the sampler, but lowers the risk of divergence.\n\n\nModel comparison\nNext, I select a model for inference using an approximation of leave-one-out (loo) cross-validation (Vehtari, Gelman, and Gabry 2017). This approximation can be calculated using PyMC. To do so, I calculate the log-likelihood for each model, which is added to the InferenceData object. This makes it possible to compare the models using loo and az.compare.\n\nwith m0:\n    pm.compute_log_likelihood(m0_idata)\n\nwith mt:\n    pm.compute_log_likelihood(mt_idata)\n\nwith mb:\n    pm.compute_log_likelihood(mb_idata)\n\nwith mtb:\n    pm.compute_log_likelihood(mtb_idata)\n\nwith mh:\n    pm.compute_log_likelihood(mh_idata)\n\nwith mth:\n    pm.compute_log_likelihood(mth_idata)\n\nwith mbh:\n    pm.compute_log_likelihood(mbh_idata)\n\nwith mtbh:\n    pm.compute_log_likelihood(mtbh_idata)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodel_dict = {\"m0\": m0_idata, \"mt\": mt_idata, \"mb\": mb_idata, \n              \"mtb\": mtb_idata, \"mh\": mh_idata, \"mth\": mth_idata, \n              \"mbh\": mbh_idata, \"mtbh\": mtbh_idata}\n\ncomparison = az.compare(model_dict)\n\n/Users/philtpatton/source/repos/philpatton.github.io/.venv/lib/python3.13/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n/Users/philtpatton/source/repos/philpatton.github.io/.venv/lib/python3.13/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n/Users/philtpatton/source/repos/philpatton.github.io/.venv/lib/python3.13/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n/Users/philtpatton/source/repos/philpatton.github.io/.venv/lib/python3.13/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\nThe comparison tools notes issues with several of the models, suggesting a lack of robustness. Inspection of the comparison table shows that the struggling models all include the individual effect \\(h.\\) A more thorough analysis would consider reparameterizing the model, e.g., through the non-centered parameterization. In lieu of that, I simply discard the models that fail this test and re-do the comparison with the passing models.\n\ncomparison.round(2)\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nmtbh\n0\n-429.22\n84.61\n0.00\n0.98\n56.92\n0.00\nTrue\nlog\n\n\nmth\n1\n-489.28\n38.26\n60.06\n0.00\n58.92\n11.28\nTrue\nlog\n\n\nmtb\n2\n-492.47\n20.52\n63.25\n0.00\n61.85\n11.32\nFalse\nlog\n\n\nmt\n3\n-493.81\n14.26\n64.59\n0.00\n59.58\n12.51\nFalse\nlog\n\n\nmbh\n4\n-495.03\n69.35\n65.81\n0.00\n60.81\n11.41\nTrue\nlog\n\n\nmh\n5\n-519.67\n26.85\n90.45\n0.02\n61.72\n15.34\nTrue\nlog\n\n\nmb\n6\n-521.57\n5.54\n92.35\n0.00\n63.17\n15.47\nFalse\nlog\n\n\nm0\n7\n-522.49\n2.43\n93.28\n0.00\n62.05\n16.21\nFalse\nlog\n\n\n\n\n\n\n\n\ngood_dict = {\"m0\": m0_idata, \"mt\": mt_idata, \"mb\": mb_idata, \"mtb\": mtb_idata}\ngood_comparison = az.compare(good_dict)\ngood_comparison.round(2)\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nmtb\n0\n-492.47\n20.52\n0.00\n0.61\n61.85\n0.00\nFalse\nlog\n\n\nmt\n1\n-493.81\n14.26\n1.34\n0.39\n59.58\n6.41\nFalse\nlog\n\n\nmb\n2\n-521.57\n5.54\n29.10\n0.00\n63.17\n8.40\nFalse\nlog\n\n\nm0\n3\n-522.49\n2.43\n30.03\n0.00\n62.05\n10.10\nFalse\nlog\n\n\n\n\n\n\n\n\naz.plot_compare(good_comparison, figsize=(5, 4));\n\n\n\n\n\n\n\nFigure 12: Differences in the ELPD criteria, calculated using loo, for each model (Vehtari, Gelman, and Gabry 2017).\n\n\n\n\n\nThe comparison shows that all of the model weight belongs to two models: \\(M_t\\) and \\(M_{tb}.\\)\n\n\nModel averaged predictions\nFinally, we can use the model weights to simulate a weighted posterior of \\(N.\\) To do so, I take a weighted sample of each of the posteriors of \\(N,\\) with the weight dictated by the comparison tool.\n\nposteriors = [sim_N(good_dict[model]) for model in good_dict]\nweights = [good_comparison.loc[model].weight for model in good_dict]\nsample_count = len(posteriors[0])\n\nl = []\nfor w, p in zip(weights, posteriors):\n    weighted_sample = RNG.choice(p, size=int(w * sample_count))\n    l.append(weighted_sample)\n\nweighted_posterior = np.concatenate(l)\n\nfig, (ax0, ax1) = plt.subplots(2, 1, figsize=(7, 6), sharex=True, sharey=True, tight_layout=True)\n\npal = sns.color_palette(\"Set2\")\n\n# labs = [k for k in good_dict.keys()]\nlabs = [r'$M_{0}$', r'$M_{t}$', r'$M_{b}$', r'$M_{tb}$']\nfor i, p in enumerate(posteriors):\n    ax0.hist(p, color=pal[i], edgecolor='white', bins=60, alpha=0.6, label=labs[i])\n\nax0.set_title(r'Posteriors of $N$')\n# ax1.set_title(r'Weighted posterior')\n\nax0.set_xlim((53, 150))\nax0.legend()\n\nax0.set_ylabel('Number of samples')\nax1.set_ylabel('Number of samples')\n\nax1.hist(weighted_posterior, edgecolor='white', bins=60, alpha=0.9, color=pal[6], label='Weighted')\nax1.legend()\n\nplt.show()\n\n\n\n\n\n\n\nFigure 13: Posteriors of \\(N\\) from the four models under consideration (top panel), with the model averaged posterior (bottom panel).\n\n\n\n\n\nWe can also look at the posterior densities of \\(p\\) from Model \\(M_t,\\) the second most weighted model.\n\np_samps = az.extract(mt_idata).p\n\nfig, ax = plt.subplots(figsize=(6, 4))\n\na = 0.4\n# ax[0].set_title(\"Poisson\")\npal = sns.color_palette('viridis', T)\nfor t in range(T):\n    label_idx = t % 2\n    if label_idx == 0:\n        az.plot_dist(p_samps[t], ax=ax, color=pal[t], label=f'$t_{{{t}}}$',\n                     plot_kwargs={'linewidth':3, 'alpha': a})\n    else:\n        az.plot_dist(p_samps[t], ax=ax, color=pal[t],\n                     plot_kwargs={'linewidth':3, 'alpha': a})\n\nax.set_title(r'Posterior densities of $p$ from $M_t$')\nax.set_xlabel(r'$p$')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 14: Posteriors of \\(p\\) from model \\(M_t\\)\n\n\n\n\n\nThis notebook demonstrates a simple way to compare models using leave one out cross-validation (loo) and a classic example from capture-recapture. This is just one way, however, to perform model comparison using PyMC. Perhaps a more effective solution for this problem would be placing a shrinkage prior on the \\(\\sigma\\) parameters.\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w  \n\nLast updated: Thu Oct 09 2025\n\nPython implementation: CPython\nPython version       : 3.13.2\nIPython version      : 9.0.2\n\narviz     : 0.21.0\npandas    : 2.2.3\nseaborn   : 0.13.2\npymc      : 5.22.0\nmatplotlib: 3.10.1\nnumpy     : 2.1.3\n\nWatermark: 2.5.0\n\n\n\n\n\n\n\n\nReferences\n\nKing, Ruth, and SP2526632 Brooks. 2008. “On the Bayesian Estimation of a Closed Population Size in the Presence of Heterogeneity and Model Uncertainty.” Biometrics 64 (3): 816–24.\n\n\nVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical Bayesian Model Evaluation Using Leave-One-Out Cross-Validation and WAIC.” Statistics and Computing 27: 1413–32.\n\n\nWilson, Ben, Philip S Hammond, and Paul M Thompson. 1999. “Estimating Size and Assessing Trends in a Coastal Bottlenose Dolphin Population.” Ecological Applications 9 (1): 288–300.",
    "crumbs": [
      "Code",
      "PyMC",
      "Model comparison"
    ]
  },
  {
    "objectID": "distance.html",
    "href": "distance.html",
    "title": "Distance sampling",
    "section": "",
    "text": "In this notebook, I explore how to fit distance sampling models for estimating the size of a closed population. Similar to the occupancy and closed capture-recapture notebooks, I use parameter-expanded data-augmentation (PX-DA) and the zero-inflated binomial model in this notebook.\nThe idea with distance sampling, also known as line-transect sampling, is that a surveyer traverses a transect, typically in a boat or a plane. As they survey, they note when they detect an individual, or a group, from the species of interest, and further note the distance from the transect to the animal. Further, they note the angle to the animal(s), such that they can calculate the perpendicular distance from the animal to the transect. We assume that probability of detecting an animal \\(p\\) decreases monotonically as the distance from the transect grows, e.g., \\(p=\\exp(-x^2/\\sigma^2),\\) where \\(x\\) is the distance and \\(\\sigma\\) is a scale parameter to be estimated. These simple assumptions permit the estimation of the population size \\(N\\) as well as density \\(D.\\)\nFollowing Hooten and Hefley (2019), Chapter 24 and Royle and Dorazio (2008), Chapter 7, I use the impala data from Burnham, Anderson, and Laake (1980), who credits P. Hemingway with the dataset. In this dataset, 73 impalas were observed along a 60km transect. The distance values below are the perpendicular distances, in meters, from the transect.\n\n%config InlineBackend.figure_format = 'retina'\nfrom scipy.stats import binom\nimport arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pymc as pm\nimport pytensor.tensor as pt\nimport seaborn as sns\n\n# plotting defaults\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\nplt.rcParams['axes.spines.left'] = False\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.spines.bottom'] = False\nsns.set_palette(\"tab10\")\n\n# hyper parameters\nM = 500\nU_X = 400\nU_SIGMA = 400\n\n# burnham impala dataset with distances in m\nx_observed = np.array(\n    [71.933980, 26.047227, 58.474341, 92.349221, 163.830409, 84.523652\n    ,163.830409, 157.330098, 22.267696, 72.105330, 86.986979, 50.795047\n    ,0.000000, 73.135370,  0.000000, 128.557522, 163.830409,  71.845104\n    ,30.467336, 71.073909, 150.960702, 68.829172, 90.000000, 64.983827\n    ,165.690874, 38.008322, 378.207430, 78.146226, 42.127052, 0.000000\n    ,400.000000, 175.386612, 30.467336, 35.069692, 86.036465, 31.686029\n    ,200.000000, 271.892336, 26.047227, 76.604444, 41.042417, 200.000000\n    ,86.036465, 0.000000, 93.969262, 55.127471, 10.458689, 84.523652\n    ,0.000000, 77.645714, 0.000000, 96.418141, 0.000000, 64.278761\n    ,187.938524, 0.000000, 160.696902, 150.453756, 63.603607, 193.185165\n    ,106.066017, 114.906666, 143.394109, 128.557522, 245.745613, 123.127252\n    ,123.127252, 153.208889, 143.394109, 34.202014, 96.418141, 259.807621\n    ,8.715574]\n)\n\n# plot the distances \nfig, ax = plt.subplots(figsize=(4,4))\n\nax.hist(x_observed, edgecolor='white')\n\nax.set_title('Hemingway Impala Data')\nax.set_ylabel('Number of detections')\nax.set_xlabel('Distance (m)')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 1: Histogram of the number of detected impalas at varying distances.\n\n\n\n\n\nAgain, we treat this as a zero-inflated binomial model using PX-DA. The trick for doing so is to create a binary vector of length \\(M\\), \\(y,\\) that represents whether the individual was detected during the study. Then, combine the indicator with the distance vector \\(x\\) to create a the full dataset \\((x,y).\\)\n\nn = len(x_observed)\nunobserved_count = M - n\nzeros = np.zeros(unobserved_count)\n\ny = np.ones(n)\ny_augmented = np.concatenate((y, zeros))\n\nThe issue is that \\(x\\) is unobserved for the undetected individuals. To work around this, we put a uniform prior on the unobserved \\(x,\\) i.e., \\(x \\sim \\text{Uniform}(0, U_x).\\) With this “complete” \\(x,\\) we can construct the detection function \\(p\\) for the unobserved individuals.\n\nwith pm.Model() as distance:\n    \n    psi = pm.Beta('psi', 0.001, 1)\n    sigma = pm.Uniform('sigma', 0, U_SIGMA)\n    \n    x_unobserved = pm.Uniform('x_unobserved', 0, U_X, shape=unobserved_count)\n    x_complete = pt.concatenate((x_observed, x_unobserved))\n\n    p = pm.Deterministic('p', pm.math.exp(- x_complete ** 2 / sigma ** 2))\n    \n    pm.ZeroInflatedBinomial('y', p=p, psi=psi, n=1, observed=y_augmented)\n\npm.model_to_graphviz(distance)\n\n\n\n\n\n\n\nFigure 2: Visual representation of the distance sampling model.\n\n\n\n\n\n\nwith distance:\n    distance_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, sigma, x_unobserved]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n\n\n\naz.plot_trace(\n    distance_idata, \n    figsize=(8,4),\n    var_names=['psi', 'sigma']\n)\nplt.subplots_adjust(hspace=0.4)\nplt.show()\n\n\n\n\n\n\n\nFigure 3: Traceplots for the distance sampling model.\n\n\n\n\n\nThis model samples slower than the models in the other notebooks, presumably because of the unobserved \\(x.\\) As in the closed capture-recapture notebook, we will have to simulate the posterior for \\(N\\) using the posterior distribution of \\(\\psi\\) and \\(M.\\)\n\nRNG = np.random.default_rng()\n\n# extract the posterior samples into numpy arrays\nposterior = az.extract(distance_idata)\npsi_samples = posterior.psi.to_numpy()\n\n# only interested in the unobserved animals\np_samples = posterior.p.to_numpy()[n:]\n\n# posterior probabilities of being present in the population but not detected\np_if_present = psi_samples * binom.pmf(0, n=1, p=p_samples)\np_total = p_if_present + (1 - psi_samples)\n\n# simulate the latent inclusion state \nZ = RNG.binomial(1, p_if_present / p_total)\nnumber_undetected = Z.sum(axis=0)\n\n# # # compute the total number of animals in the population\nN_samples = n + number_undetected\n\n\n# plot the posterior distributions\nsigma_samples = posterior.sigma.to_numpy()\nfig, (ax0, ax1) = plt.subplots(1, 2, sharey=True, figsize=(8,4))\n\n# histograms of the posteriors\nax0.hist(N_samples, edgecolor='white', bins=30)\nax1.hist(sigma_samples, edgecolor='white', bins=30)\n\n# axes labels \nax0.set_xlabel(r'Abundance $N$')\nax0.set_ylabel('Number of samples')\nax1.set_xlabel(r'Detection range $\\sigma$')\n\n# add the point estimates\nN_hat = N_samples.mean()\nsigma_hat = sigma_samples.mean()\nax0.text(200, 350, rf'$\\hat{{N}}$={N_hat:.1f}', ha='left', va='center')\nax1.text(205, 350, rf'$\\hat{{\\sigma}}$={sigma_hat:.1f}', ha='left', va='center')\n\n# the results from royle and dorazio (2008) for comparison\nN_hat_royle = 179.9\nsigma_hat_royle = 187\n\nax0.axvline(N_hat_royle, linestyle='--', linewidth=3, color='C1')\nax1.axvline(sigma_hat_royle, linestyle='--', linewidth=3, color='C1')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Posterior distributions for \\(N\\) and \\(\\sigma.\\) Estimates from Royle and Dorazio (2008) are shown with vertical lines.\n\n\n\n\n\nThe model shows a high level of agreement with Royle and Dorazio (2008), Chapter 7, although note that they reported \\(\\sigma\\) in terms of 100m units. It is also possible to plot the posterior distribution of the detection function.\n\nxx = np.arange(400)\n\ndef det_func(x, s):\n    return np.exp(- (x ** 2) / (s ** 2))\n\np_samps = np.array([det_func(xx, s) for s in sigma_samples])\n\np_mean = p_samps.mean(axis=0)\np_low = np.quantile(p_samps, 0.02, axis=0)\np_high = np.quantile(p_samps, 0.98, axis=0)\n\nfig, ax = plt.subplots(figsize=(5,4))\n\nax.plot(xx, p_mean, '-')\nax.fill_between(xx, p_low, p_high, alpha=0.2)\n\nax.set_title('Detection function')\nax.set_ylabel(r'$p$')\nax.set_xlabel(r'Distance (m)')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 5: Posterior distribution for the detection function. The line represents the posterior mean while the shaded area is the 96% interval.\n\n\n\n\n\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w  \n\nLast updated: Thu Oct 09 2025\n\nPython implementation: CPython\nPython version       : 3.13.2\nIPython version      : 9.0.2\n\npytensor  : 2.30.2\nmatplotlib: 3.10.1\narviz     : 0.21.0\nseaborn   : 0.13.2\nnumpy     : 2.1.3\npymc      : 5.22.0\n\nWatermark: 2.5.0\n\n\n\n\n\n\n\nReferences\n\nBurnham, Kenneth P, David R Anderson, and Jeffrey L Laake. 1980. “Estimation of Density from Line Transect Sampling of Biological Populations.” Wildlife Monographs, no. 72: 3–202.\n\n\nHooten, Mevin B, and Trevor Hefley. 2019. Bringing Bayesian Models to Life. CRC Press.\n\n\nRoyle, J Andrew, and Robert M Dorazio. 2008. Hierarchical Modeling and Inference in Ecology: The Analysis of Data from Populations, Metapopulations and Communities. Elsevier.",
    "crumbs": [
      "Code",
      "PyMC",
      "Distance sampling"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Philip T. Patton",
    "section": "",
    "text": "Phil is a quantitative ecologist with the Migratory Bird Center at the Smithsonian’s National Zoo and Conservation Biology Institute. For this postdoctoral appointment, he will help the National Park Service improve inventory and monitoring programs, under the guidance of J. Andrew Royle (USGS) and T. Scott Sillett (Smithsonian).\nFor his dissertation, he researched ways to improve stock assessments of non-migratory dolphins in Hawaiʻi. This included automating photo-identification of these animals, understanding how these automated tools interact with capture-recapture models, and estimating demographic parameters using cutting edge methods in capture recapture. He was a NOAA QUEST Fellow, under the Marine Mammal Research Program at the University of Hawai`i and the Cetacean Research Program at the Pacific Islands Fisheries Science Center.\nHe did his master’s with Krishna Pacifici at North Carolina State University, where he studied ways to improve estimates of species distribution, particularly when species interact and when the data contains sampling errors.\nFeel free to email me at philtpatton@gmail.com if you would like to get in touch."
  },
  {
    "objectID": "cjs.html",
    "href": "cjs.html",
    "title": "Cormack-Jolly-Seber",
    "section": "",
    "text": "In this notebook, I explore the Cormack-Jolly-Seber (CJS) model for estimating survival using capture-recapture data in PyMC. I have drawn considerable inspiration from Austin Rochford’s notebook on capture-recapture in PyMC, the second chapter of my dissertation (a work in progress), and McCrea and Morgan (2014).\n\nCormack-Jolly-Seber\nThe goal of the CJS model is to estimate survival, accounting for capture probabilities being less than one. There are many methods for estimating parameters in the model, including state-space formulations that explicitly model the latent alive/dead state \\(z.\\) Following the theme of the previous notebooks, I instead marginalize this variable out of the model by using the so-called \\(M\\)-array. This is an array that contains the sufficient statistics for the CJS models. For example, \\(m_{1,2}\\) is the number of individuals that were released on at \\(t=1\\) and were first recaptured on \\(t=2.\\)\n\nAn example of the M-array from a four year capture-recapture survey. The number recaptured, \\(m_{i,j}\\) refers to the number of individuals released at \\(i\\) who were first recaptured at time \\(j\\).\n\n\n\n\n\n\n\n\n\n\n\nNumber Released\n\nNumber recaptured\n\nNever recaptured\n\n\n\n\n\n\n1982\n1983\n1984\n\n\n\n1981\n\\(R_1\\)\n\\(m_{1,2}\\)\n\\(m_{1,3}\\)\n\\(m_{1,4}\\)\n\\(R_1-m_{1\\cdot}\\)\n\n\n1982\n\\(R_2\\)\n\n\\(m_{2,3}\\)\n\\(m_{2,3}\\)\n\\(R_2-m_{2\\cdot}\\)\n\n\n1983\n\\(R_3\\)\n\n\n\\(m_{3,4}\\)\n\\(R_3-m_{3\\cdot}\\)\n\n\n\n\n%config InlineBackend.figure_format = 'retina'\nfrom pymc.distributions.dist_math import factln\nfrom scipy.linalg import circulant\n\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport arviz as az\nimport pymc as pm \nimport pytensor.tensor as pt\n\n# plt.rcParams['figure.dpi'] = 600\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.facecolor'] = 'white'\nplt.rcParams['figure.facecolor'] = 'white'\nplt.rcParams['axes.spines.left'] = False\nplt.rcParams['axes.spines.right'] = False\nplt.rcParams['axes.spines.top'] = False\nplt.rcParams['axes.spines.bottom'] = False\nsns.set_palette(\"tab10\")\n\ndef create_recapture_array(history):\n    \"\"\"Create the recapture array from a capture history.\"\"\"\n    _, occasion_count = history.shape\n    interval_count = occasion_count - 1\n\n    recapture_array = np.zeros((interval_count, interval_count), int)\n    for occasion in range(occasion_count - 1):\n\n        # which individuals, captured at t, were later recaptured?\n        captured_this_time = history[:, occasion] == 1\n        captured_later = (history[:, (occasion + 1):] &gt; 0).any(axis=1)\n        now_and_later = captured_this_time & captured_later\n        \n        # when were they next recaptured? \n        remaining_history = history[now_and_later, (occasion + 1):]\n        next_capture_occasion = (remaining_history.argmax(axis=1)) + occasion \n\n        # how many of them were there?\n        ind, count = np.unique(next_capture_occasion, return_counts=True)\n        recapture_array[occasion, ind] = count\n        \n    return recapture_array.astype(int)\n\ndef create_m_array(history):\n    '''Create the m-array from a capture history.'''\n\n    # leftmost column of the m-array\n    number_released = history.sum(axis=0)\n\n    # core of the m-array \n    recapture_array = create_recapture_array(history)\n    number_recaptured = recapture_array.sum(axis=1)\n\n    # no animals that were released on the last occasion are recaptured\n    number_recaptured = np.append(number_recaptured, 0)\n    never_recaptured = number_released - number_recaptured\n\n    # add a dummy row at the end to make everything stack \n    zeros = np.zeros(recapture_array.shape[1])\n    recapture_array = np.row_stack((recapture_array, zeros))\n\n    # stack the relevant values into the m-array \n    m_array = np.column_stack((number_released, recapture_array, never_recaptured))\n\n    return m_array.astype(int)\n\ndef fill_lower_diag_ones(x):\n    '''Fill the lower diagonal of a matrix with ones.'''\n    return pt.triu(x) + pt.tril(pt.ones_like(x), k=-1)\n\nAs an example, I use the cormorant data from McCrea and Morgan (2014), Table 4.6. These data come from an eleven year capture-recapture study between 1982 and 1993. These were breeding cormorants of unknown age. The data is summarized in the \\(M\\)-array below. The last column is the number that were never recapured. The number released can be calculated from the array.\n\ncormorant = np.array([\n       [ 10,   4,   2,   2,   0,   0,   0,   0,   0,   0,  12],\n       [  0,  42,  12,  16,   1,   0,   1,   1,   1,   0,  83],\n       [  0,   0,  85,  22,   5,   5,   2,   1,   0,   1,  53],\n       [  0,   0,   0, 139,  39,  10,  10,   4,   2,   0,  94],\n       [  0,   0,   0,   0, 175,  60,  22,   8,   4,   2, 199],\n       [  0,   0,   0,   0,   0, 159,  46,  16,   5,   2, 193],\n       [  0,   0,   0,   0,   0,   0, 191,  39,   4,   8, 171],\n       [  0,   0,   0,   0,   0,   0,   0, 188,  19,  23, 284],\n       [  0,   0,   0,   0,   0,   0,   0,   0, 101,  55, 274],\n       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  84,  97]])\n\n\ninterval_count, T = cormorant.shape\n\nnumber_recaptured = cormorant[:,:-1]\nnever_recaputured = cormorant[:,-1]\nnumber_released = number_recaptured.sum(axis=1) + never_recaputured\n\nThis PyMC model will look different than the ones in previous notebooks, simply because it requires many tricks to get the probabilities in the correct format for the \\(m\\)-array, then modeling the \\(m\\)-array as a multinomial with the associated cell probabilities. These probabilities correspond to the situations in the \\(m\\)-array, such as the probability that an animal survived and was not recaptured until a later date. In this example, I model survival as time-varying, i.e., \\(\\phi(t).\\)\n\n# utility vectors for creating arrays and array indices\nintervals = np.arange(interval_count)\nrow_indices = np.reshape(intervals, (interval_count, 1))\ncol_indices = np.reshape(intervals, (1, interval_count))\n\n# matrix indicating the number of intervals between sampling occassions\nintervals_between = np.clip(col_indices - row_indices, 0, np.inf)\n\nwith pm.Model() as phit:\n\n    # priors for catchability and survival \n    p = pm.Uniform('p', 0, 1)\n    phi = pm.Uniform('phi', 0, 1, shape=interval_count)\n\n    # broadcast phi into a matrix \n    phi_mat = pt.ones_like(number_recaptured) * phi\n    phi_mat = fill_lower_diag_ones(phi_mat) # fill irrelevant values \n    \n    # probability of surviving between i and j in the m-array \n    p_alive = pt.cumprod(phi_mat, axis=1)\n    p_alive = pt.triu(p_alive) # select relevant (upper triangle) values\n\n    # probability of not being captured between i and j\n    p_not_cap = pt.triu((1 - p) ** intervals_between)\n\n    # probabilities associated with each cell in the m-array\n    nu = p_alive * p_not_cap * p\n\n    # probability for the animals that were never recaptured\n    chi = 1 - nu.sum(axis=1)\n\n    # combine the probabilities into a matrix\n    chi = pt.reshape(chi, (interval_count, 1))\n    marr_probs = pt.horizontal_stack(nu, chi)\n\n    # distribution of the m-array \n    marr = pm.Multinomial(\n        'M-array',\n        n=number_released,\n        p=marr_probs,\n        observed=cormorant\n    )\n\npm.model_to_graphviz(phit)\n\n\n\n\n\n\n\nFigure 1: Visual representation of the CJS model\n\n\n\n\n\n\nwith phit:\n    cjs_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [p, phi]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\n\nmccrea_p = [0.51]\nmccrea_phi = [0.79, 0.56, 0.83, 0.86, 0.73, 0.70, 0.81, 0.64, 0.46, 0.95]\n\naz.plot_trace(\n    cjs_idata, \n    figsize=(10, 4),\n    lines=[(\"phi\", {}, [mccrea_phi]), (\"p\", {}, [mccrea_p])] \n);\n\n\n\n\n\n\n\nFigure 2: Traceplots for the cormorant CJS model with \\(p(\\cdot)\\phi(t)\\). MLEs from McCrea and Morgan (2014) shown by vertical and horizontal lines.\n\n\n\n\n\nThe model samples fairly quickly in this parameterization. The traceplots above include comparisons to the estimates from McCrea and Morgan (2014). While a bit messy, the plots show a high level of agreement between their estimates and the ones here. To clean things up a bit, I plot the estimates for \\(\\phi\\) over time, along with the 94% credible intervals\n\nfig, ax = plt.subplots(figsize=(6,4))\n\nt = np.arange(1983, 1993)\n\nphi_samps = az.extract(cjs_idata, var_names='phi').values.T\nphi_median = np.median(phi_samps, axis=0)\n\nax.plot(t, phi_median, linestyle='dotted', color='lightgray', linewidth=2)\nax.violinplot(phi_samps, t, showmedians=True, showextrema=False)\n\nax.set_ylim((0,1))\n\nax.set_ylabel(r'Apparent survival $\\phi$')\nax.set_title(r'Cormorant CJS')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 3: Violin plots of the posterior for apparent surival over time from the cormorant CJS. Horizontal lines represent the posterior median.\n\n\n\n\n\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w \n\nLast updated: Thu Oct 09 2025\n\nPython implementation: CPython\nPython version       : 3.13.2\nIPython version      : 9.0.2\n\nmatplotlib: 3.10.1\npytensor  : 2.30.2\narviz     : 0.21.0\npymc      : 5.22.0\nnumpy     : 2.1.3\nscipy     : 1.15.2\nseaborn   : 0.13.2\n\nWatermark: 2.5.0\n\n\n\n\n\n\n\n\nReferences\n\nMcCrea, Rachel S, and Byron JT Morgan. 2014. Analysis of Capture-Recapture Data. CRC Press.",
    "crumbs": [
      "Code",
      "PyMC",
      "Cormack-Jolly-Seber"
    ]
  },
  {
    "objectID": "defense.html",
    "href": "defense.html",
    "title": "Dissertation Defense",
    "section": "",
    "text": "Please find a recording of my defense here.\n\nMy dissertation defense is scheduled for Friday, August 29th, 2025 at 2:30PM Hawaiian Standard Time. Please join in-person if you can! The talk will be in the Marine Science Building, Room 100, on the University of Hawaiʻi, Mānoa campus. There will be a pau hana afterwards with drinks and snacks.\nThanks to my former labmate, Dr. Brijonnay Madrigal, for putting together the following summary of the parking situation.\nZones 17 and 13 are the two locations you can park in (see map below). Zone 17 is in the structure and is a $5 flat-rate (pay at entrance kiosk) and you will just have to walk across Dole street and through lower campus to get to the Marine Sciences Building (MSB). It is about a 7-min walk from the parking structure. The other option is to park in Zone 13 in the green, visitor stalls which is closer to MSB but more expensive ($3 per 1/2 hour).\n\n\n\nVisitor parking map, with annotations by Bri\n\n\n\nRemote attendance\nTo attend remotely, click this link to follow along with the slides. (Link to slides to follow!) When I advance the slides, it will advance the slides in your browser window.\nTo see and hear me, please follow this Zoom link.\n\nJoin Zoom Meeting  https://hawaii.zoom.us/j/86718282355\nMeeting ID: 867 1828 2355 Passcode: MBIOPP"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "Philip T. Patton",
    "section": "",
    "text": "Downloadable version"
  },
  {
    "objectID": "cv.html#education",
    "href": "cv.html#education",
    "title": "Philip T. Patton",
    "section": "Education",
    "text": "Education\n\nPh.D., Marine Biology, Hawaiʻi Institute of Marine Biology, 2025\n\nChair: Lars Bejder\n\nM.S., Fisheries, Wildlife, and Conservation Biology, North Carolina State University, 2016\n\nChair: Krishna Pacifici\n\nB.S., Conservation Biology, SUNY College of Environmental Science and Forestry, 2013"
  },
  {
    "objectID": "cv.html#research-experience",
    "href": "cv.html#research-experience",
    "title": "Philip T. Patton",
    "section": "Research Experience",
    "text": "Research Experience\n\nQuantitative Ecologist, Migratory Bird Center, Smithsonian’s National Zoo and Conservation Biology Institute, 2025 - Present\nNOAA QUEST Fellow, Pacific Islands Fisheries Science Center, NOAA Fisheries, 2021 - 2025\nGraduate Research Assistant, Hawaiʻi Institute of Marine Biology, University of Hawaiʻi at Mānoa, 2021 - Present\nGraduate Research Assistant, Quantitative Ecology & Resource Management, University of Washington, 2016 - 2017\nGraduate Research Assistant, Applied Ecology, North Carolina State University, 2014 - 2016"
  },
  {
    "objectID": "cv.html#professional-experience",
    "href": "cv.html#professional-experience",
    "title": "Philip T. Patton",
    "section": "Professional Experience",
    "text": "Professional Experience\n\nData Analyst, Health Services, Deschutes County, 2020 - 2021\nData Analyst, Supply Chain AI & Machine Learning, Starbucks Coffee Company, 2019\nQuantitative Analyst, Seattle City Light, City of Seattle, 2017 - 2019"
  },
  {
    "objectID": "cv.html#grants-awards-and-fellowships",
    "href": "cv.html#grants-awards-and-fellowships",
    "title": "Philip T. Patton",
    "section": "Grants, Awards, and Fellowships",
    "text": "Grants, Awards, and Fellowships\n\nPeter Castro Graduate Student Research Fund, Hawai‘i Institute of Marine Biology, 2025, $1100\nColonel Willys E. & Sandina L. Lord Endowed Scholarship, Hawai‘i Institute of Marine Biology, 2024, $500\nBest Student Poster: 2nd Place, International Statistical Ecology Conference, 2024\nPeter Castro HIMB Graduate Student Support Fund - Travel, Hawaiʻi Institute of Marine Biology, 2023, $500\nLinda and Jim Collister Scholarship, Hawaiʻi Institute of Marine Biology, 2023, $1,000\nQuantitative Ecology and Socioeconomic Training Fellowship (QUEST), NOAA Fisheries, 2021 to present, $180,000\nAchievement Scholarship, University of Hawaiʻi at Mānoa, 2023, $500\nColonel Willys E. & Sandina L. Lord Endowed Scholarship, Hawaiʻi Institute of Marine Biology, 2022, $2,000\nStudent Travel Award, University of Washington, 2017, $500\nStudent and Postdoc Travel Award, University of Washington, 2017, $750\nTravel Award, University of Washington, 2017, $500\nGlobal Change Fellowship, USGS, 2015 to 2016, $12,000"
  },
  {
    "objectID": "cv.html#papers",
    "href": "cv.html#papers",
    "title": "Philip T. Patton",
    "section": "Papers",
    "text": "Papers\n\nParnell, K., Smith, C., Diaz, A., Fertitta, K., Thompson, P., Patton, P.T., Charrier, I., Robinson, S., Pacini, A., & Bejder, L. (2025). Underwater sound production of free-ranging Hawaiian monk seals. . In press.\nBrijs, J., Moore, C., Schakmann, M., Souza, T., Grellman, K., Tran, L.L., Patton, P.T., and Johansen, J.L. (2025) Eat more, often: The capacity of piscivores to meet increased energy demands in warming oceans. Science of the Total Environment, 973, 179105. PDF\nPatton, P. T., Pacifici, K., Baird, R. W., Oleson, E. M., Allen, J. B., Ashe, E., Athayde, A., Basran, C. J., Cabrera, E., Calambokidis, J., Cardoso, J., Carroll, E. L., Cesario, A., Cheney, B. J., Cheeseman, T., Corsi, E., Currie, J. J., Durban, J. W., Falcone, E. A., …, Bejder, L. (2024). Optimizing automated photo-identification for population assessments. Conservation Biology, e14436 PDF\nPatton, P. T., Cheeseman, T., Abe, K., Yamaguchi, T., Reade, W., Southerland, K., Howard, A., Oleson, E. M., Allen, J. B., Ashe, E., Athayde, A., Baird, R. W., Basran, C., Cabrera, E., Calambokidis, J., Cardoso, J., Carroll, E. L., Cesario, A., Cheney, B. J. …, Bejder, L. (2023). A deep learning approach to photo‑identification demonstrates high performance on two dozen cetacean species. Methods in Ecology and Evolution, 14, 2611–2625 PDF\nVivier, F., Wells, R.S., Hill, M.C., Yano, K.M., Bradford, A.L., Leunissen, E.M., Pacini, A., Booth, C.G., Rocho-Levine, J., Currie J.J., Patton, P.T., & Bejder, L. (2023) Quantifying the age-structure of free-ranging delphinid populations: testing the accuracy of Unoccupied Aerial System-photogrammetry. Ecology and Evolution, 13, e10082. PDF\nPatton, P. T., Pacifici, K., & Collazo, J. A. (2022) Modeling and estimating co-occurrence between the invasive Shiny Cowbird and its Puerto Rican hosts. Biological Invasions, 24, 2951–2960 PDF"
  },
  {
    "objectID": "cv.html#presentations",
    "href": "cv.html#presentations",
    "title": "Philip T. Patton",
    "section": "Presentations",
    "text": "Presentations\n\nPatton, P.T., Pacifici, K., Allen, J.B., Ashe, E., Athayde, A., Baird, R.W., …& Bejder, L. Evaluating trade‑offs between automation and bias in population assessments relying on photo‑identification. Paper presented at the Biennial Conference on the Biology of Marine Mammals in Perth, Australia. November 2024.\nFertitta, K., Diaz, A., Smith, C., Patton, P.T., Parnell, K., Charrier, I., Pacini, A., & Bejder, L. Descriptions of Hawaiian monk seal underwater vocal behavior at Lehua Rock. Poster presented at the Biennial Conference on the Biology of Marine Mammals in Perth, Australia. November 2024\nParnell, K., Fertitta, K., Diaz, A., Smith, C., Thompson, P., Patton, P.T., Charrier, I., Barbierri, M., Pacini, A., & Bejder, L. Talking story with ’īlio holo i ka uaua (Hawaiian monk seals): First descriptions of underwater sound production in free‑ranging individuals. Poster presented at the Biennial Conference on the Biology of Marine Mammals in Perth, Australia. November 2024\nPatton, P.T., Pacifici, K., Allen, J.B., Ashe, E., Athayde, A., Baird, R.W., …& Bejder, L. Evaluating trade‑offs between automation and bias in population assessments relying on photo‑identification. Poster presented at the International Statistical Ecology Conference. Swansea, Wales. July 2024. Best Student Poster: 2nd Place\nPatton, P.T. Some hierarchical and machine learning models for wildlife science. Invited talk at University of Natural Resources and Life Sciences (BOKU), Vienna, Austria. July 2023.\nPatton, P.T., Oleson, E.M., Baird, R.W., McPherson, L.M., Mahaffy, S.D., &. Bejder, L. The effect of fully automated photo‑identification on mark-recapture estimates. Paper presented at the EURING Analytical Meeting. Montpellier, France. April 2023\nPatton, P. T. & Gardner, B. Misspecifying movement models in spatial capture recapture studies. Paper presented at The Ecological Society of America Conference. Portland, OR, USA. August 2017\nPatton, P. T., Pacifici, K., & Collazo, J. A. Modeling and estimating co‑occurrence between generalist brood parasites and host communities. Paper presented at the EURING Analytical Meeting. Barcelona, Spain. June 2017\nPatton, P. T., Pacifici, K., & Collazo, J. A. Multi‑species occupancy models that incorporate false positive and false negative sampling errors. Paper presented at The Wildlife Society Conference. Raleigh, NC, USA. October 2016\nPatton, P. T., Pacifici, K., & Collazo, J. A. Joint host‑parasite occurrence models can improve predictions and reveal ecological traps. Paper presented at the International Statistical Ecology Conference. Seattle, WA, USA. July 2016"
  },
  {
    "objectID": "cv.html#teaching-experience",
    "href": "cv.html#teaching-experience",
    "title": "Philip T. Patton",
    "section": "Teaching Experience",
    "text": "Teaching Experience\n\nTeaching Assistant, Global Climate Data (MBIO 690), University of Hawaiʻi at Mānoa, Spring 2025\nTeaching Assistant, Mathematical Ecology of Marine Systems (MBIO 610), University of Hawaiʻi at Mānoa, Spring 2025\nTeaching Assistant, Introduction to Scientific Computing (MBIO 690), University of Hawaiʻi at Mānoa, Fall 2024\nTeaching Assistant, Principles of Wildlife Science (FW 453), North Carolina State, Spring 2016\nTeaching Assistant, Introduction to Probability and Statistics (APM 391), SUNY ESF, Fall 2012\nTutor, Calculus I (APM 105), Academic Support Services, SUNY ESF, 2011 to 2013"
  },
  {
    "objectID": "cv.html#professional-development",
    "href": "cv.html#professional-development",
    "title": "Philip T. Patton",
    "section": "Professional Development",
    "text": "Professional Development\n\nAn Introduction to Close-Kin Mark-Recapture, EURING Analytical Meeting\nC++ Virtual Training, NOAA Fisheries\nBayesian Model Selection and Decision Theory for Ecologists, International Statistical Ecology Conference\nFlexible Programming with NIMBLE, International Statistical Ecology Conference\nIntroduction to Structured Decision Making, National Conservation Training Center"
  },
  {
    "objectID": "cv.html#professional-service",
    "href": "cv.html#professional-service",
    "title": "Philip T. Patton",
    "section": "Professional Service",
    "text": "Professional Service\n\nReferee: Wildlife Society Bulletin, Marine Mammal Science\nMember: British Ecological Society, The Wildlife Society (biometrics working group), The Ecological Society of America (statistical ecology section)\nRepresentative to the Faculty, Marine Biology Graduate Program, University of Hawaiʻi at Mānoa\nRepresentative to the Graduate Student Organization, Marine Biology Graduate Program, University of Hawaiʻi at Mānoa"
  },
  {
    "objectID": "occupancy.html#automated-marginalization",
    "href": "occupancy.html#automated-marginalization",
    "title": "Occupancy models",
    "section": "Automated Marginalization",
    "text": "Automated Marginalization\nPyMC has a handy experimental feature called marginalize that automatically marginalizes out discrete latent states. This means that we can sample every parameter in the model with NUTS. This is not only faster than the hybrid sampler above, it also explores the parameter space more efficiently, which can be important for complex models or challenging datasets\nmarginalize is an experimental feature, and as such should be treated with some caution. Nevertheless, I have had success with it in the most common closed Bayesian population models (e.g., occupancy, capture-recapture, and distance sampling). The PyMC team houses these experimental features in the pymc-extras package, which can be installed following the instructions here.\n\nimport pymc_extras as pmx\nmarginal = pmx.marginalize(binary_gibbs, [\"z\"])\n\nwith marginal:\n    marginal_idata = pm.sample()\n\naz.summary(marginal_idata, var_names=['beta0', 'beta1', 'alpha0', 'alpha1'])\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [beta0, beta1, alpha0, alpha1]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nbeta0\n-0.750\n0.249\n-1.207\n-0.270\n0.004\n0.004\n3808.0\n2768.0\n1.0\n\n\nbeta1\n2.798\n0.401\n2.067\n3.567\n0.007\n0.006\n3424.0\n2921.0\n1.0\n\n\nalpha0\n1.405\n0.280\n0.897\n1.946\n0.005\n0.005\n2739.0\n2580.0\n1.0\n\n\nalpha1\n-3.097\n0.392\n-3.852\n-2.397\n0.008\n0.007\n2731.0\n2451.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_trace(\n    binary_gibbs_idata,\n    figsize=(8,6),\n    var_names=['beta0', 'beta1', 'alpha0', 'alpha1'],\n    lines=[(\"beta0\", {}, [beta0_true]), (\"beta1\", {}, [beta1_true]),\n           ('alpha0', {}, [alpha0_true]), ('alpha1', {}, [alpha1_true])]\n);\n\n\n\n\n\n\n\nFigure 5: Tracepots for the \\(p(w)\\psi(x)\\) model. The true parameter values are shown by vertical and horizontal lines\n\n\n\n\n\nAs we can see, the marginal model produces the same estimates in one second. That means that the hybrid sampler took 13 times as long! While 13 seconds doesn’t seem like a lot, remember that this is simulated data and a rather simple model. Imagine if, say, the marginal model took five minutes to fit!",
    "crumbs": [
      "Code",
      "PyMC",
      "Occupancy"
    ]
  },
  {
    "objectID": "closed_cmr.html#model-m_t",
    "href": "closed_cmr.html#model-m_t",
    "title": "Closed capture-recapture",
    "section": "Model \\(M_t\\)",
    "text": "Model \\(M_t\\)\nWe can also look at time varying effects with model \\(M_t.\\)\n\ncoords = {'occasion': np.arange(T)}\nwith pm.Model(coords=coords) as mt:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Beta('psi', 0.001, 1)\n    p = pm.Uniform('p', 0, 1, dims='occasion')\n\n    # included / excluded state\n    z = pm.Bernoulli('z', psi, shape=M)\n\n    # likelihood for detection given inclusion\n    mu_y = z[:, None] * p\n    pm.Bernoulli('y', mu_y, observed=micro_augmented)\n\npm.model_to_graphviz(mt)\n\n\n\n\n\n\n\nFigure 10: Visual representation of model \\(M_b.\\)\n\n\n\n\n\nBroadcasting z across p, now that p is a vector, produces a matrix. The first row of this matrix, mu_y[0], contains the first value of the state variable, z[0], multiplied against every value of the detection probability vector p[0:T], i.e., p.\n\nmt_marginal = pmx.marginalize(mt, ['z'])\nwith mt_marginal:\n    mt_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, p]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\n\naz.summary(mt_idata, var_names=['p', 'psi'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\np[0]\n0.565\n0.066\n0.446\n0.688\n0.001\n0.001\n5451.0\n3067.0\n1.0\n\n\np[1]\n0.702\n0.060\n0.588\n0.809\n0.001\n0.001\n5988.0\n3491.0\n1.0\n\n\np[2]\n0.668\n0.059\n0.563\n0.783\n0.001\n0.001\n5253.0\n3278.0\n1.0\n\n\np[3]\n0.616\n0.065\n0.491\n0.735\n0.001\n0.001\n6482.0\n3198.0\n1.0\n\n\np[4]\n0.583\n0.063\n0.461\n0.702\n0.001\n0.001\n5652.0\n3482.0\n1.0\n\n\npsi\n0.558\n0.049\n0.469\n0.651\n0.001\n0.001\n4749.0\n2986.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_forest(mt_idata, var_names=['p'], combined=True, ess=True, figsize=(6,2));\n\n\n\n\n\n\n\nFigure 11: Forest plot showing the variation in the detection probability from model \\(M_b.\\)\n\n\n\n\n\nFor the most part, it doesn’t look as if the detection prbobability varied dramatically across the study.",
    "crumbs": [
      "Code",
      "PyMC",
      "Closed capture-recapture"
    ]
  },
  {
    "objectID": "closed_cmr.html#model-m_h",
    "href": "closed_cmr.html#model-m_h",
    "title": "Closed capture-recapture",
    "section": "Model \\(M_{h}\\)",
    "text": "Model \\(M_{h}\\)\nWe can also model individual effects with model \\(M_h\\). Following this PyMC notebook, I use a bounded Pareto distribution, which goes on to inform the individual-level recapture probabilities, which are Beta-distributed. See their notebook for deatils.\n\ncoords = {'individual': np.arange(M)}\nwith pm.Model(coords=coords) as mh:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Beta('psi', 0.001, 1)\n\n    # overall average\n    phi = pm.Uniform(\"phi\", lower=0.0, upper=1.0)\n\n    # individual level variation\n    kappa_log = pm.Exponential(\"kappa_log\", lam=1.5)\n    kappa = pm.Deterministic(\"kappa\", pm.math.exp(kappa_log))\n    theta = pm.Beta(\"theta\", alpha=phi * kappa, beta=(1.0 - phi) * kappa, dims=\"individual\")\n\n    pm.ZeroInflatedBinomial(\n        'y',\n        p=theta,\n        psi=psi,\n        n=T,\n        observed=micro_augmented.sum(axis=1)\n    )\n\npm.model_to_graphviz(mh)\n\n\n\n\n\n\n\nFigure 12: Visual representation of model \\(M_h.\\)\n\n\n\n\n\nThis model is a little trickier to fit than the models above. As such, I increased the number of tuning draws and post-tune draws to 2000. Moreover, I increased the target acceptance rate of the sampler to 0.95.\n\nwith mh:\n    mh_idata = pm.sample(tune=2000, draws=2000, target_accept=0.99)\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, phi, kappa_log, theta]\n\n\n\n\n\n\n\n\nSampling 4 chains for 2_000 tune and 2_000 draw iterations (8_000 + 8_000 draws total) took 19 seconds.\n\n\n\naz.summary(mh_idata, var_names=['psi', 'phi', 'kappa'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npsi\n0.720\n0.099\n0.533\n0.911\n0.003\n0.003\n923.0\n496.0\n1.01\n\n\nphi\n0.495\n0.074\n0.356\n0.631\n0.002\n0.001\n1108.0\n946.0\n1.00\n\n\nkappa\n1.409\n0.408\n1.000\n2.151\n0.014\n0.014\n906.0\n1547.0\n1.00\n\n\n\n\n\n\n\n\nax = az.plot_trace(mh_idata, var_names=['psi', 'phi', 'kappa'])\nplt.subplots_adjust(hspace=0.4)\n\n\n\n\n\n\n\n\n\nfig, axes = plt.subplots(1, 2, figsize=(7, 13), sharey=True)\n\naz.plot_forest(mh_idata, var_names=\"theta\", combined=True, ess=True, ax=axes,\n               coords={'individual': np.arange(50)});\n\n\n\n\n\n\n\n\nWe see that there is notable variation in capture probability among individuals. Further, we see that the inclusion probability has increased considerable, with some samples near the boundary. If we were interested in this model, we would likely have to increase the number of augmented individuals in the analysis.\n\n%load_ext watermark\n\n%watermark -n -u -v -iv -w\n\nThe watermark extension is already loaded. To reload it, use:\n  %reload_ext watermark\nLast updated: Tue Oct 14 2025\n\nPython implementation: CPython\nPython version       : 3.13.3\nIPython version      : 9.2.0\n\nmatplotlib : 3.10.1\npytensor   : 2.31.7\npymc_extras: 0.5.0\nnumpy      : 2.2.5\npymc       : 5.25.1\narviz      : 0.21.0\npandas     : 2.2.3\nseaborn    : 0.13.2\n\nWatermark: 2.5.0",
    "crumbs": [
      "Code",
      "PyMC",
      "Closed capture-recapture"
    ]
  },
  {
    "objectID": "closed_cmr.html#model-m_0",
    "href": "closed_cmr.html#model-m_0",
    "title": "Closed capture-recapture",
    "section": "Model \\(M_0\\)",
    "text": "Model \\(M_0\\)\nI explore fitting the simplest closed capture-recapture model, Model \\(M_0,\\) through parameter-expanded data-augmentation (PX-DA, Royle and Dorazio 2008). The idea with PX-DA is to augment the capture histories with \\(M-n\\) all zero capture-histories, where \\(M\\) is a hyperparameter that should be much greater than the true population size \\(N,\\) and \\(n\\) is the total number of individuals that were captured during the study. This allows us to treat the data as a zero-inflated binomial distribution (see below). In this case, we augment the history by setting \\(M=1500\\)\n\ndef augment_history(history, M):\n    '''Augment a capture history with all-zero histories.'''\n\n    animals_captured, T = history.shape\n\n    # create M - n all zero histories\n    zero_history_count = M - animals_captured\n    zero_history = np.zeros((zero_history_count, T))\n\n    # tack those on to the capture history\n    augmented = np.vstack((history, zero_history))\n\n    return augmented\n\ndef get_histories():\n    '''Read, augment, and recombine the salamander histories.'''\n\n    # read in salamander data\n    sal_data = pd.read_csv('sal_data.csv')\n\n    # labels for capture history columns\n    col_labs = [f'y{t}' for t in range(1, 5)]\n\n    # subset each dataset before augmenting\n    is_pyg = sal_data.spp == 1\n    is_red = sal_data.spp == 0\n\n    pyg = sal_data.loc[is_pyg, col_labs].to_numpy()\n    red = sal_data.loc[is_red, col_labs].to_numpy()\n\n    return {'pyg': pyg, 'red': red}\n\ndef augment_histories(histories, M):\n\n    pyg_augmented = augment_history(histories['pyg'], M=M)\n    red_augmented = augment_history(histories['red'], M=M)\n\n    # recombine into one history\n    history = np.concatenate((pyg_augmented, red_augmented))\n\n    return history\n\nhistories = get_histories()\n\nn_red, T = histories['red'].shape\nn_pyg, T = histories['pyg'].shape\n\n# # summarize into binomial data\nM = 1500\nhistory_augmented = augment_histories(histories, M=M)\nhistory_summarized = history_augmented.sum(axis=1)\n\nFor this model, I use the pm.ZeroInflatedBinomial class, just as I did in the occupancy notebook. That said, the parameters here are different. First, \\(p\\) represents the probability of capturing a given individual during the survey. Second, \\(\\psi\\) represents a mysterious entity known as the inclusion probability. That is, the probability that an individual from the hypothetical superpopulation \\(M\\) is included in the population of interest \\(N.\\) Then, we can simulate the posterior distribution for \\(N\\) using \\(M\\) and the posterior distributions of \\(\\psi.\\)\nIn this example, I combine the two species into one pm.Model object, making use of coords. That said, the parameters for each species are treated as independent. In other words, this is a “no-pooling” model.\n\n# index for each species\nspecies_idx = np.repeat([0, 1], M)\n\n# coordinates identifying parameter each species\ncoords = {'species': ['pygmy', 'red_cheeked']}\n\nwith pm.Model(coords=coords) as M0:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Beta('psi', 0.001, 1, dims='species')\n    p = pm.Uniform('p', 0, 1, dims='species')\n\n    # likelihood for the summarized data\n    pm.ZeroInflatedBinomial(\n        'history',\n        p=p[species_idx],\n        psi=psi[species_idx],\n        n=T,\n        observed=history_summarized\n    )\n\npm.model_to_graphviz(M0)\n\n\n\n\n\n\n\nFigure 1: Visual representation of model \\(M_0.\\) MarginalMixture refers to the zero-inflated binomial distribution.\n\n\n\n\n\n\nwith M0:\n    M0_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, p]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 7 seconds.\n\n\n\nax = az.plot_trace(M0_idata, figsize=(8,4), var_names=['psi', 'p']);\nplt.subplots_adjust(hspace=0.4)\n\n\n\n\n\n\n\nFigure 2: Traceplots for the salamander \\(M_0\\) model. The red-cheeked salamander is in blue while the pygmy salamander is in red.\n\n\n\n\n\nFor faster sampling, it’s better to separate the two species into two separate models. On my machine, the individual species models finish sampling in 2-3 seconds, compared to 15-20 seconds for the two species model. That said, the two species model is somewhat more convenient.\nOf course, the trace plots lack our true parameter of interest: the population size \\(N.\\) We can simulate the posterior of \\(N\\) as a derived quantity, using \\(M\\) and the posterior distribution of \\(\\psi\\).\n\n# az.extract flattens the chains\nposterior = az.extract(M0_idata)\npsi_samps = posterior.psi.values\np_samps = posterior.p.values\n\n# posterior probabilities of being present in the population but not detected\np_if_present = psi_samps * binom.pmf(0, n=T, p=p_samps)\np_total = p_if_present + (1 - psi_samps)\n\n# simulate the number of undetected animals in each population\nnumber_undetected_pyg = RNG.binomial(M - n_pyg, p_if_present[0] / p_total[0])\nnumber_undetected_red = RNG.binomial(M - n_red, p_if_present[1] / p_total[1])\n\n# simulate N\nN_pyg = n_pyg + number_undetected_pyg\nN_red = n_red + number_undetected_red\n\nBelow I plotted the posterior distributions of \\(N\\) for both species, adding the estimates from Hooten and Hefley (2019), Chapter 24. Although note that they used a different prior for \\(\\psi.\\)\n\nN_hooten = [229.6, 450.9]\nfig, ax = plt.subplots(figsize=(6,4))\nax.hist(N_pyg, color='C0', edgecolor='white', alpha=0.9, bins=30, label='Pygmy')\nax.hist(N_red, color='C1', edgecolor='white', alpha=0.9, bins=30, label='Red-cheeked')\nax.axvline(N_hooten[0], linestyle='--', color='black', linewidth=2)\nax.axvline(N_hooten[1], linestyle='--', color='black', linewidth=2)\nax.set_title('Posterior distributions of $N$')\nax.set_ylabel('Number of samples')\nax.legend()\nplt.show()\n\n\n\n\n\n\n\nFigure 3: Posterior distributions of \\(N\\) from the \\(M_0\\) model. Estimates from Hooten and Hefley (2019) are shown by the vertical lines’\n\n\n\n\n\nWe might expect estimates of capture probability \\(p\\) and the abundance \\(N\\) to be somewhat correlated. We can explore this relationship visually by plotting the posterior draws.\n\n# create the plot\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\n\n# add the scatter for each species\nlabs = ['Pygmy', 'Red-backed']\nax.scatter(p_samps[0], N_pyg, s=10, alpha=0.2, label=labs[0])\nax.scatter(p_samps[1], N_red, s=10, alpha=0.2, label=labs[1])\n\n# this removes the opacity for the dots in the legend\nleg = ax.legend()\nfor lh in leg.legend_handles:\n    lh.set(sizes=[25], alpha=[1])\n\n# update aesthetics\nax.spines.right.set_visible(False)\nax.spines.top.set_visible(False)\n\nax.set_ylabel(r'$N$')\nax.set_xlabel(r'$p$')\nax.set_title('Posterior draws')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 4: Posterior draws of \\(N\\) and \\(p\\) for both species of salamander.",
    "crumbs": [
      "Code",
      "PyMC",
      "Closed capture-recapture"
    ]
  },
  {
    "objectID": "closed_cmr.html#model-m_b",
    "href": "closed_cmr.html#model-m_b",
    "title": "Closed capture-recapture",
    "section": "Model \\(M_b\\)",
    "text": "Model \\(M_b\\)\nNext, I fit model \\(M_b,\\) which accounts for the possibility that the capture probability changes after the animal is first caught. This could be from trap happiness, whereby animals are more likely to be trapped after their first time. Conversely, this could be from subsequent trap avoidance.\n\n# read in the microtus data\nmicrotus = np.loadtxt('microtus.data.txt').astype(int)\n\n# the last column is not relevant\nmicro_hist = microtus[:,:-1]\nn, T = micro_hist.shape\n\n# augment with all zero histories\nM = 100\nmicro_augmented = augment_history(micro_hist, M=M)\n\n# note the occasion when each individual was first seen\nfirst_seen = (micro_hist != 0).argmax(axis=1)\n\n# create the covariate for the behavior effect\nbehavior_effect = np.zeros((M, T))\nfor i, f in enumerate(first_seen):\n    behavior_effect[i, (f + 1):] = 1\n\n# covariate matrix\nx_int = np.ones((M, T))\nX = np.stack((x_int, behavior_effect), axis=2)\n\nJust like in the occupancy notebook, the detection probability will now be a matrix, i.e., it depends on the individual and the occasion. As such, we can no longer rely on pm.ZeroInflatedBinomial. Again, just like the occupancy notebook, we will write the model in terms of the latent \\(z_i\\) state, then marginalize it out with pymc_extras.marginalize().\n\ncoords = {'alpha_coeffs': ['Intercept', 'B_Response']}\nwith pm.Model(coords=coords) as mb:\n\n    # priors for the capture and inclusion probabilities\n    psi = pm.Beta('psi', 0.001, 1)\n    Alpha = pm.Normal('Alpha', 0, 2, dims='alpha_coeffs')\n\n    # linear model for the capture probability\n    nu = pm.math.dot(X, Alpha)\n    p = pm.Deterministic('p', pm.math.invlogit(nu))\n\n    # included / excluded state\n    z = pm.Bernoulli('z', psi, shape=M)\n\n    # likelihood for detection given inclusion\n    mu_y = z[:, None] * p\n    pm.Bernoulli('y', mu_y, observed=micro_augmented)\n\npm.model_to_graphviz(mb)\n\n\n\n\n\n\n\nFigure 5: Visual representation of model \\(M_b.\\)\n\n\n\n\n\n\nmb_marginal = pmx.marginalize(mb, ['z'])\nwith mb_marginal:\n    mb_idata = pm.sample()\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [psi, Alpha]\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\n\naz.summary(mb_idata, var_names=['Alpha', 'psi'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nAlpha[Intercept]\n0.115\n0.239\n-0.331\n0.560\n0.005\n0.004\n2298.0\n2243.0\n1.0\n\n\nAlpha[B_Response]\n0.611\n0.283\n0.085\n1.142\n0.006\n0.005\n2374.0\n2309.0\n1.0\n\n\npsi\n0.571\n0.052\n0.474\n0.672\n0.001\n0.001\n2369.0\n2170.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_forest(mb_idata, var_names=['Alpha'], combined=True, ess=True, figsize=(6,2));\n\n\n\n\n\n\n\nFigure 6: Forest plot showing the catchability parameters from model \\(M_b.\\)\n\n\n\n\n\nThe forest plot indicates that there is some evidence of a weak, positive behavioral response. Although note that the 94% credible intervals between the baseline capture rate and the behavioral effect overlap considerably.\n\n# # simulate draws of N\npsi_samps = az.extract(mb_idata).psi.values\np_samps = az.extract(mb_idata).p.values\n\n# posterior probabilities of being present in the population but not detected\np_if_present = psi_samps * binom.pmf(0, n=T, p=p_samps)\np_total = p_if_present + (1 - psi_samps)\n\n# simulate the number of undetected animals in each population\nnumber_undetected = RNG.binomial(M - n, p_if_present / p_total)\n\n# simulate N\nN = n + number_undetected\n\n# create the plot\nfig, ax = plt.subplots(figsize=(4, 3))\n\n# bar plot looks a little better than a histogram here imo\nN_values, N_counts = np.unique(N, return_counts=True)\nax.bar(N_values, N_counts)\n\nax.annotate(\n    'Number\\ndetected $n$',\n    ha='left',\n    xy=(N_values[0], N_counts[0]),\n    color='black',\n    xytext=(n+5, 6.2e5),\n    arrowprops=dict(arrowstyle=\"-&gt;\", color='black', linewidth=1,\n                    connectionstyle=\"angle3,angleA=90,angleB=0\")\n)\n\nax.ticklabel_format(axis='y', style='sci', scilimits=(0,0))\nax.set_ylabel('Number of samples')\nax.set_title('Posterior of $N$')\n\nplt.show()\n\n\n\n\n\n\n\nFigure 7: Posterior distribution of \\(N\\) from model \\(M_b.\\) The number voles that were detected \\(n\\) is shown by the vertical red line.\n\n\n\n\n\nMost of the posterior density of \\(N\\) is at \\(n,\\) the number of animals detected. The discovery curve hints at why this may be the case. It seems that all the voles in the population may have been captured by the end of the study.\n\n# how many voles have been seen?\ntotal_seen = micro_hist.sum(axis=0).cumsum()\ntotal_seen = np.insert(total_seen, 0, 0)\n\n# how many new voles have been seen?\nfirst_seen = (micro_hist != 0).argmax(axis=1)\nnewbies = [sum(first_seen == t) for t in range(T)]\ntotal_newbies = np.cumsum(newbies)\ntotal_newbies = np.insert(total_newbies, 0, 0)\n\nfig, ax = plt.subplots(figsize=(5, 3.5))\nax.plot(total_seen, total_newbies)\nax.fill_between(total_seen, total_newbies, alpha=0.2)\nax.set_title('Discovery curve')\nax.set_xlabel('Total voles captured')\nax.set_ylabel('Unique voles captured')\nplt.show()\n\n\n\n\n\n\n\nFigure 8: Discovery curve for the Microtus study.\n\n\n\n\n\nWe can also look at the behavioral effect by visualizing the posterior distributions of \\(p.\\) As we can see, the voles who have been captured before are more likely to be captured again.\n\nfirst_detection = X[:, :, 1] == 0\np_first_detection = p_samps[first_detection].flatten()\np_seen_before = p_samps[~first_detection].flatten()\n\nfig, ax = plt.subplots(figsize=(5, 3.5))\naz.plot_dist(p_first_detection, ax=ax, label='First detection', color='C0')\naz.plot_dist(p_seen_before, ax=ax, label='Seen before', color='C1')\nax.set_title('Posterior distributions of $p$')\nax.set_xlim((0,1))\nax.set_yticks([])\nax.legend()\nplt.show()\n\n\n\n\n\n\n\nFigure 9: Posterior distributions for the probability of detection given the behavioral effect.",
    "crumbs": [
      "Code",
      "PyMC",
      "Closed capture-recapture"
    ]
  },
  {
    "objectID": "scr.html#nuts-sampler",
    "href": "scr.html#nuts-sampler",
    "title": "Spatial capture-recapture",
    "section": "NUTS sampler",
    "text": "NUTS sampler\nThroughout these notebooks, I have been estimating parameters with the default NUTS sampler in PyMC. One of PyMC’s great strengths is that it allows you to select different samplers with the same model code. We saw one version of this in the occupancy notebook, where we had a Binary Gibbs Sampler for the discrete \\(z_i\\) state and a NUTS sampler for the continuous parameters. But PyMC goes one step further, allowing you to choose different NUTS samplers. These include numpyro, which is itself a package for MCMC that can run on GPUs. Additionally, there is the nutpie sampler that is ultimately written in Rust. In most cases, nutpie is much faster than the default PyMC sampler. That said, nutpie can slightly less flexible.\nSince the SCR models in this notebook take a little longer to run, I will use the nutpie sampler throughout. The difference can be substantial. For instance, the unknown \\(N\\) model below takes 39 seconds with the default sampler, and 13 seconds with the nutpie sampler.\n\nwith known:\n    known_idata = pm.sample(nuts_sampler='nutpie')\n\n\n\n\n\n\n    Sampler Progress\n    Total Chains: 4\n    Active Chains: 0\n    \n        Finished Chains:\n        4\n    \n    Sampling for now\n    \n        Estimated Time to Completion:\n        now\n    \n\n    \n    \n    \n        \n            \n                Progress\n                Draws\n                Divergences\n                Step Size\n                Gradients/Draw\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.33\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.33\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.33\n                    15\n                \n            \n                \n                    \n                        \n                        \n                    \n                    2000\n                    0\n                    0.34\n                    15\n                \n            \n            \n        \n    \n\n\n\n\naz.summary(known_idata, var_names=['g0', 'sigma'])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\ng0\n0.022\n0.003\n0.017\n0.028\n0.000\n0.000\n864.0\n1497.0\n1.0\n\n\nsigma\n94.783\n7.965\n80.985\n109.960\n0.344\n0.228\n557.0\n1103.0\n1.0\n\n\n\n\n\n\n\n\naz.plot_trace(\n    known_idata,\n    var_names=['g0', 'sigma'],\n    figsize=(8,4),\n    lines=[(\"g0\", {}, [g0_true]), (\"sigma\", {}, [sigma_true])]\n);\n\n\n\n\n\n\n\nFigure 3: Trace plots for model where \\(N\\) is known. The true parameter values are shown by vertical and horizontal lines.\n\n\n\n\n\nThe trace plots show reasonable agreement between the true parameter values and the estimated values, although \\(g_0\\) appears to be overestimated.",
    "crumbs": [
      "Code",
      "PyMC",
      "Spatial capture-recapture"
    ]
  }
]